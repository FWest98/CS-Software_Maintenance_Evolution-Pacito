Pattern changes caused by commit: 0bb3a064f3dd34823145124360c049f5d29b91ad

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7704.txt 

commit 0bb3a064f3dd34823145124360c049f5d29b91ad
Author: Jonathan Ellis <jbellis@apache.org>

    fix progress counting in wide row iterator
    patch by Piotr Koalczkowski; reviewed by jbellis for CASSANDRA-4803



==================================
 Issue CASSANDRA-4803 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4803] CFRR wide row iterators improvements
-----------------

-----------------
Summary: CFRR wide row iterators improvements
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sat, 13 Oct 2012 08:16:56 +0000
-----------------

-----------------
Resolved at: Sat, 1 Dec 2012 07:05:21 +0000
-----------------

-----------------
Assigned to: Piotr Kolaczkowski
-----------------

-----------------
Description: 
<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java"> <span class="code-keyword">public</span> <span
class="code-object">float</span> getProgress()    {        <span class="code-comment">//
TODO <span class="code-keyword">this</span> is totally broken <span
class="code-keyword">for</span> wide rows</span>        <span class="code-comment">// the
progress is likely to be reported slightly off the actual but close enough</span>       
<span class="code-object">float</span> progress = ((<span
class="code-object">float</span>) iter.rowsRead() / totalRowCount);        <span
class="code-keyword">return</span> progress &gt; 1.0F ? 1.0F : progress;   
}</pre></div></div>
The problem is iter.rowsRead() does not return the number of rows read
from the wide row iterator, but returns number of <b>columns</b> (every row is counted
multiple times). 
 

-----------------

-----------------
Comments: 

New Comment: 
I attach a list of patches affecting operation of CFRR:<ol>	<li>Fix for obvious counting
bug in wide row iterator that was counting columns instead of rows.</li>	<li>Several fixes
in describe_splits:<br/>   fixed non-uniform splitting - caused by integer math roundoff
errors<br/>   fixed insane behaviour when number of splits was higher than number of key
samples<br/>   added estimated size of the split to the result, and make use of it in
CFIF</li>	<li>This is a patch for broken get_paged_slice; addressed in a separate ticket,
but I had to include it in order to test my code</li>	<li>Fix for creating excessively
small splits (and wrong progress reporting) due to range wrap
around.</li>	<li>get_range_slices allows for (start_key, end_token) exactly the same as
get_paged_slice</li>	<li>I tried to de-spaghettize CFRR code a little. This also fixes
some bug that accidentally slipped in with previous patches.</li></ol> 


New Comment: 
reviewed + committed patches 01 and 02, rest still pending. 


New Comment: 
03 committed in <a href="https://issues.apache.org/jira/browse/CASSANDRA-4816"
title="Broken get_paged_slice" class="issue-link"
data-issue-key="CASSANDRA-4816"><del>CASSANDRA-4816</del></a>.Not sure about 04 &#8211;
I'm a fan of the simplifications we get from letting CFRR only need to deal with
non-wrapping splits. 


New Comment: 
#04 - what about virtual nodes in 1.2? Do we insist that split may not span more than one
contiguous token range? It will be harder to avoid too small splits. And too small split =
bigger task book-keeping overhead. 


New Comment: 
Hold on with applying patch 2 for a while. We just discovered it breaks running hive
queries while doing rolling upgrade. There is a need for falling back to old
describe_splits method if describe_splits_ex is not found. 


New Comment: 
Attaching a patch allowing to generate splits also when talking to an older version of
thrift server. 


New Comment: 
Rebased patches for recent 1.1. Some patches have been already applied, so removed them
from the list. 


New Comment: 
<blockquote>what about virtual nodes in 1.2? Do we insist that split may not span more
than one contiguous token range?</blockquote>That's kind of orthogonal to wrapping ranges
per se &#8211; you'll still only have a single <span
class="error">&#91;virtual&#93;</span> node whose range wraps.  So vnodes won't make that
worse.  Moreover, you're still going to need two scans at the disk level since a wrapping
range won't be contiguous there.  (Currently wrapping ranges are split by
StorageProxy.getRestrictedRanges but this may change for <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4858" title="Coverage analysis for
low-CL queries" class="issue-link"
data-issue-key="CASSANDRA-4858"><del>CASSANDRA-4858</del></a>.)  Doing an extra Thrift or
CQL query is negligible overhead compared to the actual scan.Finally, getRestrictedRanges
<b>will</b> split it up into scan-per-vnode which I agree is something we should fix but I
don't think this patch does it.  As an optimization I don't think it's something we should
block 1.2.0 for.  Should we split this into a separate ticket? 


New Comment: 
0006: Can you split out the bug fix and rebase?  Refactoring is fine but let's keep it
separate from bug fixes.0007: I'm unclear what this is useful for, anyone running a 1.1
recent enough to have this patch, would also have describe_splits_ex, no? 


New Comment: 
0007 - this is for rolling upgrade. When you upgrade one node and the other nodes don't
have describe_splits_ex yet, starting a hadoop job on a newly upgraded node fails.As for
0004 / 0006 fixes - I agree. Let's move them to a separate ticket. 


New Comment: 
BTW: I don't get email notifications from ASF Jira. It is because I registered long, long
time ago and my email is obsolete. How to change my email to a newer one? I can't see an
option in the user profile for doing that. 


New Comment: 
Is there a more specific exception we can catch besides TException? 


New Comment: 
Without trying it, I think it would be TApplicationException.WRONG_METHOD_NAME. 


New Comment: 
<a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jbellis"
class="user-hover" rel="jbellis">Jonathan Ellis</a> right, I change it. 


New Comment: 
0007-Fallback-to-describe-splits-v2.patch: Catching TApplicationException and checking its
type. 


New Comment: 
Attached third version of the patch - this time it works. The right error code is
UNKNOWN_METHOD (1), not WRONG_METHOD_NAME. 


