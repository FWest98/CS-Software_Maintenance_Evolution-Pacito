Pattern changes caused by commit: 16097db1f2afac9e5098d67e9709552f4f7ef9a0

From: Facade-0
To:   Facade-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5575.txt 

commit 16097db1f2afac9e5098d67e9709552f4f7ef9a0
Author: Jonathan Ellis <jbellis@apache.org>

    fix commitlog segment recycling
    patch by Rick Branson; reviewed by jbellis for CASSANDRA-3557



==================================
 Issue CASSANDRA-3557 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3557] Commit Log segments are not recycled
-----------------

-----------------
Summary: Commit Log segments are not recycled
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 2 Dec 2011 09:19:16 +0000
-----------------

-----------------
Resolved at: Fri, 2 Dec 2011 23:30:30 +0000
-----------------

-----------------
Assigned to: Rick Branson
-----------------

-----------------
Description: 

Cassandra never recycles segments created after recovery.
 

-----------------

-----------------
Comments: 

New Comment: 
I'm still not a fan of creating a new Segment object on recycle.  Feels like in this case
it makes things more fragile rather than less.  Otherwise lgtm. 


New Comment: 
There are a few reasons:<ul>	<li>There is some "reset" logic that would need to be
duplicated from the constructor into the recycle() method. Resetting this mutable state
seems fragile vs just discarding immutable state.</li>	<li>Current code from the
constructor for existing files works for both the case of recycling recovered segments and
recycling discarded segments. Moving this out means we'd have to split this logic and
duplicate it.</li>	<li>Naming/renaming logic would have to be reworked and likely
duplicated in some places, and the segment MUST be renamed for several
reasons:	<ul>		<li>ReplayPosition objects reference CommitLogSegment's by their id, which
is stored in the filename</li>		<li>CommitLog.recover explicitly replays segments in order
of their id, and not giving them a fresh id would break this
contract.</li>	</ul>	</li>	<li>If we re-use CommitLogSegment objects, leaked references
could unintentionally operate on the wrong segment file. A CLS object could reference one
segment at one point in time, and another at a future point in time. This seems dangerous
to me. The patch as it sits rejects any mutations after the segment is closed and any
modifications to the "dirty" table are meaningless.</li></ul> 


New Comment: 
makes sense, committed 


