Pattern changes caused by commit: ab42d9825016f0c4daa5d92df7f7574027fab6a7

From: Mediator-2
To:   Mediator-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4432.txt 

commit ab42d9825016f0c4daa5d92df7f7574027fab6a7
Author: Jonathan Ellis <jbellis@apache.org>

    support spaces in path to log4j configuration
    patch by David Allsopp; reviewed by jbellis for CASSANDRA-2383



==================================
 Issue CASSANDRA-2383 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2383] log4j unable to load properties file from classpath
-----------------

-----------------
Summary: log4j unable to load properties file from classpath
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 25 Mar 2011 04:07:48 +0000
-----------------

-----------------
Resolved at: Wed, 13 Jul 2011 03:19:46 +0000
-----------------

-----------------
Assigned to: David Allsopp
-----------------

-----------------
Description: 

when cassandra home folder is placed inside a folder which has space characters in its
name,<br/>log4j settings are not properly loaded and warning messages are shown.
 

-----------------

-----------------
Comments: 

New Comment: 
In cassandra.bat, change: -Dlog4j.configuration=log4j-server.properties^to:
-Dlog4j.configuration="file:///%CASSANDRA_HOME%/conf/log4j-server.properties"^I'm hopeful
there's a less ugly way, but this seems to work. 


New Comment: 
OK, simpler solution is: -Dlog4j.configuration=<a href="file:conf/log4j-server.properties"
class="external-link" rel="nofollow">file:conf/log4j-server.properties</a>^But note that
this only works if the current directory is CASSANDRA_HOME, so double-clicking on the
batch file won't work, whereas the previous solution will work from the 'bin' directory,
so double-clicking is OK. 


New Comment: 
log4j should already find it because ofset CLASSPATH="%CASSANDRA_HOME%\conf" 


New Comment: 
Another solution that seems to work regardless of working directory is leave the original
log4j.configuration line, but remove the line:-Dlog4j.defaultInitOverride=true^This gets
the classloader to find the config file as a resource, rather than supplying a file
reference directly.However, I'm unsure why the defaultInitOverride was there in the first
place... 


New Comment: 
@Jonathan - yes, I thought so too, but it doesn't. The default init process for log4j is
described at <a href="http://logging.apache.org/log4j/1.2/manual.html"
class="external-link" rel="nofollow">http://logging.apache.org/log4j/1.2/manual.html</a>,
but it doesn't really explain what happens if defaultInitOverride is set!With 
-Dlog4j.debug=true and the original batch file, i.e.<blockquote>
-Dlog4j.configuration=log4j-server.properties^<br/>
-Dlog4j.defaultInitOverride=true^}}</blockquote>I see:<blockquote>Starting Cassandra
Server<br/>log4j: <span
class="error">&#91;/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties&#93;</span>
does not exist.<br/>log4j: Default initialization of overridden by
log4j.defaultInitOverrideproperty.<br/>log4j:WARN No appenders could be found for logger
(org.apache.cassandra.service.AbstractCassandraDaemon).<br/>log4j:WARN Please initialize
the log4j system properly.<br/>log4j:WARN See <a
href="http://logging.apache.org/log4j/1.2/faq.html#noconfig" class="external-link"
rel="nofollow">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a> for more
info.</blockquote>If I remove the defaultInitOverride, I get:<blockquote>Starting
Cassandra Server<br/>log4j: <span
class="error">&#91;/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties&#93;</span>
does not exist.<br/>log4j: Trying to find <span
class="error">&#91;log4j-server.properties&#93;</span> using context classloader
sun.misc.Launcher$AppClassLoader@1a45a877.<br/>log4j: Using URL <a
href="file:/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties"
class="external-link"
rel="nofollow">file:/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties</a>
for automatic log4j configuration.<br/>log4j: Reading configuration from URL <a
href="file:/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties"
class="external-link"
rel="nofollow">file:/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties</a><br/><span
class="error">&#91;etc...&#93;</span></blockquote>Finally, with:<blockquote>
-Dlog4j.configuration=<a href="file:conf/log4j-server.properties" class="external-link"
rel="nofollow">file:conf/log4j-server.properties</a>^<br/>
-Dlog4j.defaultInitOverride=true^</blockquote>I get this, if current directory is
CASSANDRA_HOME:<blockquote>Starting Cassandra Server<br/>log4j: Default initialization of
overridden by log4j.defaultInitOverrideproperty.<br/><span
class="error">&#91;etc...&#93;</span></blockquote>But this, if current directory is
CASSANDRA_HOME/bin (e.g. if double-clicking the batch file):<blockquote>Starting Cassandra
Server<br/>log4j: <span class="error">&#91;conf/log4j-server.properties&#93;</span> does
not exist.<br/>log4j: Default initialization of overridden by
log4j.defaultInitOverrideproperty.<br/>log4j:WARN No appenders could be found for logger
(org.apache.cassandra.service.AbstractCassandraDaemon).<br/>log4j:WARN Please initialize
the log4j system properly.<br/>log4j:WARN See <a
href="http://logging.apache.org/log4j/1.2/faq.html#noconfig" class="external-link"
rel="nofollow">http://logging.apache.org/log4j/1.2/faq.html#noconfig</a> for more
info.</blockquote> 


New Comment: 
Weird.  Could you dig into the code in AbstractCassandraDaemon a little?  Here's what's
trying to do load by classpath:<div class="code panel" style="border-width: 1px;"><div
class="codeContent panelContent"><pre class="code-java">            <span
class="code-comment">// load from the classpath.</span>            configLocation =
AbstractCassandraDaemon.<span
class="code-keyword">class.</span>getClassLoader().getResource(config);            <span
class="code-keyword">if</span> (configLocation == <span class="code-keyword">null</span>) 
              <span class="code-keyword">throw</span> <span
class="code-keyword">new</span> RuntimeException(<span class="code-quote">"Couldn't figure
out log4j configuration."</span>);</pre></div></div> 


New Comment: 
<a href="http://www.vipan.com/htdocs/log4jhelp.html" class="external-link"
rel="nofollow">http://www.vipan.com/htdocs/log4jhelp.html</a> has the
following:log4j.configuration=app_config.properties: First call to Category.getRoot() or
Category.getInstance(...) method makes Log4j go through an initialization process. (You
can watch that happening by setting "log4j.debug=true".) During this process, Log4j looks
in the application's classpath for a "log4j.properties" file <b>or the properties file you
specify</b> via the this property key. However, you need to set this as a system property,
for example by running your program with java -Dlog4j.configuration=app_config.properties
.... This is because, if you set it in the configuration file, it is too late. Log4j would
have already started to read the log4j.properties file by default, if available! 


New Comment: 
@Jonathan - will try to take a look soon. The getResource() stuff might perhaps be
affected by the classes being within a jarfile. 


New Comment: 
OK, have gone around in circles a bit on this!-Dlog4j.defaultInitOverride enables
AbstractCassandraDaemon to take charge of the log4j configuration in order to make it
dynamic (you can change the log4j config file, and it should be updated using the log4j
PropertyConfigurator every 10 seconds).The default value of log4j.configuration in the
code and in the batch file is "log4j-server.properties", which is not a valid URL, so we
drop into:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre> configLocation =
AbstractCassandraDaemon.class.getClassLoader().getResource(config);</pre></div></div> as
you said before. This <b>does</b> detect the correct file from CASSANDRA_HOME/conf, since
log4j logs the <b>full path</b> even though we only supply the filename
"log4j-server.properties":<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre> log4j:
[/C:/Users/David/Key%20Value/apache-cassandra-0.7.6-2/conf/log4j-server.properties] does
not exist.</pre></div></div> getResource() returns a URL. Converting this to a file using
getFile() works fine when there are no spaces; one can verify that the file exists
(File.exists() == true). If there are spaces, then this conversion produces a filename
that includes the %20 encoding for spaces - this is an incorrect filename.We need instead
to convert using:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre> new
File(configLocation.toURI());</pre></div></div> (with appropriate exception handling for
URISyntaxException) which produces a filename with spaces rather than %20. 


New Comment: 
Suggested fix for AbstractCassandraDaemon static initializer (apologies - haven't got a
suitable version of diff on this windows box yet). Untested on linux as yet.<div
class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>    //Initialize logging in such a way that it checks for config
changes every 10 seconds.    static    {        String config =
System.getProperty("log4j.configuration", "log4j-server.properties");        URL
configLocation = null;        try         {            // try loading from a physical
location first.            configLocation = new URL(config);        }        catch
(MalformedURLException ex)         {            // then try loading from the classpath.   
        configLocation =
AbstractCassandraDaemon.class.getClassLoader().getResource(config);        }              
 if (configLocation == null)            throw new RuntimeException("Couldn't figure out
log4j configuration: "+config);                // Now convert URL to a filename       
String configFileName = null;		try		{			// first try URL.getFile() which works for opaque
URLs (file:foo) and paths without spaces			configFileName =
configLocation.getFile();			File configFile = new File(configFileName);			// then try
alternative approach which works for all hierarchical URLs with or without
spaces			if(!configFile.exists())			{				configFileName = new
File(configLocation.toURI()).getCanonicalPath();			}		} 		catch (Exception e)		{			throw
new RuntimeException("Couldn't convert log4j configuration location to a valid file.",
e);		}         PropertyConfigurator.configureAndWatch(configFileName, 10000);       
org.apache.log4j.Logger.getLogger(AbstractCassandraDaemon.class).info("Logging
initialized");    }</pre></div></div> 


New Comment: 
Looks like this breaks "configuration parameter is a well-formed url?"  configLocation is
never used if "new URL" succeeds. 


New Comment: 
Yes, that'll teach me to post code late at night <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/sad.png" height="16" width="16"
align="absmiddle" alt="" border="0"/> 


New Comment: 
OK, have edited the code snippet above to hopefully fix the obvious broken-ness! Still
struggling to get Cassandra building properly on Windows/Eclipse so haven't yet been able
to test properly though (need to work through <a
href="http://wiki.apache.org/cassandra/RunningCassandraInEclipse" class="external-link"
rel="nofollow">http://wiki.apache.org/cassandra/RunningCassandraInEclipse</a> again from
scratch as it didn't seem to work first time round...) 


New Comment: 
The above code seems to work for full hierarchical
URIs:-Dlog4j.configuration="file:///C:/conf%20space/log4j-server.properties"and for
classpath locations:-Dlog4j.configuration=log4j-server.properties(on windows, with a space
in the file path)It does not work for opaque URIs such as <a
href="file:log4j-server.properties" class="external-link"
rel="nofollow">file:log4j-server.properties</a> because you can't construct a File
directly from these (you get java.lang.IllegalArgumentException: URI is not hierarchical) 


New Comment: 
OK, third time lucky I hope. The edited version above now tries the original getFile()
approach, then falls back on the new File(url.toURI()) approach if the file doesn't
exist.This seems to work with classpath names, opaque URIs <b>and</b> hierarchical URIs 


New Comment: 
Tries to get URL of log4j configuration as before (as a URL or from the classpath).
Attempts two different methods of converting the URL to a valid File in order to cope with
spaces in file paths on Windows, as well as various flavours of URL (opaque or
hierarchical). 


New Comment: 
looks good to me.  committed, thanks! 


