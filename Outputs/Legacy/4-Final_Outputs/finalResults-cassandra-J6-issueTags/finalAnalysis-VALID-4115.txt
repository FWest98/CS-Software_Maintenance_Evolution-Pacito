Pattern changes caused by commit: ed7f7e8f57e34f33b74e9c6e5179facc619ccbcf

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2

From: Mediator-2
To:   Mediator-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4115.txt 

commit ed7f7e8f57e34f33b74e9c6e5179facc619ccbcf
Author: Jonathan Ellis <jbellis@apache.org>

    fix IntegerType.getString with direct buffers
    patch by Ed Anuff; reviewed by jbellis for CASSANDRA-2684



==================================
 Issue CASSANDRA-2684 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2684] IntergerType uses Thrift method that attempts to unsafely access backing array of ByteBuffer and fails
-----------------

-----------------
Summary: IntergerType uses Thrift method that attempts to unsafely access backing array of ByteBuffer and fails
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sun, 22 May 2011 20:43:39 +0000
-----------------

-----------------
Resolved at: Mon, 23 May 2011 01:34:31 +0000
-----------------

-----------------
Assigned to: Ed Anuff
-----------------

-----------------
Description: 

I get the following exception:
<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>ERROR 13:27:38,153 Fatal
exception in thread Thread[ReadStage:36,5,main]java.lang.RuntimeException:
java.lang.UnsupportedOperationException	at
org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:34)	at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at
java.lang.Thread.run(Thread.java:680)Caused by: java.lang.UnsupportedOperationException	at
java.nio.ByteBuffer.array(ByteBuffer.java:940)	at
org.apache.thrift.TBaseHelper.byteBufferToByteArray(TBaseHelper.java:264)	at
org.apache.thrift.TBaseHelper.byteBufferToByteArray(TBaseHelper.java:251)	at
org.apache.cassandra.db.marshal.IntegerType.getString(IntegerType.java:136)	at
org.apache.cassandra.db.marshal.AbstractCompositeType.getString(AbstractCompositeType.java:131)	at
org.apache.cassandra.db.Column.getString(Column.java:228)	at
org.apache.cassandra.db.filter.SliceQueryFilter.collectReducedColumns(SliceQueryFilter.java:123)	at
org.apache.cassandra.db.filter.QueryFilter.collectCollatedColumns(QueryFilter.java:130)	at
org.apache.cassandra.db.ColumnFamilyStore.getTopLevelColumns(ColumnFamilyStore.java:1303)	at
org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(ColumnFamilyStore.java:1188)	at
org.apache.cassandra.db.ColumnFamilyStore.getColumnFamily(ColumnFamilyStore.java:1145)	at
org.apache.cassandra.db.Table.getRow(Table.java:385)	at
org.apache.cassandra.db.SliceFromReadCommand.getRow(SliceFromReadCommand.java:61)	at
org.apache.cassandra.service.StorageProxy$LocalReadRunnable.runMayThrow(StorageProxy.java:641)	at
org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)	... 3
more</pre></div></div>
Tracing it down, I find that IntegerType's getString method() looks
like this:
<div class="code panel" style="border-style: solid;border-width: 1px;"><div
class="codeHeader panelHeader" style="border-bottom-width: 1px;border-bottom-style:
solid;"><b>IntegerType.java</b></div><div class="codeContent panelContent"><pre
class="code-java">    <span class="code-keyword">public</span> <span
class="code-object">String</span> getString(ByteBuffer bytes)    {        <span
class="code-keyword">if</span> (bytes == <span class="code-keyword">null</span>)          
 <span class="code-keyword">return</span> <span class="code-quote">"<span
class="code-keyword">null</span>"</span>;        <span class="code-keyword">if</span>
(bytes.remaining() == 0)            <span class="code-keyword">return</span> <span
class="code-quote">"empty"</span>;        <span class="code-keyword">return</span> <span
class="code-keyword">new</span>
java.math.BigInteger(TBaseHelper.byteBufferToByteArray(bytes)).toString(10);   
}</pre></div></div> 
TBaseHelper.byteBufferToByteArray() looks like this:
<div class="code
panel" style="border-style: solid;border-width: 1px;"><div class="codeHeader panelHeader"
style="border-bottom-width: 1px;border-bottom-style:
solid;"><b>TBaseHelper.java</b></div><div class="codeContent panelContent"><pre
class="code-java">  <span class="code-keyword">public</span> <span
class="code-keyword">static</span> <span class="code-object">byte</span>[]
byteBufferToByteArray(ByteBuffer byteBuffer) {    <span class="code-keyword">if</span>
(wrapsFullArray(byteBuffer)) {      <span class="code-keyword">return</span>
byteBuffer.array();    }    <span class="code-object">byte</span>[] target = <span
class="code-keyword">new</span> <span
class="code-object">byte</span>[byteBuffer.remaining()];   
byteBufferToByteArray(byteBuffer, target, 0);    <span class="code-keyword">return</span>
target;  }  <span class="code-keyword">public</span> <span
class="code-keyword">static</span> <span class="code-object">boolean</span>
wrapsFullArray(ByteBuffer byteBuffer) {    <span class="code-keyword">return</span>
byteBuffer.hasArray()      &amp;&amp; byteBuffer.position() == 0      &amp;&amp;
byteBuffer.arrayOffset() == 0      &amp;&amp; byteBuffer.remaining() ==
byteBuffer.capacity();  }  <span class="code-keyword">public</span> <span
class="code-keyword">static</span> <span class="code-object">int</span>
byteBufferToByteArray(ByteBuffer byteBuffer, <span class="code-object">byte</span>[]
target, <span class="code-object">int</span> offset) {    <span
class="code-object">int</span> remaining = byteBuffer.remaining();    <span
class="code-object">System</span>.arraycopy(byteBuffer.array(),       
byteBuffer.arrayOffset() + byteBuffer.position(),        target,        offset,       
remaining);    <span class="code-keyword">return</span> remaining;  }</pre></div></div>

The second overloaded implementation of byteBufferToByteArray is calling the bytebuffer's
array() method.

Suggested fixes:

1) Don't use TBaseHelper in IntegerType.getString(),
use ByteBufferUtil.getArray()

2) Report problem upstream to Thrift.

3) Find a better way
to deserialize BigIntegers that doesn't require an array copy.
 

-----------------

-----------------
Comments: 

New Comment: 
committed 


