Pattern changes caused by commit: 5bde2a6d5d6bed3ff15ec6caf20524717a130ecb

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1

From: Template Method-3
To:   Template Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7169.txt 

commit 5bde2a6d5d6bed3ff15ec6caf20524717a130ecb
Author: Brandon Williams <brandonwilliams@apache.org>

    Query the JVM for the minimum stack size.
    Patch by Trevor Robinson, reviewed by brandonwilliams for CASSANDRA-4442



==================================
 Issue CASSANDRA-4442 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4442] Stack size settings in cassandra-env.sh assume 64-bit x86
-----------------

-----------------
Summary: Stack size settings in cassandra-env.sh assume 64-bit x86
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 18 Jul 2012 15:37:25 +0000
-----------------

-----------------
Resolved at: Sat, 10 Aug 2013 21:43:33 +0000
-----------------

-----------------
Assigned to: Trevor Robinson
-----------------

-----------------
Description: 

The fix for <a href="https://issues.apache.org/jira/browse/CASSANDRA-4275" title="Oracle
Java 1.7 u4 does not allow Xss128k" class="issue-link"
data-issue-key="CASSANDRA-4275"><del>CASSANDRA-4275</del></a> hard-codes a 160 KB stack
size when using Java 7 on Linux. This assumes the Oracle 7u4 JVM on 64-bit x86. For
systems like 32-bit ARM, this size is excessive (the minimum for 7u4 on ARM is 60-64 KB).
Also, the minimum allowed value is version-dependent and is calculated dynamically by the
JVM on startup based on Linux parameters that can also change. A better approach would be
to query the JVM for the minimum stack size.
 

-----------------

-----------------
Comments: 

New Comment: 
The attached patch was tested with Oracle 7u4 and OpenJDK 6u24 on amd64, and Oracle 7u4 on
ARMv7. Reported stack sizes of 160k, 104k, and 64k, respectively. Just tested startup on
amd64, but ran 'stress -o insert' on ARM.Note that the patch also fixes an issue with <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4366" title="add UseCondCardMark XX
jvm settings on jdk 1.7" class="issue-link"
data-issue-key="CASSANDRA-4366"><del>CASSANDRA-4366</del></a> (UseCondCardMark) where JDK
1.7 was only detected on Linux. 


New Comment: 
Committed, though I suspect we'd have the same problem on other operating systems running
on ARM.  But we probably won't see those anytime soon. 


New Comment: 
Reverted, as this is causing failures:<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>java.lang.StackOverflowError     
  at java.net.SocketOutputStream.socketWrite0(Native Method)        at
java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:92)        at
java.net.SocketOutputStream.write(SocketOutputStream.java:136)        at
java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)        at
java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)        at
java.io.DataOutputStream.flush(DataOutputStream.java:106)        at
org.apache.cassandra.net.OutboundTcpConnection.writeConnected(OutboundTcpConnection.java:156)
       at
org.apache.cassandra.net.OutboundTcpConnection.run(OutboundTcpConnection.java:126)</pre></div></div> 


New Comment: 
So apparently we don't want the minimum after all. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>What type of system hit the failure? Java
6 on amd64, I'm guessing, since it used to use 128k vs 104k.Should the patch be changed to
add a 25% margin? ((128 - 104) / 104 = ~0.23) This would yield settings of 200k, 130k, and
80k for the systems mentioned in my initial comment. 


New Comment: 
<blockquote>Should the patch be changed to add a 25% margin? </blockquote>I don't think a
fudge factor is something I want in the stack size.  If we have to, I'd prefer explicit
arch detection along with the version and have the decision based on those. 


New Comment: 
<blockquote>What type of system hit the failure? Java 6 on amd64, I'm
guessing</blockquote>Yep. 


New Comment: 
How do you propose to determine the correct stack size for a particular arch/version? Even
with testing and measurement, it seems like it always has to involve some sort of fudge
factor, since the code is non-trivial and ever-changing, and the VM internals are
unknown.Despite the unflattering label, scaling it based on the JVM minimum doesn't seem
unreasonable, since that value hopefully embodies some knowledge from the VM designer
about how the stack is used. Even if you want to maintain a known arch/version table in
the script, there should be some fallback logic for new or untested versions. As 7u4
shows, even a minor version update can significantly change stack usage, so fixed values
should only be used with a strict arch/version match.To look at it another way, we only
have 3 (fuzzy) data points now: 128k seems to be the accepted "correct" value for Java 6
on amd64, 160k is known to be too small for 7u4 on amd64 (<a
href="https://issues.apache.org/jira/browse/CASSANDRA-4457" title="Find the cause for the
need for a larger stack size with jdk 7" class="issue-link"
data-issue-key="CASSANDRA-4457"><del>CASSANDRA-4457</del></a>), and 160k is way too big
for 32-bit/ARM (even in 7u4). The updated patch hits those points (fixing the stack
overflow on 7u4 amd64) and provides a better fallback for other systems than using the
<em>much</em> larger JVM defaults (e.g. 320k for ARM and 1024k for amd64 in 7u4). <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4457" title="Find the cause for the
need for a larger stack size with jdk 7" class="issue-link"
data-issue-key="CASSANDRA-4457"><del>CASSANDRA-4457</del></a> may change things, but it's
a difficult issue with minor priority, so it's hard to imagine it being resolved soon. 


New Comment: 
<blockquote>I suspect we'd have the same problem on other operating systems running on
ARM.</blockquote>Unfortunately, there aren't really any other viable operating systems
right now. Oracle <a
href="http://www.oracle.com/technetwork/java/embedded/downloads/javase/index.html"
class="external-link" rel="nofollow">only supports Linux</a> and OpenJDK has <a
href="http://fullshovel.wordpress.com/2012/07/11/java-vs-c-on-arm/" class="external-link"
rel="nofollow">abysmal performance</a> on ARM. 


New Comment: 
Note that recent 1.6 JVMs need more than the minimum stack size to actually do network
operations; we're using Xss=180, where the minimum is 160. 


New Comment: 
On 1.6 JVM I'm using Xss=192k, with 180k I've seen some errors in log.Can we expect fix in
1.1.6 version instead of 1.1.7? 


New Comment: 
I don't think we have a good way to autodetect this post-installation.  (Starting up a JVM
is just "a way." <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>Don't package managers support applying
changes for different architectures as appropriate?  That seems like the right way to go
here. 


New Comment: 
Wontfixing for lack of follow up. 


