Pattern changes caused by commit: 641b021d3c820c7ef8edd698554a7fc44c6ce9f3

From: Decorator-2
To:   Decorator-1

From: Facade-1
To:   Facade-0

From: Flyweight-2
To:   Flyweight-4

From: Mediator-3
To:   Mediator-2

From: Strategy-0
To:   Strategy-1

From: Template Method-3
To:   Template Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6828.txt 

commit 641b021d3c820c7ef8edd698554a7fc44c6ce9f3
Author: Jonathan Ellis <jbellis@apache.org>

    synchronize LCS getEstimatedTasks to avoid CME
    patch by jbellis; reviewed by slebresne for CASSANDRA-4255



==================================
 Issue CASSANDRA-4255 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4255] concurrent modif ex when repair is run on LCS
-----------------

-----------------
Summary: concurrent modif ex when repair is run on LCS
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 17 May 2012 18:29:34 +0000
-----------------

-----------------
Resolved at: Mon, 21 May 2012 16:52:46 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

came across this, will try to figure a way to systematically reprod this. But the problem
is the sstable list in the manifest is changing as the repair is triggered:
<div
class="panel" style="border-width: 1px;"><div class="panelContent">
Exception in thread
"main" java.util.ConcurrentModificationException <br/> at
java.util.AbstractList$Itr.checkForComodification(Unknown Source)<br/> at
java.util.AbstractList$Itr.next(Unknown Source)<br/> at
org.apache.cassandra.io.sstable.SSTable.getTotalBytes(SSTable.java:250)<br/> at
org.apache.cassandra.db.compaction.LeveledManifest.getEstimatedTasks(LeveledManifest.java:435)<br/>
at
org.apache.cassandra.db.compaction.LeveledCompactionStrategy.getEstimatedRemainingTasks(LeveledCompactionStrategy.java:128)<br/>
at
org.apache.cassandra.db.compaction.CompactionManager.getPendingTasks(CompactionManager.java:1063)<br/>
at sun.reflect.GeneratedMethodAccessor73.invoke(Unknown Source)<br/> at
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)<br/> at
java.lang.reflect.Method.invoke(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.PerInterface.getAttribute(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.MBeanSupport.getAttribute(Unknown Source)<br/> at
com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(Unknown Source)<br/> at
com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(Unknown Source)<br/> at
javax.management.remote.rmi.RMIConnectionImpl.doOperation(Unknown Source)<br/> at
javax.management.remote.rmi.RMIConnectionImpl.access$200(Unknown Source)<br/> at
javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(Unknown Source)<br/>
at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(Unknown
Source)<br/> at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(Unknown
Source)<br/> at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)<br/> at
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)<br/> at
java.lang.reflect.Method.invoke(Unknown Source)<br/> at
sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)<br/> at
sun.rmi.transport.Transport$1.run(Unknown Source)<br/> at
java.security.AccessController.doPrivileged(Native Method)<br/> at
sun.rmi.transport.Transport.serviceCall(Unknown Source)<br/> at
sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)<br/> at
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)<br/> at
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)<br/> at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)<br/> at
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)<br/> at
java.lang.Thread.run(Unknown Source)
</div></div>
maybe we could change the list to a
copyOnArrayList? just a suggestion, haven't investigated much yet:
<div class="code panel"
style="border-width: 1px;"><div class="codeHeader panelHeader" style="border-bottom-width:
1px;"><b>LeveledManifest.java</b></div><div class="codeContent panelContent"><pre
class="code-java">generations[i] = <span class="code-keyword">new</span>
ArrayList&lt;SSTableReader&gt;();</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
patch attached to synchronize getEstimatedTasks.  copyOnWriteArrayList would probably work
too, but we already synchronize other accesses (to prevent cross-level races) so that's
simplest here. 


New Comment: 
Looks like this only affects getEstimatedTasks, not actually repair. 


New Comment: 
+1 


