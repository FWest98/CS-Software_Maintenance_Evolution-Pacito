Pattern changes caused by commit: 21bccc41c66481048e9c1ee8cd29d596724bf77f

From: Decorator-0
To:   Decorator-1

From: Mediator-2
To:   Mediator-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4700.txt 

commit 21bccc41c66481048e9c1ee8cd29d596724bf77f
Author: Jonathan Ellis <jbellis@apache.org>

    move drivers back in-tree until build issues can be fixed.  see CASSANDRA-2761



==================================
 Issue CASSANDRA-2761 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2761] JDBC driver does not build
-----------------

-----------------
Summary: JDBC driver does not build
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 10 Jun 2011 21:36:38 +0000
-----------------

-----------------
Resolved at: Thu, 25 Aug 2011 14:27:55 +0000
-----------------

-----------------
Assigned to: Rick Shaw
-----------------

-----------------
Description: 

Need a way to build (and run tests for) the Java driver.

Also: still some vestigal
references to drivers/ in trunk build.xml.

Should we remove drivers/ from the 0.8 branch
as well?
 

-----------------

-----------------
Comments: 

New Comment: 
Moved from <a href="https://issues.apache.org/jira/browse/CASSANDRA-2754"
title="Consolidating Ticket for JDBC Semantic Improvements" class="issue-link"
data-issue-key="CASSANDRA-2754"><del>CASSANDRA-2754</del></a>.Just a few clarifications as
I am not that familiar with the C* infrastructure and build policies etc...<ul
class="alternate" type="square">	<li>I'm a Maven guy, but I guess that is out of the
question?</li>	<li>This needs to be Jenkins ready?</li>	<li>This should build Source and
Javadocs artifacts ready for Maven Repo deployment right?</li>	<li>The resulting JDBC jar
file would contain the C* dependancies from the build directory pointed to by the
properties file/system property? It would be self contained?</li>	<li>The testing part of
the build is going to have to reach into the C* build area too I think?</li></ul> 


New Comment: 
<blockquote>I'm a Maven guy, but I guess that is out of the question?</blockquote>I don't
know, but if I were a Maven Guy (I am not), I would use Ant anyway.  The vast majority of
the active committers wish that Maven would die in a fire, so using it would be the
fastest way to engender apathy. <blockquote>This needs to be Jenkins
ready?</blockquote>Not sure what this means.<blockquote>This should build Source and
Javadocs artifacts ready for Maven Repo deployment right?</blockquote>Yes.<blockquote>The
resulting JDBC jar file would contain the C* dependancies from the build directory pointed
to by the properties file/system property? It would be self
contained?</blockquote>Yes.<blockquote>The testing part of the build is going to have to
reach into the C* build area too I think?</blockquote>The classpath for tests will
probably contain a few additional items that the runtime classpath does not. 


New Comment: 
OK, Patch for an ANT Build for the JDBC Driver suite is attached. It builds all the
artifacts, but at the moment it does NOT include any other classes but the ones in the
o.a.c.cql.jdbc package.I will update when a few more clarifications of exactly what
dependancies we want to declare for the driver and what we want to include in the jar.I
think I got the Eclipse stuff in ther as well, but that could probably use some wringing
out.. I was able to successfully run the junit tests from Eclipse. 


New Comment: 
Thanks Rick, this is a good start, and a lot better than having no build at all, so I went
ahead and committed it.I made a fewer minor changes (mostly replacing tabs for spaces), so
you'll need to rebase against svn before continuing.<blockquote>I will update when a few
more clarifications of exactly what dependancies we want to declare for the driver and
what we want to include in the jar.</blockquote>There is probably some handy tool for
this, but I don't know what it is.  Just looking at it I'd say you need to
copy-in:<ul>	<li><tt>o.a.c.db.marshall.*</tt></li>	<li><tt>o.a.c.utils.ByteBufferUtil</tt></li>	<li><tt>o.a.c.config.ColumnDefinition</tt></li>	<li><tt>o.a.c.config.CFMetaData</tt></li>	<li><tt>o.a.c.config.ConfigurationException</tt></li></ul>There
might be some transitive dependencies though. 


New Comment: 
Thanks Eric. Actually you list is the same as mine so we are probably close. Note you will
still need the whole C*-Thrift jar. I will build a new driver with the additional classes
and test it without depending on the full C*. I'll document the full dependancy list here
along with the next patch. 


New Comment: 
<blockquote>Note you will still need the whole C*-Thrift jar.</blockquote>Yeah, but don't
copy those.  The driver jar will need to depend on the thrift jar. 


New Comment: 
The v2 patch adds inclusion of classes that are required on the client side from the main
C* build. 


New Comment: 
I put together a patch that covered the obvious but I had strange problems in test. So I
dug deeper and found a ton (over 50 I think) additional transitive dependencies that I had
missed... (silly me) I can try an get them all in but I think we should seriously rethink
that strategy for now. With this many dependancies they should probably be put in their
own jar(s). It would really make the driver jar have to keep up with detailed dependency
changes in the server code base. Miss one and it's messy and the errors are non-obvious.I
was a big whiner about not carrying around the whole server just for client access, but
until it is re-factored, I can now appreciate the horror that will commence if we
piece-meal drag over classes from the server into the JAR.So fo now I suggest we keep the
jar the way it is with just the o.a.c.cql.jdbc.* classes. 


New Comment: 
<blockquote>I can try an get them all in but I think we should seriously rethink that
strategy for now. With this many dependancies they should probably be put in their own
jar(s). It would really make the driver jar have to keep up with detailed dependency
changes in the server code base. Miss one and it's messy and the errors are
non-obvious.</blockquote>What would you call such a jar?  When I looked at this, there
didn't seem to be any delineation that made sense.<blockquote>I was a big whiner about not
carrying around the whole server just for client access, but until it is re-factored, I
can now appreciate the horror that will commence if we piece-meal drag over classes from
the server into the JAR.</blockquote>What are these 50 other class dependencies?  Where
are they being drug in? 


New Comment: 
<blockquote>What are these 50 other class dependencies? Where are they being drug
in?</blockquote><ul class="alternate" type="square">	<li>o.a.c.db.marshall.*	<ul
class="alternate" type="square">		<li>23 various
classes</li>	</ul>	</li>	<li>o.a.c.utils.ByteBufferUtil	<ul class="alternate"
type="square">		<li>org.apache.cassandra.io.util.FileDataInput</li>		<li>org.apache.cassandra.io.util.FileUtils</li>	</ul>	</li>	<li>o.a.c.config.ColumnDefinition</li>	<li>o.a.c.config.CFMetaData	<ul
class="alternate"
type="square">		<li>org.apache.cassandra.cache.IRowCacheProvider;</li>		<li>org.apache.cassandra.db.migration.avro.ColumnDef</li>		<li>org.apache.cassandra.db.ColumnFamilyType;		<ul
class="alternate"
type="square">			<li>org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor</li>			<li>org.apache.cassandra.config.DatabaseDescriptor			<ul
class="alternate"
type="square">				<li>org.apache.cassandra.auth.AllowAllAuthenticator</li>				<li>org.apache.cassandra.auth.AllowAllAuthority</li>				<li>org.apache.cassandra.auth.IAuthenticator</li>				<li>org.apache.cassandra.auth.IAuthority</li>				<li>org.apache.cassandra.config.Config.RequestSchedulerId</li>				<li>org.apache.cassandra.db.ColumnFamilyStore				<ul
class="alternate" type="square">					<li>13 new
items</li>				</ul>				</li>				<li>org.apache.cassandra.db.ColumnFamilyType</li>				<li>org.apache.cassandra.db.DefsTable				<ul
class="alternate"
type="square">					<li>org.apache.cassandra.config.DatabaseDescriptor;</li>					<li>org.apache.cassandra.config.KSMetaData;</li>					<li>org.apache.cassandra.db.filter.QueryFilter;</li>					<li>org.apache.cassandra.db.filter.QueryPath;</li>					<li>org.apache.cassandra.db.migration.Migration;</li>					<li>org.apache.cassandra.io.SerDeUtils;</li>					<li>org.apache.cassandra.service.StorageService;</li>					<li>org.apache.cassandra.utils.ByteBufferUtil;</li>					<li>org.apache.cassandra.utils.UUIDGen;</li>				</ul>				</li>				<li>org.apache.cassandra.db.migration.Migration</li>				<li>org.apache.cassandra.dht.IPartitioner</li>				<li>org.apache.cassandra.io.sstable.Descriptor</li>				<li>org.apache.cassandra.io.util.FileUtils</li>				<li>org.apache.cassandra.locator.*</li>				<li>org.apache.cassandra.scheduler.IRequestSchedule;</li>				<li>org.apache.cassandra.scheduler.NoScheduler</li>			</ul>			</li>			<li>org.apache.cassandra.db.compaction.CompactionManager</li>			<li>org.apache.cassandra.db.filter.QueryFilter</li>			<li>org.apache.cassandra.db.filter.QueryPath</li>			<li>org.apache.cassandra.dht.IPartitioner</li>			<li>org.apache.cassandra.dht.Range</li>			<li>org.apache.cassandra.gms.FailureDetector</li>			<li>org.apache.cassandra.gms.Gossiper</li>			<li>org.apache.cassandra.gms.ApplicationState</li>			<li>org.apache.cassandra.net.MessagingService			<ul
class="alternate" type="square">				<li>10 new
classes</li>			</ul>			</li>			<li>org.apache.cassandra.service.*</li>			<li>org.apache.cassandra.utils.WrappedRunnable</li>		</ul>		</li>		<li>org.apache.cassandra.db.HintedHandOffManager;</li>		<li>org.apache.cassandra.db.SystemTable;</li>		<li>org.apache.cassandra.db.Table;</li>		<li>org.apache.cassandra.db.ColumnFamilyStore;</li>		<li>org.apache.cassandra.db.migration.Migration;</li>		<li>org.apache.cassandra.db.compaction.AbstractCompactionStrategy;</li>		<li>org.apache.cassandra.io.SerDeUtils;</li>		<li>org.apache.cassandra.utils.Pair;</li>	</ul>	</li>	<li>o.a.c.config.ConfigurationException</li></ul>The
point is there are lots and they are scattered all over the various packages; It will be
very difficult to manage when they change from the driver package (client side), which is
supposed to be able to change independent of the server code. If a subset of the server
code is to be a dependency then that subset (jar/s) must be managed in the main build not
the driver build. <blockquote>What would you call such a jar? When I looked at this, there
didn't seem to be any delineation that made sense.</blockquote>I agree it is not any clear
set of packages. They are scattered all over.As to a name for the jar... I'm not a good
namer in the best of circumstances but I think the intent is to pick those files that are
used in common between client and server. I guess I'd use that as the basis for the name. 


New Comment: 
<blockquote>The point is there are lots and they are scattered all over the various
packages; It will be very difficult to manage when they change from the driver package
(client side), which is supposed to be able to change independent of the server code. If a
subset of the server code is to be a dependency then that subset (jar/s) must be managed
in the main build not the driver build.</blockquote>Right, I was curious to see the list
of classes (that list is fantastic btw, thanks for that), to see if there was one point in
the graph where breaking a dependency would drastically change the scope of the problem. 
It looks like the answer is Yes, and the dependency is <tt>o.a.c.config.CFMetaData</tt>,
(needed by <tt>ColumnDecoder</tt>).Just skimming through the code, I don't think it would
be hard to either re-implement the needed parts of CFMetaData, or refactor CFMetaData to
limit what it pulled in. 


New Comment: 
What's the status here?  Not having "ant test" for the drivers anymore is causing me pain
and suffering. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/sad.png" height="16" width="16"
align="absmiddle" alt="" border="0"/> 


New Comment: 
Sorry. I didn't catch that there was no ant task to RUN them... <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> <tt>build-test</tt> builds the included
tests just fine. And I have been running them from Eclipse once built. I'll look into it. 


New Comment: 
Attached (v1-0001-<a href="https://issues.apache.org/jira/browse/CASSANDRA-2761"
title="JDBC driver does not build" class="issue-link"
data-issue-key="CASSANDRA-2761"><del>CASSANDRA-2761</del></a>-cleanup-nits.txt) is a patch
to do a little cleanup (clearer variable naming, some simplification of classpaths, etc),
basically stuff that set my OCD off and seemed better to get in <b>before</b> diving into
test running and dependency management. 


New Comment: 
To summarize, it is now possible to build and test w/ ant.  This is currently done by
pointing to a local (built) working copy of Cassandra (a site config).  What's left, and
seems reasonable to scope with this issue:<ul>	<li>Create an alternate mechanism for
specifying the version of Cassandra to build/test against (in order to run the tests
against prior releases).  I'm thinking Ivy could be used here to automatically download
artifacts when a property is passed (-Dcassandra.release=0.8.0 for
example).</li>	<li>(Re)build Cassandra as needed from the drivers Ant build, or at the
very least, handle the case when a build is needed.</li>	<li>Fix the
<tt>generate-eclipse-files</tt> target if possible, or remove it otherwise.</li></ul>Work
should also continue to reduce the cross-section of Cassandra that this driver depends on,
but I'll open another issue for that. 


New Comment: 
+1 cleanup patch 


New Comment: 
+1 for the cleanup patchThe <tt>generate-eclipse-files</tt> seems to be working for me?
How does it fail? 


New Comment: 
Note that <a href="https://issues.apache.org/jira/browse/CASSANDRA-3010" title="Java CQL
command-line shell" class="issue-link"
data-issue-key="CASSANDRA-3010"><del>CASSANDRA-3010</del></a> makes moving drivers
out-of-"tree" even sillier: as things stand, we'll need to grab cassandra from the maven
repo to build jdbc, then back in tree we'll need to grab jdbc from the maven repo to build
the cql shell.I'm all for purity but at this point I'm ready to just put things back the
way they were* so we can spend time before the 1.0 freeze building things instead of
wrestling with maven. 


New Comment: 
The lib/ directory is full of dependency jars, some which exist solely for the cli. 


New Comment: 
<blockquote>I'm all for purity but at this point I'm ready to just put things back the way
they were* so we can spend time before the 1.0 freeze building things instead of wrestling
with maven.</blockquote>I for one would be delighted if I didn't have to use svn to get at
the drivers or cqlsh. 


New Comment: 
<blockquote>The lib/ directory is full of dependency jars, some which exist solely for the
cli.</blockquote>But we are updating none of those on a daily or weekly basis. 


New Comment: 
<blockquote>But we are updating none of those on a daily or weekly basis</blockquote>I
certainly hope we're not updating the JDBC driver that often, particularly in ways that
would impact a simple application like a shell.Our experience using the JDBC driver as an
application dependency shouldn't be any better or worse than it would be for other users. 


New Comment: 
<blockquote>I certainly hope we're not updating the JDBC driver that
often</blockquote>Then you're not very familiar with the current stability or lack there
of of the JDBC driver. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
<blockquote>Then you're not very familiar with the current stability or lack there of of
the JDBC driver. </blockquote>No, I guess not, but it can't be any worse on us than for
anyone else using it.  A solution that only benefits us doesn't seem very... friendly.<hr
/>I think the difference in opinion here comes from what determines whether the server and
driver should be considered different projects.  I can see where people who feel a high
degree of ownership over the code of both, and who by virtue of infrastructure have write
access to both, might consider it contrived to treat them as separate projects.  I'm not
discounting that point of view, but I do think that's more Social than Technical, and is
limited to a relatively small group of Cassandra hackers.As I've said elsewhere, I think
it is very important that these drivers be allowed to evolve on their own release schedule
with their own versioning that reflects compatibility with a CQL version and not any
particular Cassandra version(s).  It's also quite likely, particularly where the driver
language != Java that the group of developers is entirely different from those working on
the server.  And there is no hard dependency between drivers and Cassandra in either
direction (the JDBC-&gt;Cassandra dependency is one of convenience).  To me, this pretty
solidly points to them being separate projects.Keeping them separate won't be as
convenient as treating them as one monolithic project, but it's no worse an experience
than what other application developers are subjected to.  We should be able to eat our own
dog food.I also realize that there is more work needed here to decouple the JDBC driver
and make this all work better, work that I've volunteered to do.  I haven't had as much
time to spend on this lately, but that should be changing RSN. 


New Comment: 
Is their someway to get a git repo for just drivers? like cassandra.git but
cassandra-drivers.git? This is causing major pain. 


New Comment: 
<blockquote>I also realize that there is more work needed here to decouple the JDBC driver
and make this all work better, work that I've volunteered to do. I haven't had as much
time to spend on this lately, but that should be changing RSN.</blockquote>It's been
another two weeks and we're still in this no-man's land where git can't see drivers, the
jdbc build is a big TODO, and anything that depends on jdbc like 3010 is basically
SOL.Again, I'm not against purity, but it's clear that the original breaking out of
drivers/ was done prematurely (was there even a Jira ticket with a patch? It looks like we
went from "that's a good idea" on -dev to ripping apart svn).  I've reverted things until
the breakout can be done properly. 


New Comment: 
Integrated in Cassandra #1045 (See <a href="https://builds.apache.org/job/Cassandra/1045/"
class="external-link"
rel="nofollow">https://builds.apache.org/job/Cassandra/1045/</a>)<br/>    move drivers
back in-tree until build issues can be fixed.  see <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2761" title="JDBC driver does not
build" class="issue-link"
data-issue-key="CASSANDRA-2761"><del>CASSANDRA-2761</del></a>jbellis : <a
href="http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1161216"
class="external-link"
rel="nofollow">http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1161216</a><br/>Files
:
<ul>	<li>/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java</li>	<li>/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java</li>	<li>/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java</li>	<li>/cassandra/trunk/build.xml</li>	<li>/cassandra/trunk/contrib</li>	<li>/cassandra/trunk/drivers/java/README.txt</li>	<li>/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java</li>	<li>/cassandra/trunk/drivers</li>	<li>/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java</li>	<li>/cassandra/trunk</li>	<li>/cassandra/trunk/drivers/java/build.properties.default</li>	<li>/cassandra/trunk/drivers/java/build.xml</li></ul> 


New Comment: 
I don't see any driver code in the move? The <tt>/driver</tt> sub-directory now exists but
there is nothing underneath? 


New Comment: 
<a href="https://svn.apache.org/repos/asf/cassandra/trunk/drivers/" class="external-link"
rel="nofollow">https://svn.apache.org/repos/asf/cassandra/trunk/drivers/</a> 


New Comment: 
<blockquote>It's been another two weeks and we're still in this no-man's land where git
can't see drivers</blockquote>So does this mean you've decided Git is hard a requirement? 
Our project is (unfortunately )managed in SVN.  You know if it were up to me we'd be using
Git for source control, but it's not up to me and we don't.<blockquote>...anything that
depends on jdbc like 3010 is basically SOL.</blockquote>As I've already mentioned,
CASSANDAR-3010 is for a JDBC using <em>application</em>.  If it's SOL unless the driver is
embedded in the tree, then so is every other application that would make use of the
driver.  If the driver is so bad, maybe no one should be using it.  Why are we giving
ourselves special treatment?<blockquote>Again, I'm not against purity...</blockquote>By
saying "purity" it sounds like you're dismissing it as something that's based on
aesthetics.  I assure that's not the case, it's about avoiding the inevitable lock-step
relationship release-wise. <blockquote>...but it's clear that the original breaking out of
drivers/ was done prematurely (was there even a Jira ticket with a
patch?</blockquote>There was a Jira yes, though I'm pretty sure it done as part of larger
set of tasks, something with a description other than "relocate drivers out of tree". 
And, I don't think it was in a patch, no, due to the fact that a large move with some
minor changes was (a) straightforward, and (b) would have needed rebasing several times a
day.<blockquote>It looks like we went from "that's a good idea" on -dev to ripping apart
svn). I've reverted things until the breakout can be done properly.</blockquote>So all I
need to do is find a ticket and a +1 and I can -1 this, and revert your revert? 


New Comment: 
<blockquote>Our project is (unfortunately )managed in SVN</blockquote>putting a
sub-project in a svn root isn't the way to do it for SVN.Another issue is the drivers
build depends on cassandra.  That makes this even more strange. Can't drivers live in
/trunk and still have it's own releases? 


New Comment: 
<blockquote>There was a Jira yes</blockquote>I couldn't find one, and the svn commit
messages didn't mention it.  I still can't find one.<blockquote>So all I need to do is
find a ticket and a +1 and I can -1 this, and revert your revert?</blockquote>The point of
making a ticket with a patch (or a shell script if you're throwing svn refactoring around
&#8211; you can do mv's from a working copy, not just on the repository, btw) is that
people can review it and see if the result matches what they thought they were going to
get out of it.  In this case it's clear that it didn't, and we ended up with making things
worse in exchange for a promise to clean it up eventually.(Of course, even with proper
review, sometimes we've needed to revert things after unexpected problems arose.  But
skipping the review makes that more likely.)It's been <b>over two months.</b>  So let's
reboot, and do it right.  Note that this time around I got everything in one commit (well,
one for trunk, and one for drivers) so "reverting the revert" will be easy. 


New Comment: 
<blockquote>putting a sub-project in a svn root isn't the way to do it for
SVN.</blockquote>What is?<blockquote>Another issue is the drivers build depends on
cassandra. That makes this even more strange. Can't drivers live in /trunk and still have
it's own releases?</blockquote>We had it that way originally.  It made releasing a pain,
and left people with the expectation that the driver version to use was the one that
corresponded to source it was with (which is unavoidable). 


New Comment: 
<blockquote>Can't drivers live in /trunk and still have it's own
releases?</blockquote>Right, that seems like the best interim solution to me.  (I thought
we could even delete it from old branches to make it clear that it's not in lockstep with
the rest of the tree, but Eric pointed out that if something like 3010 is depending on it,
we can't do that.  Still, having it present but "frozen" in the branches feels like a
relatively minor downside.) 


New Comment: 
How do we reboot and do it right?  Your requirements as I understand them are structured
in such a way that keeping them in-tree is the only solution. 


New Comment: 
<blockquote>left people with the expectation that the driver version to use was the one
that corresponded to source it was with</blockquote>I suspect this was when svn was
effectively the only way to get a driver.  My experience is that even most people building
"from source" use a tarball, not svn.  So the combination of making drivers available on
maven, PyPI, etc., with their own version numbers, should address this. 


New Comment: 
<blockquote>Right, that seems like the best interim solution to me. (I thought we could
even delete it from old branches to make it clear that it's not in lockstep with the rest
of the tree, but Eric pointed out that if something like 3010 is depending on it, we can't
do that. Still, having it present but "frozen" in the branches feels like a relatively
minor downside.)</blockquote>Except that people's expectation will always be that the
version they need is the one that came with their software (which will likely be something
pre-release).  It is completely unrealistic to expect folks to just Know Better here. 


New Comment: 
<blockquote>people's expectation will always be that the version they need is the one that
came with their software</blockquote>I don't understand.  What version will "come with
their <span class="error">&#91;server&#93;</span>?"Consider postgresql: the server is
distributed on postgresql.org, and psycopg is distributed over PyPI.  Nobody gets confused
about staying on an obsolete version of psycopg.That's the model I see us moving towards. 
(As you know, we recently got the Python cql driver on PyPI.) 


New Comment: 
One final thought: by coincidence, we broke the JDBC build again today with <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3039" title="AssertionError on
nodetool cleanup" class="issue-link"
data-issue-key="CASSANDRA-3039"><del>CASSANDRA-3039</del></a>.  This isn't the first time
this has happened.  It's a minor win but not negligible to catch those before commit
because "ant test" runs both suites. 


New Comment: 
<blockquote>I don't understand. What version will "come with their <span
class="error">&#91;server&#93;</span>?"</blockquote>Wherever we publish the source, be it
an SVN checkout with an SVN revision ID, a date-based development snapshot, or a full-on
release artifact, if there is driver source contained within then people are going to be
encouraged to think of those drivers as being the same version as the node (e.g. 0.8.9). 
They're also going to be encouraged to think that those drivers are the best choice to use
with the corresponding node.  It's futile to think they won't, and having other vectors
(www.a.o, PyPI, etc), will only add to the confusion. <blockquote>Consider postgresql: the
server is distributed on postgresql.org, and psycopg is distributed over PyPI. Nobody gets
confused about staying on an obsolete version of psycopg.That's the model I see us moving
towards. (As you know, we recently got the Python cql driver on PyPI.)</blockquote>You
make an excellent point.  Pyscopg is maintained in a completely different repository
(git://luna.dndg.it/public/psycopg2.git) than Postgesql
(git://git.postgresql.org/git/postgresql.git) and is released (and published) separately,
(which is in fact consistent with best practice elsewhere). 


New Comment: 
<blockquote>One final thought: by coincidence, we broke the JDBC build again today with <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3039" title="AssertionError on
nodetool cleanup" class="issue-link"
data-issue-key="CASSANDRA-3039"><del>CASSANDRA-3039</del></a>. This isn't the first time
this has happened. It's a minor win but not negligible to catch those before commit
because "ant test" runs both suites.</blockquote>Broke why?  Because of Cassandra code
that the driver depends on?  That would be an argument in favor of stabalizing the
dependent code.And, the inverse of this is that the drivers should ultimately be getting
tested against trunk, each active branch, and all past released versions (limited of
course to CQL availability).  That is only going to be practical through CI, and is made
harder by your monolithic approach. 


New Comment: 
<blockquote>if there is driver source contained</blockquote>Almost all non-developers get
the source from a release tarball, not svn.  Do we publish drivers/ in the source
tarballs?  If so that's easy enough to fix.Anyone actually using svn I'm willing to
educate.  You can give them my email. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/><blockquote>Pyscopg is maintained in a
completely different repository</blockquote>But as far as users are concerned that is
irrelevant.If you want examples of drivers in the same tree that are also not causing
confusion, I can point you to <a href="https://github.com/mongodb/mongo"
class="external-link" rel="nofollow">https://github.com/mongodb/mongo</a> and <a
href="https://github.com/mongodb/mongo/tree/master/client" class="external-link"
rel="nofollow">https://github.com/mongodb/mongo/tree/master/client</a>.  Also <a
href="http://hg.basho.com/riak/src/5ffa6ae7e699" class="external-link"
rel="nofollow">http://hg.basho.com/riak/src/5ffa6ae7e699</a> (<a
href="http://hg.basho.com/riak/src/5ffa6ae7e699/client_lib/" class="external-link"
rel="nofollow">http://hg.basho.com/riak/src/5ffa6ae7e699/client_lib/</a>) and <a
href="https://github.com/voldemort/voldemort" class="external-link"
rel="nofollow">https://github.com/voldemort/voldemort</a> (<a
href="https://github.com/voldemort/voldemort/tree/master/clients" class="external-link"
rel="nofollow">https://github.com/voldemort/voldemort/tree/master/clients</a>). 


New Comment: 
So to summarize: You've decided.I know that sounds a bit snarky, but you summarily
reverted the change, in part based on reasoning that wasn't true (it doesn't build), and
in part pending a "reboot" to meet unmeetable requirements. 


New Comment: 
If waiting for two months of "we'll fix it real soon now" is "summarily," then yeah, I
guess guilty as charged.But it looks like you've restarted discussion on -dev, so I'll
move there. 


