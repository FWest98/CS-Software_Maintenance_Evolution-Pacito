Pattern changes caused by commit: 95fb613bf996c715392f9aa1f491609b6acaeff5

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7711.txt 

commit 95fb613bf996c715392f9aa1f491609b6acaeff5
Author: Yuki Morishita <yukim@apache.org>

    fix potential infinite loop in get_count; patch by yukim reviewed by Tyler Hobbs for CASSANDRA-4833



==================================
 Issue CASSANDRA-4833 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4833] get_count with 'count' param between 1024 and ~actual column count fails
-----------------

-----------------
Summary: get_count with 'count' param between 1024 and ~actual column count fails
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 18 Oct 2012 16:56:28 +0000
-----------------

-----------------
Resolved at: Mon, 22 Oct 2012 18:56:00 +0000
-----------------

-----------------
Assigned to: Yuki Morishita
-----------------

-----------------
Description: 

If you run get_count() with the 'count' param of the SliceRange set to a number between
1024 and (approximately) the actual number of columns in the row, something seems to
silently fail internally, resulting in a client side timeout.  Using a 'count' param
outside of this range (lower or much higher) works just fine.

This seems to affect all of
1.1 and 1.2.0-beta1, but not 1.0.
 

-----------------

-----------------
Comments: 

New Comment: 
Attached script reproduces the issue with pycassa. 


New Comment: 
get_count runs into infinite loop when requesting with count param around a multiple of
page size(1024).<br/>Patch attached with unit test. 


New Comment: 
I tested out the patch, and although the infinite loop isn't hit, the resulting count
numbers are off.  For example, the repro script has 3050 columns, and when run produces
these counts (manually edited for clarity):<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>specified
count=1024: 1024 expected, got 1024specified count=2^31: 3050 expected, got 2047specified
count=4000: 3050 expected, got 2047specified count=3051: 3050 expected, got 2047specified
count=1025: 1025 expected, got 1024</pre></div></div> 


New Comment: 
You are right.<br/>New version attached. I also modified test to match yours.get_count
pages when requesting count more than page size (determined by average column size but max
at 1024). Paging starts with the last column of previously fetched page, so newly fetched
page may contains one overlapped column.<br/>When page size is 1024, and we have more than
1024 columns in a row, counting with limit of 1025 columns always fails because we fetch 1
(1025 - 1024 page size) column on 2nd page and it contains only already fetched column.
Same thing can happen around the actual number of columns in a row.Attached patch modified
so that paging will fetch at least two columns. 


New Comment: 
The latest patch fixes the issue and passes all of the pycassa tests.One comment on this
conditional:<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">    <span class="code-keyword">if</span>
(requestedCount == 0 || columns.size() &lt; predicate.slice_range.count)        <span
class="code-keyword">break</span>;</pre></div></div>Since you're no longer decrementing
requestedCount, the first half of the disjunction isn't needed.  If the user actually set
a requestedCount of 0, the first column slice would be empty, so we wouldn't get this
far.Other than that, I'm +1 on the changes 


New Comment: 
Thanks for review, Tyler.What we want here is to fetch last page with remainder, not whole
page size. So we still need requestedCount -= newColumns.Attaching v2 for this. 


New Comment: 
The patch needs to be rebased, but I'm +1 on the code changes 


New Comment: 
Committed, thanks! 


