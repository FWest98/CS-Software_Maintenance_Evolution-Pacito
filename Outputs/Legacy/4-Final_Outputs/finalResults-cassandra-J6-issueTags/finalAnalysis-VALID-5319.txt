Pattern changes caused by commit: 16e1875d7d074f1f95cb776c6ad40aea168ded1c

From: Facade-1
To:   Facade-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5319.txt 

commit 16e1875d7d074f1f95cb776c6ad40aea168ded1c
Author: Jonathan Ellis <jbellis@apache.org>

    ignore 0.8 hints even if compaction begins before we try to purge them
    patch by jbellis; reviewed by brandonwilliams for CASSANDRA-3385



==================================
 Issue CASSANDRA-3385 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3385] NPE in hinted handoff
-----------------

-----------------
Summary: NPE in hinted handoff
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 19 Oct 2011 17:44:53 +0000
-----------------

-----------------
Resolved at: Thu, 27 Oct 2011 16:43:20 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

I'm using the current HEAD of 1.0.0 github branch, and I'm still seeing this error, not
sure if it's  this bug or another one.

 INFO <span
class="error">&#91;HintedHandoff:1&#93;</span> 2011-10-19 12:43:17,674
HintedHandOffManager.java (line 263) Started hinted handoff for token:
11342745564<br/>0312821154458202477256070484 with IP: /10.39.85.140<br/>ERROR <span
class="error">&#91;HintedHandoff:1&#93;</span> 2011-10-19 12:43:17,885
AbstractCassandraDaemon.java (line 133) Fatal exception in thread
Thread[HintedHan<br/>doff:1,1,main]<br/>java.lang.RuntimeException:
java.lang.NullPointerException<br/>        at
org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:34)<br/>        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br/>  
     at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<br/>      
 at java.lang.Thread.run(Thread.java:662)<br/>Caused by:
java.lang.NullPointerException<br/>        at
org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:289)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager.access$100(HintedHandOffManager.java:81)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager$2.runMayThrow(HintedHandOffManager.java:337)<br/>
       at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)<br/>    
   ... 3 more<br/>ERROR <span class="error">&#91;HintedHandoff:1&#93;</span> 2011-10-19
12:43:17,886 AbstractCassandraDaemon.java (line 133) Fatal exception in thread Thread<span
class="error">&#91;HintedHandoff:1,1,main&#93;</span><br/>java.lang.RuntimeException:
java.lang.NullPointerException<br/>        at
org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:34)<br/>        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br/>  
     at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<br/>      
 at java.lang.Thread.run(Thread.java:662)<br/>Caused by:
java.lang.NullPointerException<br/>        at
org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:289)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager.access$100(HintedHandOffManager.java:81)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager$2.runMayThrow(HintedHandOffManager.java:337)<br/>
       at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)<br/>    
   ... 3 more

this could possibly be related to #3291
 

-----------------

-----------------
Comments: 

New Comment: 
enabled assertion INFO <span class="error">&#91;HintedHandoff:1&#93;</span> 2011-10-19
13:44:08,346 HintedHandOffManager.java (line 263) Started hinted handoff for token: 0 with
IP: <br/>/10.196.37.187<br/>ERROR <span class="error">&#91;HintedHandoff:1&#93;</span>
2011-10-19 13:44:08,513 AbstractCassandraDaemon.java (line 133) Fatal exception in thread
Thread[HintedHan<br/>doff:1,1,main]<br/>java.lang.AssertionError<br/>        at
org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:285)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager.access$100(HintedHandOffManager.java:81)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager$2.runMayThrow(HintedHandOffManager.java:337)<br/>
       at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)<br/>    
   at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br/>  
     at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<br/>      
 at java.lang.Thread.run(Thread.java:662)line 285 is:<br/>                assert
versionColumn != null;<br/>well the other following fields could also be null too,<br/>   
            assert versionColumn != null;<br/>                assert tableColumn !=
null;<br/>                assert keyColumn != null;<br/>                assert
mutationColumn != null; 


New Comment: 
I just found that this contributes to another symptom I'm seeing: for RF=3, and a ring of
3 nodes, if I bring down 1 box, the remaining 2 still work fine for Quorum access, but the
latency is 20x high.I can see from debugging that a lot of time is spent on storing hints
into local system table on the coordinator. but this Table.apply is slow because a lot of
time is spent on the lock, while it really should not happen since the lock is sharded
into 4096 ones. it turns out that all the keys used in the hints writing are the same key,
at least in the examples I looked at in the debugger, if I'm correct in this observation,
this is a serious bug 


New Comment: 
I see, the key in hinted table is the ID of the dead box. given that this leads to lock
contention, would it be better to change the storage layout of hints? ---- I have never
tried hinted handoff before, not sure if lock contention was a problem before 


New Comment: 
So either new-style hints are being written without versionColumn by RowMutation.hintFor,
or old style hints did not get cleaned out properly by SystemTable.purgeIncompatibleHints.
 But both of those look fine to me. 


New Comment: 
the hints code was from:<a
href="https://github.com/apache/cassandra/commit/3893f24098c3d82dc31571f0b6841e2d5821ea74#diff-12"
class="external-link"
rel="nofollow">https://github.com/apache/cassandra/commit/3893f24098c3d82dc31571f0b6841e2d5821ea74#diff-12</a>#<a
href="https://issues.apache.org/jira/browse/CASSANDRA-2034" title="Make Read Repair
unnecessary when Hinted Handoff is enabled" class="issue-link"
data-issue-key="CASSANDRA-2034"><del>CASSANDRA-2034</del></a>maybe it should be better to
NOT let the writer wait for hints to finish? right now the local hints write make the
entire write slower in probably 2 ways : 1) the main write has to wait for hint write to
finish, which is slow due to lock 2) hints writes are slow, which create a lot of jobs on
MUTATION stage, so even if main write does not wait for them, the MUTATION stage could
possibly be bogged down with hints writes, and not able to handle normal writes fast
enough 


New Comment: 
IMO the right fix to the lock contention is to simply not synchronize when there are no
indexes present.  But that's unrelated to the assertion failure here. 


New Comment: 
that works for me too. but I guess you will finally have to handle cases where indexes are
needed. in those cases, probably we need to change the hints format away from using IP as
key 


New Comment: 
If you're not going to use IPs as keys how are you going to replay hints efficiently?  You
need to consider the read path as well as the write when modeling something. <img
class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.png"
height="16" width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
Created <a href="https://issues.apache.org/jira/browse/CASSANDRA-3386" title="Avoid lock
contention in hint rows" class="issue-link"
data-issue-key="CASSANDRA-3386"><del>CASSANDRA-3386</del></a> for the contention problem. 


New Comment: 
I am using the RPM provided by datastax, I upgraded from 0.8.7 to 1.0.0, then performed a
scrub and repair on each node as described in the documentation.<br/>This worked fine for
all nodes except one, which now throws exceptions whenever I start it up, and goes "Down"
occassionly.  All other nodes have been fine.This is from the log, I think it could be
related, but I'm not sure:INFO <span class="error">&#91;HintedHandoff:4&#93;</span>
2011-10-25 15:30:08,867 HintedHandOffManager.java (line 263) Started hinted handoff for
token: 0 with IP: /xx.xx.xx.xx<br/> INFO <span
class="error">&#91;HintedHandoff:4&#93;</span> 2011-10-25 15:30:08,868
HintedHandOffManager.java (line 318) Finished hinted handoff of 0 rows to endpoint
/xx.xx.xx.xx<br/> INFO <span class="error">&#91;HintedHandoff:4&#93;</span> 2011-10-25
15:30:09,998 HintedHandOffManager.java (line 263) Started hinted handoff for token:
148873535527910577765226390751398592512 with IP: /xx.xx.xx.xx<br/>ERROR <span
class="error">&#91;HintedHandoff:4&#93;</span> 2011-10-25 15:30:09,999
AbstractCassandraDaemon.java (line 133) Fatal exception in thread Thread<span
class="error">&#91;HintedHandoff:4,1,main&#93;</span><br/>java.lang.AssertionError<br/>   
    at
org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:285)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager.access$100(HintedHandOffManager.java:81)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager$2.runMayThrow(HintedHandOffManager.java:337)<br/>
       at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)<br/>    
   at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)<br/>       
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)<br/>        at
java.lang.Thread.run(Unknown Source)<br/> INFO <span
class="error">&#91;HintedHandoff:5&#93;</span> 2011-10-25 15:30:59,893
HintedHandOffManager.java (line 263) Started hinted handoff for token:
106338239662793269832304564822427566080 with IP: /xx.xx.xx.xx<br/>ERROR <span
class="error">&#91;HintedHandoff:5&#93;</span> 2011-10-25 15:30:59,894
AbstractCassandraDaemon.java (line 133) Fatal exception in thread Thread<span
class="error">&#91;HintedHandoff:5,1,main&#93;</span><br/>java.lang.AssertionError<br/>   
    at
org.apache.cassandra.db.HintedHandOffManager.deliverHintsToEndpoint(HintedHandOffManager.java:285)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager.access$100(HintedHandOffManager.java:81)<br/>
       at
org.apache.cassandra.db.HintedHandOffManager$2.runMayThrow(HintedHandOffManager.java:337)<br/>
       at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)<br/>    
   at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)<br/>       
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)<br/>        at
java.lang.Thread.run(Unknown Source)<br/> INFO <span
class="error">&#91;HintedHandoff:6&#93;</span> 2011-10-25 15:31:41,194
HintedHandOffManager.java (line 263) Started hinted handoff for token:
42535295865117307932921825928971026432 with IP: /xx.xx.xx<br/> INFO <span
class="error">&#91;HintedHandoff:6&#93;</span> 2011-10-25 15:31:41,194
HintedHandOffManager.java (line 318) Finished hinted handoff of 0 rows to endpoint
/xx.xx.xx.xx 


New Comment: 
As Jonathan said, it looks like either old hints that haven't been cleaned or some
corruption to the hints that are stored.While it's probably important to find the source
of this problem, I think it's really bad that we use assertions to check for it. Hinted
Handoff is an optimization, so for invalid hints shouldn't break things.The attached patch
removes the assertions and replaces them with a check to ensure the hint is valid. If it's
not, a warning will be emitted (so you know something's not quite right) and everything
will continue as normal. 


New Comment: 
I'd say that reasoning makes this the perfect case for assertions &#8211; it doesn't
affect anything but hints for the assert to fail. 


New Comment: 
Wouldn't this disrupt the delivery of hints that aren't corrupt? 


New Comment: 
One possible avenue for this is that if startup takes long enough (due to CL replay +
sstable index sampling, probably) that compactions start before the upgrade hint purge,
compaction can generation "new" 0.8 hints after we try to delete them.  Patch to switch to
truncate to avoid this, although <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3399" title="Truncate disregards
running compactions when deleting sstables" class="issue-link"
data-issue-key="CASSANDRA-3399"><del>CASSANDRA-3399</del></a> is open to make truncate
more bulletproof in that situation itself.  In the meantime, removing the hints
columnfamily manually before restarting should fix the problem.Also added some debug
logging to the hint purge in r1189221. 


New Comment: 
<blockquote>Wouldn't this disrupt the delivery of hints that aren't
corrupt?</blockquote>Sure.  Point is, that's not a Big Deal.  So it's worth having the big
neon sign of an exception telling people "this ain't right." 


New Comment: 
new version of patch adds a second check for 0.8 hints during hint delivery 


New Comment: 
I guess I can live with ignoring the known types of corruption (old hints) and leaving the
assertions to flag up unknown forms of corruption. 


New Comment: 
+1 


