Pattern changes caused by commit: 789aa15fc1990643a1162e0ac93f1487446328db

From: Facade-1
To:   Facade-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5525.txt 

commit 789aa15fc1990643a1162e0ac93f1487446328db
Author: Sylvain Lebresne <slebresne@apache.org>

    Avoid race in OutboundTcpConnection in multi-DC setups
    patch by jbellis; reviewed by slebresne for CASSANDRA-3530



==================================
 Issue CASSANDRA-3530 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3530] Header class not thread safe, but mutated by multiple threads
-----------------

-----------------
Summary: Header class not thread safe, but mutated by multiple threads
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 25 Nov 2011 00:11:32 +0000
-----------------

-----------------
Resolved at: Fri, 25 Nov 2011 09:55:42 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

With Cassandra 1.0.3 we are getting exceptions like,

Fatal exception in thread
Thread<span
class="error">&#91;WRITE-/xx.xx.xx.xx,5,main&#93;</span>java.util.ConcurrentModificationException
       <br/>        at java.util.Hashtable$Enumerator.next(Unknown Source)<br/>        at
org.apache.cassandra.net.Header.serializedSize(Header.java:97)        <br/>        at
org.apache.cassandra.net.OutboundTcpConnection.messageLength(OutboundTcpConnection.java:164)<br/>
       at
org.apache.cassandra.net.OutboundTcpConnection.write(OutboundTcpConnection.java:154)      
 <br/>        at
org.apache.cassandra.net.OutboundTcpConnection.writeConnected(OutboundTcpConnection.java:115)
       <br/>        at
org.apache.cassandra.net.OutboundTcpConnection.run(OutboundTcpConnection.java:94)

and,

ERROR
<span class="error">&#91;WRITE-/xx.xx.xx.xx&#93;</span> 2011-11-24 22:08:28,981
AbstractCassandraDaemon.java (line 133) Fatal exception in thread Thread<span
class="error">&#91;WRITE-/10.30.12.79,5,main&#93;</span>java.lang.NullPointerException    
   <br/>        at org.apache.cassandra.net.Header.serializedSize(Header.java:101)<br/>   
    at
org.apache.cassandra.net.OutboundTcpConnection.messageLength(OutboundTcpConnection.java:164)<br/>
       at
org.apache.cassandra.net.OutboundTcpConnection.write(OutboundTcpConnection.java:154)<br/> 
      at
org.apache.cassandra.net.OutboundTcpConnection.writeConnected(OutboundTcpConnection.java:115)
       <br/>	at
org.apache.cassandra.net.OutboundTcpConnection.run(OutboundTcpConnection.java:94)

It
looks like Header is not thread safe, but the same header instance is modified
concurrently while being sent to several threads in StorageProxy.sendMessages. 

This bug
eventually causes the node to OOM, as it kills the OutboundTcpConnection thread, which
means nothing is dequeing from queue.
 

-----------------

-----------------
Comments: 

New Comment: 
Patch makes Header nearly immutable.  setDetails and removeDetails now return a copy of
the Header with the modifications, rather than modifying the original. 


New Comment: 
Are you running in a multi-DC environment? 


New Comment: 
<blockquote>Patch makes Header nearly immutable</blockquote>What are the changes in
OutboundTcpConnection trying to do? 


New Comment: 
We are running in a multi dc environment.The changes in OutboundTcpConnection prevent the
thread from dieing in case of a RuntimeException.  When the thread dies the node
eventually runs out of memory as the queue never gets emptied. 


New Comment: 
v2 attached (against 1.0 branch):<ul class="alternate" type="square">	<li>simplifies OTC
change to just catch Exception in existing try/catch in writeConnected</li>	<li>some style
updates to Header/Message changes, but functionality is unchanged</li>	<li>updated
StorageProxy to only need one header copy instead of the horribly inefficient process used
previously</li></ul> 


New Comment: 
This affects 0.8 as well (and would have affected 0.7 if not for <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3472" title="Actually uses efficient
cross DC writes" class="issue-link"
data-issue-key="CASSANDRA-3472"><del>CASSANDRA-3472</del></a>). 


New Comment: 
version of v2 for 0.8.  Omitted the OTC change since in 0.8 it's just shoving a bytebuffer
over the wire, there's not really any non-IOExceptions to worry about. 


New Comment: 
Integrated in Cassandra-0.8 #404 (See <a
href="https://builds.apache.org/job/Cassandra-0.8/404/" class="external-link"
rel="nofollow">https://builds.apache.org/job/Cassandra-0.8/404/</a>)<br/>    avoid race in
OutboundTcpConnection in multi-DC setups<br/>patch by jbellis; reviewed by slebresne for
<a href="https://issues.apache.org/jira/browse/CASSANDRA-3530" title="Header class not
thread safe, but mutated by multiple threads" class="issue-link"
data-issue-key="CASSANDRA-3530"><del>CASSANDRA-3530</del></a>slebresne : <a
href="http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1206098"
class="external-link"
rel="nofollow">http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1206098</a><br/>Files
:
<ul>	<li>/cassandra/branches/cassandra-0.8/CHANGES.txt</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Header.java</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Message.java</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/service/StorageProxy.java</li></ul> 


New Comment: 
Looking at this in the morning, I think I was wrong about it affecting 0.8, since all the
Message wrangling (including the Message -&gt; byte[] conversion in sendOneWay) happens on
the StorageProxy thread.  I think we should revert from 0.8.8. 


New Comment: 
There is no StorageProxy thread per-se, is there? Why wouldn't 0.8 be subject to the same
concurrency bug as reported on that issue? 


New Comment: 
Because in 0.8 there is only one thread touching any given Message in StorageProxy +
MessagingService.  Once OTC gets it, MS has already turned it into a byte[] (which OTC
then copies to its Socket buffer).To avoid the unnecessary intermediate byte[], for 1.0 we
switch to OTC getting the Message objects.  So in the multi-DC case you can have a 2nd
thread (the OTC one) sending a Message, while the SP thread updates its Header. 


New Comment: 
Ok. I'm fine reverting this then, though I would also be fine keeping it in. I prefer the
new copying methods, and it does improve the code a bit in StorageProxy, and I don't see
many chance for this to introduce new bugs (but obviously there is always one). 


