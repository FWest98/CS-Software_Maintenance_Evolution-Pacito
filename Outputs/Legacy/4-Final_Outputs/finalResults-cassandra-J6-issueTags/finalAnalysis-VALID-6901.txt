Pattern changes caused by commit: 90170d1594c3a88f0a7b6a25da7161bb7af2e552

From: Decorator-1
To:   Decorator-2

From: Flyweight-1
To:   Flyweight-2

From: Mediator-1
To:   Mediator-3

From: Strategy-1
To:   Strategy-0

From: Template Method-2
To:   Template Method-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6901.txt 

commit 90170d1594c3a88f0a7b6a25da7161bb7af2e552
Author: Pavel Yaskevich <xedin@apache.org>

    Avoid ID conflicts from concurrent schema changes
    patch by Pavel Yaskevich; reviewed by Sylvain Lebresne for CASSANDRA-3794



==================================
 Issue CASSANDRA-3794 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3794] Avoid ID conflicts from concurrent schema changes
-----------------

-----------------
Summary: Avoid ID conflicts from concurrent schema changes
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 27 Jan 2012 00:25:09 +0000
-----------------

-----------------
Resolved at: Tue, 29 May 2012 10:49:25 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 

Change ColumnFamily identifiers to be UUIDs instead of sequential Integers. Would be
useful in the situation when nodes simultaneously trying to create ColumnFamilies.
 

-----------------

-----------------
Comments: 

New Comment: 
duplicate of <a href="https://issues.apache.org/jira/browse/CASSANDRA-1983" title="Make
sstable filenames contain a UUID instead of increasing integer" class="issue-link"
data-issue-key="CASSANDRA-1983"><del>CASSANDRA-1983</del></a> right? 


New Comment: 
I don't think so because <a href="https://issues.apache.org/jira/browse/CASSANDRA-1983"
title="Make sstable filenames contain a UUID instead of increasing integer"
class="issue-link" data-issue-key="CASSANDRA-1983"><del>CASSANDRA-1983</del></a> proposes
to change the way we identify SSTables and this one proposes to change the way we identify
ColumnFamilies. 


New Comment: 
Which I interpret as the cf id:s that are embedded in e.g. row mutations (remember all
those "invalid cfId..." cases upon schema changes). In general, UUID:s should minimize the
chances of accidentally applying something to the wrong CF (which I suppose is a
generalization of the simultaneous creation case mentioned in the ticket description). 


New Comment: 
How do we do this w/o breaking compatibility during the upgrade, is my question. 


New Comment: 
I believe Pavel is working on other things now (he can correct me if I am wrong) so I am
clearing the assignment in case someone else can tackle it. 


New Comment: 
Is this still useful given the <a
href="https://issues.apache.org/jira/browse/CASSANDRA-1391" title="Allow Concurrent Schema
Migrations" class="issue-link"
data-issue-key="CASSANDRA-1391"><del>CASSANDRA-1391</del></a> implementation? 


New Comment: 
Sure it is, given that CFs could be created on the disconnected nodes and have the same
cfId assigned - after the schema merge system would crash with RTE. 


New Comment: 
I guess we'll need some kind of Int -&gt; UUID <span class="error">&#91;bi&#93;</span>map
to maintain compatibility during rolling upgrade... 


New Comment: 
This got me thinking that if we change int to UUID it wouldn't actually change the deal
unless we generate UUID based on the CF attributes (so we can merge simultaneously created
CF on the different machines) but after we update attributes again we would have to
re-generate id. The question is - do we really need ID for CF? We can guarantee uniqueness
of CF in the given keyspace by CF's name... 


New Comment: 
I guess a side benefit is, we cut down on the data we send for each insert or read
request... 


New Comment: 
Yeah, I think that this was the main reason to add that. Although change proposed here
would only work if CFs simultaneously created on the different machines are <b>not</b> the
same CF otherwise we would have hopeless situation upon merge which would break the whole
schema. We can't really check what schema mutation would lead to before we apply it and
try to merge so I don't really see what we can do about it... 


New Comment: 
Sounds like we should prototype the "just use cfname" approach and see how bad the hit is
in practice.  If we're lucky it will be negligible and we can move on. 


New Comment: 
It doesn't really help tho if the same CF created on the different nodes simultaneously. 


New Comment: 
As long as everyone agrees on one of the CF definitions eventually, or even a combination
of the two, that's totally fine. 


New Comment: 
Made a migration from int to uuid, made sure that all SerializationTests pass (and all
other tests) and schema is merged correctly in the situations described in previous
comments. 


New Comment: 
For info, changing the messaging service version will break streaming during the upgrade.
And last time we tried, there was strong opposition in changing the messaging service
version in a minor release. Not that I have a good solution for fixing this without
breaking the protocol. 


New Comment: 
Our options include<ol>	<li>break streaming for 1.1.1 as an "emergency
fix"</li>	<li>retract claims that 1.1 allows concurrent schema changes, postpone this fix
for 1.2</li>	<li>add a mapping between old int IDs and new UUIDs and version streaming
accordingly</li></ol>I'm okay with any of these, although if #3 is feasible that would be
preferred. 


New Comment: 
Previous oppositions weren't mine but in any case I'm personally good going with #3 too
(Pavel's patch already includes the id&lt;-&gt;uuid mapping, our only problem is the
dropping of streaming connection on version mismatch). This fix doesn't affect anything
streamed, so it should be fine to bump the messaging version but special case streaming so
that it doesn't drop the connection for streams coming from 1.1.0. 


New Comment: 
Looking more closely, there is actually two problems with respect to rolling
upgrades:<ol>	<li>because newly created CF won't have an old format id, it means people
shouldn't create any CF in a mixed version cluster. That would clearly be fine for a major
upgrade, it's more annoying to roll this in a minor upgrade though imo. I don't think
there is anything we can do about that.</li>	<li>as is, streaming won't work in a mixed
version cluster (as is the case in major upgrade) by virtue of the following code in
IncomingTcpConnection:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>if (version == MessagingService.version_){  
 ....}else{    // streaming connections are per-session and have a fixed version.  we
can't do anything with a wrong-version stream connection, so drop it.   
logger.error("Received stream using protocol version {} (my version {}). Terminating
connection",                 version, MessagingService.version_);}</pre></div></div>We
could avoid that, by say adding some isStreamingCompatible(v1, v2) method that would
return true for VERSION_11 and VERSION_111, since after all there is no change to the
stream format. However, the patch also need to version correctly StreamRequestMessage for
it to work correctly.</li></ol>Overall, this is not a small patch, and it will induces
more limited rolling upgrade behavior than is the norm in a minor version, so I'll admit
I'm personally growing more in favor of solution #2 above (postpone to 1.2).That being
said, on the patch itself:<ul>	<li>In RowCacheKey.compareTo(), == is used intead of
equals().</li>	<li>In Schema, we can remove the cfIdGen field &amp;&amp;
MIN_CF_ID.</li>	<li>nameUUIDFromBytes already does a md5 internally, so we should just
pass the concatenation of ksName and cfName bytes (doubling the md5 slightly augments the
chance of collisions).</li>	<li>When writing the schema, for the "id" column, the code
write a string/UUID (toSchemaNoColumns) but expect an int when reading
(fromSchemaNoColumns). The fact is, we don't need to save the new style id in the schema
since we can recompute it. So we should keep the "id" column for oldId (if they exist).
Also, when writing a CF schema, we should check if it has an associated old cfId and write
it if it has (i.e. we should preserve the old ids mapping (when it exists) for now, we'll
drop that in a future version).</li>	<li>Schema.addOldCfIdMapping should check for null
value for the oldId and ignore it, since in fromSchemaNoColumns, result.getInt("id") will
return null for new CF.</li>	<li>ColumnFamilySerializer needs to version the serialize
version, when we talk to old node (same in RowMutation serialize method). Of course, when
a CF don't have a old id, we'll have to throw an exception instead (that the 'user
shouldn't create CF in a mixed cluster').</li>	<li>StreamRequestMessage should version
cfId correctly.</li>	<li>In SchemaLoader, not sure we want to always assign an old style
id to the CF. Instead, it would probably be better to add a few specific tests
(serialization test ?) that validate the old id are correctly handled.</li>	<li>OCD nit:
convertOldCFId could be renamed to convertOldCfId for consistency with the rest (i.e. 'F'
could be lowercased) <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/tongue.png" height="16"
width="16" align="absmiddle" alt="" border="0"/></li></ul> 


New Comment: 
v2 that addresses all pointes. 


New Comment: 
Two small nits while looking at v2 quickly:<ul>	<li>In fromSchemaNoColumns, the try catch
is not useful.</li>	<li>In ColumnFamilySerializer, when we serialize for an old version
and can't find an oldId, it'll probably be better to use a more user friendly message like
"Cannot send column family X to Y as it's version is pre-1.1.1. Please update the whole
cluster to 1.1.1 first".</li></ul>But I think we agreed that it's safer to target this at
1.2 and acknowledge that concurrent table creation will only be supported then, so this
will need rebase to trunk <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
rebased with the latest trunk and fixed nit. 


New Comment: 
In StreamRequest serializer, serializedSize should use
CFSerializer.cfIdSerializedSize().But with that corrected, looks good to me, +1. 


