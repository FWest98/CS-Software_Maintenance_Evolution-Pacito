Pattern changes caused by commit: 3e4858271d2c2f3f9a6ab4a13f6a48f63b77aa70

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1

From: Template Method-3
To:   Template Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7121.txt 

commit 3e4858271d2c2f3f9a6ab4a13f6a48f63b77aa70
Author: Brandon Williams <brandonwilliams@apache.org>

    cqlsh: describe command outputs valid CQL.
    Patch by paul cannon, reviewed by brandonwilliams for CASSANDRA-4380



==================================
 Issue CASSANDRA-4380 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4380] CQLSH: describe command doesn't output valid CQL command.
-----------------

-----------------
Summary: CQLSH: describe command doesn't output valid CQL command.
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 26 Jun 2012 19:20:55 +0000
-----------------

-----------------
Resolved at: Wed, 11 Jul 2012 14:44:46 +0000
-----------------

-----------------
Assigned to: paul cannon
-----------------

-----------------
Description: 
<div class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>cqlsh:test&gt; describe columnfamily stats;CREATE TABLE stats (  gid
blob PRIMARY KEY) WITH  comment='' AND 
comparator='CompositeType(org.apache.cassandra.db.marshal.Int32Type,org.apache.cassandra.db.marshal.BytesType,org.apache.cassandra.db.marshal.UTF8Type)'
AND  read_repair_chance=0.100000 AND  gc_grace_seconds=864000 AND  default_validation=blob
AND  min_compaction_threshold=4 AND  max_compaction_threshold=32 AND 
replicate_on_write='true' AND  compaction_strategy_class='SizeTieredCompactionStrategy'
AND  compression_parameters:sstable_compression='SnappyCompressor';</pre></div></div>
I
can create a cf in cql3 and then use describe cf to get the above output. However trying
to run that create statement says that all of the following are invalid
options:
<ul>	<li>default_validation</li>	<li>min_compaction_threshold</li>	<li>max_compaction_threshold</li>	<li>comparator</li></ul> 

-----------------

-----------------
Comments: 

New Comment: 
I'll not that at lest for CQL3, as explained in <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4377" title="CQL3 column value
validation bug" class="issue-link"
data-issue-key="CASSANDRA-4377"><del>CASSANDRA-4377</del></a>, it will be much easier to
fix on trunk than on 1.1 because of <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4018" title="Add column metadata to
system columnfamilies" class="issue-link"
data-issue-key="CASSANDRA-4018"><del>CASSANDRA-4018</del></a>. As far as my personal
opinion is involved, I would be fine in saying that cqlsh describe command is broken with
CQL3 until C* 1.2 (since CQL3 is beta until then anyway). 


New Comment: 
My issue was more with the fact that it seems impossible to set any of those four
properties on a cf via cql. 


New Comment: 
This was actually intended behavior- since it's possible to create tables in cql2 which
can't be duplicated in cql3, I wanted to still note the possibly-relevant options on
certain tables even if the syntax wasn't valid cql3.I've since changed my mind, however,
since it is confusing and makes it harder to do automated tests on DESCRIBE output, so
I've already made this change in a personal branch. I'll put that up here. 


New Comment: 
Nick, can you try with the bin/cqlsh from my 4380 branch, here:<a
href="https://github.com/thepaul/cassandra/tree/4380" class="external-link"
rel="nofollow">https://github.com/thepaul/cassandra/tree/4380</a>This should fix the cases
where cql2-style DESCRIBE was used sometimes, even when the connection was cql3, but
looking closer at your case, it might not actually fix that. 


New Comment: 
Seems to work fine for me. 


New Comment: 
Committed. 


New Comment: 
what about the rest of the output? if I run «cqlsh --cqlversion=3», I expect that the
output is CQLv3, but for a particular CF that was created with a CQLv2 command, I
get:CREATE TABLE logs (<br/>  day timestamp PRIMARY KEY<br/>) WITH<br/>  comment=''
AND<br/>  comparator=text AND<br/>  read_repair_chance=0.100000 AND<br/> 
gc_grace_seconds=864000 AND<br/>  default_validation=text AND<br/> 
min_compaction_threshold=4 AND<br/>  max_compaction_threshold=32 AND<br/> 
replicate_on_write='true' AND<br/> 
compaction_strategy_class='SizeTieredCompactionStrategy' AND<br/> 
compression_parameters:sstable_compression='SnappyCompressor';which is only valid in
CQLv2; with CQLv3 I get this message:&lt;stdin&gt;:17:Bad Request: No definition found
that is not part of the PRIMARY KEY 


New Comment: 
Marcos- there isn't any way to recreate some CQL 2 tables in CQL 3. CQL 3 can model the
same data, but the structure of the table needs to be different. Cqlsh does the best that
it can here, but if you want a better guarantee of valid reconstruction of CQL 2 tables,
use cqlsh in CQL 2 mode. 


New Comment: 
Doesn't COMPACT STORAGE provide the ability to model thrift/cql2-style tables? 


New Comment: 
<blockquote>Doesn't COMPACT STORAGE provide the ability to model thrift/cql2-style
tables?</blockquote>It does for some. It probably would in this case. It doesn't for the
cases where there are multiple columns with metadata in addition to undefined/wide-row
columns.Maybe that's not a case worth worrying about, though. We could open a new ticket
for recreating thrift/cql2-style tables in CQL 3 mode with COMPACT STORAGE and some
made-up default column names like "colname" and "value" or something. 


New Comment: 
<blockquote>It doesn't for the cases where there are multiple columns with metadata in
addition to undefined/wide-row columns</blockquote>That's true on 1.1 but I'll note that
for 1.2, provided you use the system.schema_columnfamilies table, it should (almost)
always be possible to create a valid CQL3 definition from an existing CF (potentially, and
almost always in the case of CF created from thrift/CQL2, with COMPACT STORAGE). The only
thing that comes in mind that makes me say "almost" is the case where people have created
on the thrift side a column_metadata on a CompositeType. In that last case we can create a
CQL3 query to recreate the CF, but not the column_metadata. I think it's safe to say that
we can ignore that.<blockquote>some made-up default column names</blockquote>The Cassandra
already does that (so that you can always access thrift CF from CQL3), see
CFDefinition.java. It could be worth using the same made-up names here. 


New Comment: 
<blockquote>for 1.2, provided you use the system.schema_columnfamilies table, it should
(almost) always be possible to create a valid CQL3 definition from an existing
CF</blockquote>Could you elaborate on how that should be done? Say I made the following in
CQL2:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>CREATE TABLE foo (t text PRIMARY KEY, f
float, x uuid) WITH default_validation=timestamp;</pre></div></div>If that can be
recreated in CQL 3, then I've missed a development somewhere.<blockquote>The Cassandra
already does that (so that you can always access thrift CF from CQL3), see
CFDefinition.java. It could be worth using the same made-up names here.</blockquote>That's
good to know. We should probably make that new ticket then. 


New Comment: 
<blockquote>If that can be recreated in CQL 3, then I've missed a development
somewhere</blockquote>Good point, I think too much in term of CQL3 now I guess, forgot
about those. I suppose we could generate a valid CQL3 definition that is "compatible" with
that (the same thing without the default_validation_validation part), but it's unclear
it's a better idea. 


New Comment: 
Using CQL3, how are you now expected to create a column family like:CREATE TABLE
UserProducts<br/>(<br/>  userId uuid PRIMARY KEY<br/>);Where I would then dynamically add
the product ids in the column name for each product, and leaving the column value null for
each. The type of the product id is uuid.When I try to create this column family I am
told: No definition found that is not part of the PRIMARY KEYAny help is greatly
appreciated.It works with CQL2, so is it a bug that CQL3 cannot? 


