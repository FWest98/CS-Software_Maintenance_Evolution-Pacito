Pattern changes caused by commit: 9879fa6122d325951d98f8bc601ff64dd04c2c67

From: Abstract Factory-1
To:   Abstract Factory-2

From: Factory Method-1
To:   Factory Method-2

From: Decorator-2
To:   Decorator-1

From: Facade-0
To:   Facade-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-9385.txt 

commit 9879fa6122d325951d98f8bc601ff64dd04c2c67
Author: Jonathan Ellis <jbellis@apache.org>

    Remove buggy thrift max message length option
    patch by jbellis; reviewed by tjake for CASSANDRA-5529



==================================
 Issue CASSANDRA-5529 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-5529] thrift_max_message_length_in_mb makes long-lived connections error out
-----------------

-----------------
Summary: thrift_max_message_length_in_mb makes long-lived connections error out
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 1 May 2013 00:54:14 +0000
-----------------

-----------------
Resolved at: Tue, 21 May 2013 18:55:39 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

When running mapreduce jobs that read directly from cassandra, the job will sometimes
fail with an exception like this:

java.lang.RuntimeException:
com.rockmelt.org.apache.thrift.TException: Message length exceeded: 40<br/>	at
org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.maybeInit(ColumnFamilyRecordReader.java:400)<br/>	at
org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.computeNext(ColumnFamilyRecordReader.java:406)<br/>	at
org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.computeNext(ColumnFamilyRecordReader.java:329)<br/>	at
com.google.common.collect.AbstractIterator.tryToComputeNext(AbstractIterator.java:143)<br/>	at
com.google.common.collect.AbstractIterator.hasNext(AbstractIterator.java:138)<br/>	at
org.apache.cassandra.hadoop.ColumnFamilyRecordReader.getProgress(ColumnFamilyRecordReader.java:109)<br/>	at
org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.getProgress(MapTask.java:522)<br/>	at
org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:547)<br/>	at
org.apache.hadoop.mapreduce.MapContext.nextKeyValue(MapContext.java:67)<br/>	at
org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:143)<br/>	at
org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:771)<br/>	at
org.apache.hadoop.mapred.MapTask.run(MapTask.java:375)<br/>	at
org.apache.hadoop.mapred.Child$4.run(Child.java:255)<br/>	at
java.security.AccessController.doPrivileged(Native Method)<br/>	at
javax.security.auth.Subject.doAs(Subject.java:396)<br/>	at
org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1132)<br/>	at
org.apache.hadoop.mapred.Child.main(Child.java:249)<br/>Caused by:
com.rockmelt.org.apache.thrift.TException: Message length exceeded: 40<br/>	at
com.rockmelt.org.apache.thrift.protocol.TBinaryProtocol.checkReadLength(TBinaryProtocol.java:393)<br/>	at
com.rockmelt.org.apache.thrift.protocol.TBinaryProtocol.readBinary(TBinaryProtocol.java:363)<br/>	at
org.apache.cassandra.thrift.Column.read(Column.java:528)<br/>	at
org.apache.cassandra.thrift.ColumnOrSuperColumn.read(ColumnOrSuperColumn.java:507)<br/>	at
org.apache.cassandra.thrift.KeySlice.read(KeySlice.java:408)<br/>	at
org.apache.cassandra.thrift.Cassandra$get_range_slices_result.read(Cassandra.java:12422)<br/>	at
com.rockmelt.org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:78)<br/>	at
org.apache.cassandra.thrift.Cassandra$Client.recv_get_range_slices(Cassandra.java:696)<br/>	at
org.apache.cassandra.thrift.Cassandra$Client.get_range_slices(Cassandra.java:680)<br/>	at
org.apache.cassandra.hadoop.ColumnFamilyRecordReader$StaticRowIterator.maybeInit(ColumnFamilyRecordReader.java:362)<br/>	...
16 more

In ColumnFamilyRecordReader#initialize, a TBinaryProtocol is created as
follows:

TTransport transport =
ConfigHelper.getInputTransportFactory(conf).openTransport(socket,
conf);<br/>TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport,
ConfigHelper.getThriftMaxMessageLength(conf));<br/>client = new
Cassandra.Client(binaryProtocol);

But each time a call to cassandra is made,
checkReadLength(int length) is called in TBinaryProtocol, which includes
this:

readLength_ -= length;<br/>if (readLength_ &lt; 0) {<br/>   throw new
TException("Message length exceeded: " + length);<br/>}

The result is that readLength_ is
decreased each time, until it goes negative and exception is thrown.  This will only
happen if you're reading a lot of data and your split size is large (which is maybe why
people haven't noticed it earlier).  This happens regardless of whether you use wide row
support.

I'm not sure what the right fix is.  It seems like you could either reset the
length of TBinaryProtocol after each call or just use a new TBinaryProtocol each time.
 

-----------------

-----------------
Comments: 

New Comment: 
Rob, your analysis looks spot on.WTF.  Creating a new TBinaryProtocol for each message
would be pretty ludicrous.The genesis of this readLength_ business is hidden in the murky
archives of the Thrift incubator svn repro.  It looks to me like it's kind of a really
ugly hack for pre-Framed transports that could call setReadLength in between messages
based on some kind of per-application knowledge.  Because I can't think of any use for
"expiring" a connection after X bytes otherwise.I don't think we should be using it at
all.  Attached is a patch that rips it out, on the Cassandra server side as well.  I feel
sorry for any poor bastard who ever pulled his hair out over Cassandra erroring out his
connection apparently randomly... 


New Comment: 
Thought I was on the 1.1 branch when I wrote that patch but it was really 1.2.  Here it is
against 1.1 as well. 


New Comment: 
Note to self: remove our hacked TBinaryProtocol entirely in trunk. 


New Comment: 
Thanks for the patch and the quick turnaround.  Verified on the 1.1 branch that it fixes
my problem.I'm not really familiar with this api, hence my notes about TBinaryProtocol. 
You solution makes way more sense <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
<a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tjake"
class="user-hover" rel="tjake">T Jake Luciani</a> Can you review above? 


New Comment: 
Looks fine.  I filed <a href="https://issues.apache.org/jira/browse/THRIFT-1975"
title="TBinaryProtocol CheckLength can&#39;t be used for a client" class="issue-link"
data-issue-key="THRIFT-1975"><del>THRIFT-1975</del></a> to get this issue fixed in general 


