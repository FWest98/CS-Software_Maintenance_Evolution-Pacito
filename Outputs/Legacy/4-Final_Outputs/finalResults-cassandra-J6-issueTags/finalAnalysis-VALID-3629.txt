Pattern changes caused by commit: 2287fe0044117592a38bb07f06672b3a9211d38a

From: Abstract Factory-2
To:   Abstract Factory-3

From: Factory Method-2
To:   Factory Method-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3629.txt 

commit 2287fe0044117592a38bb07f06672b3a9211d38a
Author: Sylvain Lebresne <slebresne@apache.org>

    Atomically switch cfstore memtables and sstables
    patch by slebresne; reviewed by jbellis for CASSANDRA-2284 (and CASSANDRA-2105)



==================================
 Issue CASSANDRA-2105 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2105] Fix the read race condition in CFStore for counters 
-----------------

-----------------
Summary: Fix the read race condition in CFStore for counters 
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 3 Feb 2011 10:51:07 +0000
-----------------

-----------------
Resolved at: Mon, 28 Mar 2011 14:45:59 +0000
-----------------

-----------------
Assigned to: Sylvain Lebresne
-----------------

-----------------
Description: 

There is a (known) race condition during counter read. Indeed, for standard<br/>column
family there is a small time during which a memtable is both active and<br/>pending flush
and similarly a small time during which a 'memtable' is both<br/>pending flush and an
active sstable. For counters that would imply sometime<br/>reconciling twice during a read
the same counterColumn and thus over-counting.

Current code changes this slightly by
trading the possibility to count twice a<br/>given counterColumn by the possibility to
miss a counterColumn. Thus it trades<br/>over-counts for under-counts.

But this is no fix
and there is no hope to offer clients any kind of guarantee<br/>on reads unless we fix
this.
 

-----------------

-----------------
Comments: 

New Comment: 
I plan to reuse the fix I had made for #1546 that uses a ReadWriteLock to fix<br/>this
(unless I find a better idea in the meantime). Unless proven otherwise I<br/>don't think
this will have a huge impact on counter read performance, but if<br/>someone finds a
better idea, I'm listening. 


New Comment: 
Attached not 1 but 2 options for this patch. I'm not sure with which version to go so I'm
asking for opinions.Version 1 is the one extracted from #1546. It uses a ReadWriteLock to
protect from the race condition.Version 2 don't use a lock. So less chances of lock
contention which is always good. Only problem is, it still suffers in theory of a race
condition. But I think this race condition is borderline impossible.<br/>Basically, given
a memtable m being flushed, let's call s(m) the sstable initially produced by its flushing
and let's denote by s'(m) any sstable resulting of the compaction of s(m). The race is if
a read thread sees m when grabbing the references to the memtable being flushed and sees
s'(m) (not s(m), that is the initial race condition and this is not impossible at all)
when grabing the reference to the sstables.<br/>If it's unclear, the code has a comment
explaining this that may be more clear.So not sure which version to go with. I may
slightly lean towards Version 1 because I usually side with correction before anything
else, but since this is in a critical path it feels slightly wasteful to use a lock for
this given how remote the race condition of version 2 seems. 


New Comment: 
I've opened <a href="https://issues.apache.org/jira/browse/CASSANDRA-2284" title="Make
changes to the set of memtables and sstables of a cfstore atomic" class="issue-link"
data-issue-key="CASSANDRA-2284"><del>CASSANDRA-2284</del></a> that provides what I think
is a better solution than the one I have attached previously to this problem (I've opened
it separately because it's a more generic solution, not just a counter related fix). 


New Comment: 
Integrated in Cassandra #810 (See <a
href="https://hudson.apache.org/hudson/job/Cassandra/810/" class="external-link"
rel="nofollow">https://hudson.apache.org/hudson/job/Cassandra/810/</a>)<br/>    Atomically
switch cfstore memtables and sstables<br/>patch by slebresne; reviewed by jbellis for <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2284" title="Make changes to the set
of memtables and sstables of a cfstore atomic" class="issue-link"
data-issue-key="CASSANDRA-2284"><del>CASSANDRA-2284</del></a> (and <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2105" title="Fix the read race
condition in CFStore for counters " class="issue-link"
data-issue-key="CASSANDRA-2105"><del>CASSANDRA-2105</del></a>) 


