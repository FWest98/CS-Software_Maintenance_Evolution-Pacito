Pattern changes caused by commit: 402e1edeb7302112e6ea532bf77f1d6a3eb81c78

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3503.txt 

commit 402e1edeb7302112e6ea532bf77f1d6a3eb81c78
Author: Jonathan Ellis <jbellis@apache.org>

    allow zero replicas in a NTSdatacenter
    patch by slebresne; reviewed by jbellis for CASSANDRA-1924



==================================
 Issue CASSANDRA-1924 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-1924] Broken keyspace strategy_option with zero replicas
-----------------

-----------------
Summary: Broken keyspace strategy_option with zero replicas
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 30 Dec 2010 22:59:28 +0000
-----------------

-----------------
Resolved at: Fri, 11 Mar 2011 18:18:37 +0000
-----------------

-----------------
Assigned to: Sylvain Lebresne
-----------------

-----------------
Description: 

When a keyspace is defined that has strategy options specifying zero replicas should be
place in a datacenter (e.g. DCX:0), an assert is violated for any insert and LOCAL_QUORUM
reads fail.  I'm not sure if the issue is that there are no nodes in DCX or that I'm
saying DCX shouldn't get any replicas, or a combination of the two.

The broken
keyspace:

create keyspace KeyspaceDC1 with<br/>  replication_factor = 1 and<br/> 
placement_strategy = 'org.apache.cassandra.locator.NetworkTopologyStrategy' and<br/> 
strategy_options = [
{DC1:1, DC2:0}
];

The fixed keyspace:

create keyspace KeyspaceDC1
with<br/>  replication_factor = 1 and<br/>  placement_strategy =
'org.apache.cassandra.locator.NetworkTopologyStrategy' and<br/>  strategy_options =
[
{DC1:1}
];

To reproduce:
<ul>	<li>Install the 0.7rc3 rpm on a single node in
"DC1".</li>	<li>In cassandra.yaml set initial_token = 1 and specify
PropertyFileSnitch.</li>	<li>cassandra-topology.properties:</li></ul>
10.5.64.26=DC1:R1<br/>default=DC2:R1
<ul>	<li>Schema
loaded via cassandra-cli:</li></ul>
create keyspace KeyspaceDC1 with<br/> 
replication_factor = 1 and<br/>  placement_strategy =
'org.apache.cassandra.locator.NetworkTopologyStrategy' and<br/>  strategy_options =
[
{DC1:1, DC2:0}
];

use KeyspaceDC1;

create column family TestCF with<br/>  column_type
= 'Standard' and<br/>  comparator = 'BytesType' and<br/>  keys_cached = 200000 and<br/> 
rows_cached = 2000 and<br/>  gc_grace = 0 and<br/>  read_repair_chance = 0.0;
<ul>	<li>In
cassandra-cli execute the following:</li></ul>
<span
class="error">&#91;default@unknown&#93;</span> use KeyspaceDC1;<br/>Authenticated to
keyspace: KeyspaceDC1<br/><span class="error">&#91;default@KeyspaceDC1&#93;</span> set
TestCF<span class="error">&#91;&#39;some key&#39;&#93;</span><span
class="error">&#91;&#39;some col&#39;&#93;</span> = 'some value';<br/>Internal error
processing insert
<ul>	<li>If you have asserts enabled, check system.log where you should
find the assertion error:</li></ul>
DEBUG <span
class="error">&#91;pool-1-thread-3&#93;</span> 2010-12-29 12:10:38,897
CassandraServer.java (line 362) insert<br/>ERROR <span
class="error">&#91;pool-1-thread-3&#93;</span> 2010-12-29 12:10:38,906 Cassandra.java
(line 2960) Internal error processing insert<br/>java.lang.AssertionError<br/>        at
org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:392) <br/>  
     at
org.apache.cassandra.locator.TokenMetadata.ringIterator(TokenMetadata.java:417)<br/>      
 at
org.apache.cassandra.locator.NetworkTopologyStrategy.calculateNaturalEndpoints(NetworkTopologyStrategy.java:95)<br/>
       at
org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalEndpoints(AbstractReplicationStrategy.java:99)<br/>
       at
org.apache.cassandra.service.StorageService.getNaturalEndpoints(StorageService.java:1411)<br/>
       at
org.apache.cassandra.service.StorageService.getNaturalEndpoints(StorageService.java:1394)<br/>
       at org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:109)<br/>    
   at org.apache.cassandra.thrift.CassandraServer.doInsert(CassandraServer.java:442)<br/> 
      at org.apache.cassandra.thrift.CassandraServer.insert(CassandraServer.java:379)<br/>
       at
org.apache.cassandra.thrift.Cassandra$Processor$insert.process(Cassandra.java:2952)<br/>  
     at org.apache.cassandra.thrift.Cassandra$Processor.process(Cassandra.java:2555)<br/> 
      at
org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:167)<br/>
       at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br/>  
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
<br/>        at java.lang.Thread.run(Thread.java:619)
<ul>	<li>If you don't have asserts
enabled, you should find that no errors are logged but LOCAL_QUORUM reads cause
TimedOutExceptions on the client.</li></ul> 

-----------------

-----------------
Comments: 

New Comment: 
So the AssertionError occurs in TokenMetadata.firstTokenIndex where the token ring is
expected to have a size greater than 0. A discovery I made is that the
TokenMetadata.ringIterator method which makes the call to firstTokenIndex, also expects
the ring to be non-empty if the includeMin parameter is true:<br/>final boolean insertMin
= (includeMin &amp;&amp;
!ring.get(0).equals(StorageService.getPartitioner().getMinimumToken())) ? true : false;If
the includeMin parameter is true and the ring is empty, it would raise a
java.lang.IndexOutOfBoundsException: Index: 0, Size: 0. However, the method only seems to
be called with includeMin == true from StorageProxy.getRestrictedRanges. As in the case of
this issue, it is called from NetworkTopologyStrategy with a includeMin == false, thus
failing at the assertion in TokenMetadata.firstTokenIndex since there are no TokenMetadata
tokens present. 


New Comment: 
Indeed ringIterator() shouldn't fail when the argument token list is empty.Attaching patch
to fix this with a unit test.The second patch attached adds a more high level unit test
that tests the problem at the level of NetworkTopologyStrategy (while the first patch has
a ringIterator test). It also include a tiny optimisation for NetworkTopologyStrategy that
skip unnecessary steps when the number of replicas in the DC is 0. This optimisation would
hide the actual problem so that's why it's attached separately. 


New Comment: 
would it be simpler to say something like "if ring.isEmpty() return
Iterators.emptyIterator()"? 


New Comment: 
You are right, it's a bit cleaner. Attaching new version of first patch using Iterators
functions. 


New Comment: 
committed w/o the NTS optimization.(open to being convinced otherwise but my reasoning is
that performance is not critical-<del>since the result of calculateNE is cached by
ARS.getNE</del>-so we should not add special cases there that can hide bugs.) 


