Pattern changes caused by commit: 53fb52ac713e5471edd988b59cbd75f202a4f57b

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2

From: Facade-1
To:   Facade-0

From: Flyweight-3
To:   Flyweight-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6226.txt 

commit 53fb52ac713e5471edd988b59cbd75f202a4f57b
Author: Jonathan Ellis <jbellis@apache.org>

    don't change manifest level for cleanup, scrub, and upgradesstables under LCS
    patch by Maki Watanabe; reviewed by jbellis for CASSANDRA-3989



==================================
 Issue CASSANDRA-3989 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3989] nodetool cleanup/scrub/upgradesstables promotes all sstables to next level (LeveledCompaction)
-----------------

-----------------
Summary: nodetool cleanup/scrub/upgradesstables promotes all sstables to next level (LeveledCompaction)
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 2 Mar 2012 03:21:57 +0000
-----------------

-----------------
Resolved at: Wed, 7 Mar 2012 17:39:52 +0000
-----------------

-----------------
Assigned to: Sylvain Lebresne
-----------------

-----------------
Description: 

1.0.7 + LeveledCompactionStrategy<br/>If you run nodetool cleanup, scrub, or
upgradesstables, Cassandra execute compaction for each sstable. During the compaction, it
put the new sstable to next level of the original sstable. If you run cleanup many times,
sstables will reached to the highest level, and <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3608" title="nodetool cleanup fails
on LeveledCompactionStrategy tables with ArrayIndexOutOfBoundsException"
class="issue-link" data-issue-key="CASSANDRA-3608"><del>CASSANDRA-3608</del></a> will
happens at next cleanup.

Reproduce procedure:
<ol>	<li>create column family CF1 with
compaction_strategy=LeveledCompactionStrategy and
compaction_strategy_options={sstable_size_in_mb: 5}
;
</li>	<li>Insert some data into
CF1.</li>	<li>nodetool flush</li>	<li>Verify the sstable is created at L1 in
CF1.json</li>	<li>nodetool cleanup</li>	<li>Verify sstable in L1 is removed and new
sstable is created at L2 in CF1.json</li>	<li>repeat nodetool cleanup some times</li></ol> 

-----------------

-----------------
Comments: 

New Comment: 
Fix LeveledManifest.promote will not promote sstables to next level if the number of
source sstables (removed) is one. 


New Comment: 
Nice bug hunting.  Committed a lightly edited version of your fix: <a
href="https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commitdiff;h=53fb52ac713e5471edd988b59cbd75f202a4f57b"
class="external-link"
rel="nofollow">https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commitdiff;h=53fb52ac713e5471edd988b59cbd75f202a4f57b</a>Thanks! 


New Comment: 
Johathan, <br/>This fix has a problem. If you have only one Level 0 sstable, and there are
no Level 1 sstables involved in the compaction, promote method will chooses 0 as newLevel,
and it causes assertion.<br/>Should I create a new ticket? 


New Comment: 
No, let's reopen this one 


New Comment: 
Another problem with the fix.<br/>In following condition, the background compaction task
start looping.<ul class="alternate" type="square">	<li>No L0 sstable</li>	<li>Enough
number of L1 sstables, exceed L1 capacity (compaction score &gt; 1.1)</li></ul>It seems
the background task try to promote sstables to reduce compaction score, but it can't by
this fix, then it will compact each L1 sstables forever. 


New Comment: 
It is more complicated than I first thought.<br/>getCandidatesFor(int level) returns next
compaction candidates for the level by:<ul class="alternate" type="square">	<li>sort the
generations and find a sstable where we left off last time</li>	<li>and then find
overlappng sstables from next level</li></ul>So if we add a new sstable into same level,
getCompactionCandidates won't return empty, and then getNextBackgoundTask returns non-null
task forever.<br/>I think we should better to back out the fix and look for better
strategy to resolve the issue. 


New Comment: 
I agree, the committed fix does more harm than it helps so I reverted it.<br/>I'm trying
some other approach so will hopefully attach another version soon. 


New Comment: 
Attaching another approach that makes the compaction type available to the leveled
compaction that for cleanup, scrub and upgradeSSTables simply replace the old sstable by
the new one (without changing level or anything else). The rational is those operation
don't really "change" the sstable content and should simply "replace" sstables. 


New Comment: 
+1 


New Comment: 
Committed, thanks 


New Comment: 
Hmm, Does this address the case from <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3952" title="avoid quadratic startup
time in LeveledManifest" class="issue-link"
data-issue-key="CASSANDRA-3952"><del>CASSANDRA-3952</del></a>?<blockquote>I think this
might happen whenever there is exactly one sstable in L0 that is large enough for the
score for L0 to be &gt; 1, and if L1 is full (so that skipLevels doesn't promote).It's
possible the sstables I had lying around from sized-tiered compaction combined with my
write load conspired to trigger this case.</blockquote> 


New Comment: 
Sorry, I think I just pulled before merge-to-trunk and was still looking at a trunk
containing the original version of the patch. 


