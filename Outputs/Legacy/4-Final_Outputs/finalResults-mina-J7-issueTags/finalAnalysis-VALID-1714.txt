Pattern changes caused by commit: 0c1d3018e3450e4a5119e985c1bf98f05bdbcae8

From: Facade-5
To:   Facade-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1714.txt 

commit 0c1d3018e3450e4a5119e985c1bf98f05bdbcae8
Author: Emmanuel Lecharny <elecharny@apache.org>

    Fixed DIRMINA-717 plus some minor refactoring



==================================
 Issue DIRMINA-717 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-717] DefaultIoFuture.awaitUninterrruptibly() doesn't wait!
-----------------

-----------------
Summary: DefaultIoFuture.awaitUninterrruptibly() doesn't wait!
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Thu, 4 Jun 2009 10:25:24 +0000
-----------------

-----------------
Resolved at: Thu, 4 Jun 2009 13:40:38 +0000
-----------------

-----------------
Assigned to: Emmanuel LÃ©charny
-----------------

-----------------
Description: 

DefaultIoFuture.awaitUninterrruptibly() calls await0(Log.MAX_VALUE,<br/>false) which
does:

        long endTime = System.currentTimeMillis() + timeoutMillis;

i.e., <br/>    
   long endTime = System.currentTimeMillis() + Long.MAX_VALUE;

This comes out &lt;0 which
leads to:

            if (ready) 
{                return ready;            } else if
(timeoutMillis &lt;= 0) {                return ready;            }
Doesn't really matter
what is returned here because the return value is<br/>ignored by the caller:

        try

{            await0(Long.MAX_VALUE, false);        }
 catch ( InterruptedException ie) 
{
           // Do nothing : this catch is just mandatory by contract        }
The right
solution IMHO would be to use a timeout of -1 to wait forever<br/>and 0 for a poll.
However you might prefer:

        long endTime = timeoutMillis;<br/>        if (endTime
!= Long.MAX_VALUE)<br/>                endTime += System.currentTimeMillis();

BTW I think
this is also related to the Shutdown Thread. It looks like this pattern is used around the
disposalFuture. See AbstractIoService.dispose().
 

-----------------

-----------------
Comments: 

