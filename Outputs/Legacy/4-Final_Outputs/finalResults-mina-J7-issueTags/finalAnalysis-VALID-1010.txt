Pattern changes caused by commit: d79b207fbdbf9e5fd3c89dacca808e240ba4f585

From: Adapter-4
To:   Adapter-2

From: Facade-5
To:   Facade-4

From: Flyweight-5
To:   Flyweight-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1010.txt 

commit d79b207fbdbf9e5fd3c89dacca808e240ba4f585
Author: Trustin Lee <trustin@apache.org>

    * Added IoBuffer.minimumCapacity(...)
    * Added IoBuffer.shrink()
    * Fixed issue: DIRMINA-471 (Reduce SSL buffers overhead)
    ** The change uses the new feature of 2.0 so it won't be backported to 1.x.



==================================
 Issue DIRMINA-471 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-471] Reduce SSL buffers overhead
-----------------

-----------------
Summary: Reduce SSL buffers overhead
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 7 Nov 2007 18:37:00 +0000
-----------------

-----------------
Resolved at: Tue, 13 Nov 2007 03:40:04 +0000
-----------------

-----------------
Assigned to: Trustin Lee
-----------------

-----------------
Description: 

There is a significant overhead for SSL connections.<br/>Investigation shows that every
SSL connection requires an SSLHandler, which contains 3 buffers:
<ul class="alternate"
type="square">	<li>Two buffers for encrypted inbound and outbound packets,
respectively.</li>	<li>One buffer for decrypted application data</li></ul>
The buffer
sizes are computed as follows:<br/>Packet buffer size = the current size of the largest
SSL/TLS packet that is expected when using this session
(SSLSession.packetBufferSize())<br/>Application buffer size = 2 x packet buffer size

In
Sun JSSE the SSLSession.packetBufferSize() equals to 16K, which implies a total of 64K SSL
buffer space per connection. For 10K active this means that 640MB of memory is required
just for SSL buffers.

Such overhead really limits the number of concurrent connections an
application can support. 

A possible resolution is to dynamically re-adjusting the buffer
capacity, and allowing to configure the initial buffer sizes.
 

-----------------

-----------------
Comments: 

New Comment: 
Should be fixed in the next release. 


New Comment: 
Hi Trustin,Sorry to contact you directly, but when do you expect to release 1.1.5?Thanks a
lot,<br/>Michael 


New Comment: 
Any patch will be accelerate the schedule. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
I've just checked in the fix, but it depends on the new feature of MINA 2.0.  Because of
the big amount of change and consequently high possibility of defect, I'd like to avoid
backporting the fix. 


New Comment: 
When do you expect to release 2.0 (Beta or Final)? 


New Comment: 
We are very close to the first milestone, which should be stable enough IMHO.  The release
date of beta or final will be determined based on user feed back.  You could participate
into that process to accelerate the overall release schedule. 


New Comment: 
In our testing we also found an additional opportunity for<br/>improvement. The
improvement comes from the recognizing a known<br/>limitation in Sun's implementation of
SSLEngine. The SSLEngine will<br/>return BUFFER_OVERFLOW unless the buffer size is at
least<br/>SSLSession.getPacketBufferSize(), which is 16K. Consequently,<br/>regardless of
how much data is produced, SSLEngine always requires 16K<br/>buffers. To improve memory
consumption, packet buffer pool can be<br/>introduced. The pooled buffers will be used to
decode/encode data<br/>from/to SSLEngine. The produced data is then copied into
smaller<br/>private buffers and the common buffer is released to the pool.-Michael 


