Pattern changes caused by commit: 2c6aa4eb2651181a9c701fece74cc20e91882804

From: Mediator-1
To:   Mediator-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-200.txt 

commit 2c6aa4eb2651181a9c701fece74cc20e91882804
Author: Hairong Kuang <hairong@apache.org>

    HDFS-637. DataNode sends a Success ack when block write fails. Contributed by Hairong Kuang.



==================================
 Issue HDFS-637 Description 
=======================================

Project: Hadoop HDFS
-----------------

-----------------
Title: [HDFS-637] DataNode sends a Success ack when block write fails
-----------------

-----------------
Summary: DataNode sends a Success ack when block write fails
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Mon, 21 Sep 2009 06:00:13 +0000
-----------------

-----------------
Resolved at: Wed, 23 Sep 2009 23:32:57 +0000
-----------------

-----------------
Assigned to: Hairong Kuang
-----------------

-----------------
Description: 

When I work on <a href="https://issues.apache.org/jira/browse/HDFS-624" title="Client
support pipeline recovery" class="issue-link"
data-issue-key="HDFS-624"><del>HDFS-624</del></a>, I saw TestFileAppend3#TC7 occasionally
fails. After lots of debug, I saw that the client unexpected received a response of "-2
SUCCESS SUCCESS" in which -2 is the packet sequence number. This happened in a pipeline of
2 datanodes and one of them failed. It turned out when block receiver fails, it shuts down
itself and interrupts the packet responder but responder tries to handle interruption with
the condition "Thread.isInterrupted()" but unfortunately a thread's interrupt status is
not set in some cases as explained in the Thread#interrupt javadoc:

 If this thread is
blocked in an invocation of the wait(), wait(long), or wait(long, int) methods of the
Object  class, or of the join(), join(long), join(long, int), sleep(long), or sleep(long,
int), methods of this class, then its interrupt status will be cleared and it will receive
an InterruptedException. 

So datanode does not detect the interruption and continues as
if no error occurs.
 

-----------------

-----------------
Comments: 

New Comment: 
This patch should fix the bug. 


New Comment: 
I like Raghu's suggestion, which is to simply set a boolean flag in the catch clause (the
clause has to be moved to the outset) and add a checking of the flag to the if
(Thread.interrupted()) {} block. That way the exit logic is easier to understand (with the
comments there). Having the exit logic in one place also facilitates adding further
checking on the reason of the interrupt (i.e., local error or downstream error). 


New Comment: 
Ok, whatever is easier for your future change, I will do it for you. 


New Comment: 
+1 for the patch. 


New Comment: 
All unit tests passed. Test patch result:<br/>     <span
class="error">&#91;exec&#93;</span> +1 overall.<br/>     <span
class="error">&#91;exec&#93;</span><br/>     <span class="error">&#91;exec&#93;</span>    
+1 @author.  The patch does not contain any @author tags.<br/>     <span
class="error">&#91;exec&#93;</span><br/>     <span class="error">&#91;exec&#93;</span>    
-1 tests included.  The patch doesn't appear to include any new or modified tests.<br/>   
 <span class="error">&#91;exec&#93;</span>                         Please justify why no
new tests are needed for this patch.<br/>     <span class="error">&#91;exec&#93;</span>   
                     Also please list what manual steps were performed to verify this
patch.<br/>     <span class="error">&#91;exec&#93;</span><br/>     <span
class="error">&#91;exec&#93;</span>     +1 javadoc.  The javadoc tool did not generate any
warning messages.<br/>     <span class="error">&#91;exec&#93;</span><br/>     <span
class="error">&#91;exec&#93;</span>     +1 javac.  The applied patch does not increase the
total number of javac compiler warnings.<br/>     <span
class="error">&#91;exec&#93;</span><br/>     <span class="error">&#91;exec&#93;</span>    
+1 findbugs.  The patch does not introduce any new Findbugs warnings.<br/>     <span
class="error">&#91;exec&#93;</span><br/>     <span class="error">&#91;exec&#93;</span>    
+1 release audit.  The applied patch does not increase the total number of release audit
warnings.Unit test is not included because <a
href="https://issues.apache.org/jira/browse/HDFS-624" title="Client support pipeline
recovery" class="issue-link" data-issue-key="HDFS-624"><del>HDFS-624</del></a> exposed the
bug and with this patch the previously failed test is passed. 


New Comment: 
I've just committed this. 


New Comment: 
Integrated in Hadoop-Hdfs-trunk-Commit #57 (See <a
href="http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk-Commit/57/"
class="external-link"
rel="nofollow">http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk-Commit/57/</a>) 


New Comment: 
Integrated in Hadoop-Hdfs-trunk #98 (See <a
href="http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk/98/"
class="external-link"
rel="nofollow">http://hudson.zones.apache.org/hudson/job/Hadoop-Hdfs-trunk/98/</a>) 


New Comment: 
No new unit tests were added because it was found with TestFileAppend3#TC7, which can act
as a regression test. 


