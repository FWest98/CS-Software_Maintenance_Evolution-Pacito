Pattern changes caused by commit: 78f3514e9592cf1f8c875b4a9610a5c86eb6d329

From: Facade-4
To:   Facade-5


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1758.txt 

commit 78f3514e9592cf1f8c875b4a9610a5c86eb6d329
Author: Julien Vermillard <jvermillard@apache.org>

    Fix for DIRMINA-719



==================================
 Issue DIRMINA-719 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-719] Serial Filter Chain Broken For Outbound Data
-----------------

-----------------
Summary: Serial Filter Chain Broken For Outbound Data
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Thu, 18 Jun 2009 13:40:30 +0000
-----------------

-----------------
Resolved at: Tue, 18 Aug 2009 15:37:44 +0000
-----------------

-----------------
Assigned to: Julien Vermillard
-----------------

-----------------
Description: 

IoFilterAdapter-descended filter's messageSent() hook called only with 0-byte (Mina
internal indicator, I'm told) IoBuffer data, not with IoBuffer containing data actually
sent out the serial port.

Filter object looks like:
<div class="code panel"
style="border-width: 1px;"><div class="codeContent panelContent"><pre
class="code-java"><span class="code-keyword">public</span> <span
class="code-keyword">class </span>CaptureLogFilter <span
class="code-keyword">extends</span> IoFilterAdapter {...   @Override   <span
class="code-keyword">public</span> void messageReceived(NextFilter nextFilter,
IoSessionsession, <span class="code-object">Object</span> message) <span
class="code-keyword">throws</span> Exception {       log(<span
class="code-quote">"RECEIVED: "</span>, message);       <span
class="code-keyword">if</span> (nextFilter != <span class="code-keyword">null</span> )
nextFilter.messageReceived(session,message);   }   @Override   <span
class="code-keyword">public</span> void messageSent(NextFilter nextFilter, IoSession
session,WriteRequest writeRequest) <span class="code-keyword">throws</span> Exception {   
   log(<span class="code-quote">"SENT: "</span>, writeRequest.getMessage());       <span
class="code-keyword">if</span> (nextFilter != <span class="code-keyword">null</span> )
nextFilter.messageSent(session,writeRequest);   }...   <span
class="code-keyword">private</span> void log(<span class="code-object">String</span>
event, <span class="code-object">Object</span> arg) {       <span
class="code-keyword">if</span> (arg != <span class="code-keyword">null</span> &amp;&amp;
arg <span class="code-keyword">instanceof</span> IoBuffer) {           <span
class="code-object">byte</span> b[] = IoBufferUtils.asBytes((IoBuffer) arg);          
log(event + b.length + <span class="code-quote">" bytes: "</span> +
ByteUtils.toHex(b));<span class="code-comment">//            IoBuffer i =
(IoBuffer)arg;</span><span class="code-comment">//            log(<span
class="code-quote">"DBG: "</span> + event + <span class="code-quote">"pos: "</span> +
i.position() + ", lim:</span>"+i.limit());<span class="code-comment">// Previous debug was
added to confirm IoBufferUtils operation, the IoBuffer <span
class="code-quote">'arg'</span> is confirmed empty (both position &amp; limit are
0)</span>       }       <span class="code-keyword">else</span> log(event);  
}...}</pre></div></div>
And is hooked in the IoConnector set up:
<div class="code panel"
style="border-width: 1px;"><div class="codeContent panelContent"><pre class="code-java">  
<span class="code-keyword">private</span> <span class="code-keyword">final</span>
IoConnector buildIoConnector() {...       <span class="code-keyword">if</span> (
codecFilter == <span class="code-keyword">null</span> )           codecFilter = <span
class="code-keyword">new</span> ProtocolCodecFilter(createCodecFactory());...      
DefaultIoFilterChainBuilder fc = connector.getFilterChain();       <span
class="code-keyword">if</span> ( fc.contains(<span class="code-quote">"logging"</span>) )
fc.remove(<span class="code-quote">"logging"</span>);       <span
class="code-keyword">if</span> ( fc.contains(<span class="code-quote">"codec"</span>) )
fc.remove(<span class="code-quote">"codec"</span>);       fc.addLast(<span
class="code-quote">"logging"</span>, <span
class="code-keyword">new</span>CaptureLogFilter(getClass().getSimpleName()));      
fc.addLast(<span class="code-quote">"codec"</span>, codecFilter);...}</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
Opps...   pretend like <div class="code panel" style="border-width: 1px;"><div
class="codeContent panelContent"><pre class="code-java"></pre></div></div> markers in
description start  &amp; stop block-quote-like code quotes.  They are NOT part of my
code...  <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>Theory presented on list is that this is
caused by org.apache.mina.transport.serial.SerialSessionImpl in the flushWrites()
method.The logic in that method calls this.getFilterChain().fireMessageSent(req) inside a
if (buf.remaining() == 0) { ... } condition.    What it appears to lack, however, is a
this.getFilterChain().fireMessageSent(req) called when the buffer is NOT empty.This logic
seems to reflect the behaviour I am seeing in that my filter is called with the 0-byte
indicator but not the data-bearing IoBuffer. 


New Comment: 
The way MINA works make it mandatory that the MessageSent event is sent when a empty
message is received. I know it sounds a bit strange, but in any case, it won't forbid your
program to work, <b>except</b> that you are expecting to trace the message being sent.The
reason it works this way is because you can perfectly well send your response in small
chunks (for instance if you want to stream a big file to a client), thus you have no way
to know when the message has been sent.Obviously, you have to ilmplement your own
ProtocolEncoderOutput class to split your message in chunks, but it's not irrealistic to
think that it could be done somewhere (in fact, we at Apache Directory are thinking about
doing so for images).Now, you are not totally lost in the desert without water and solar
cream : a workaround for you would be to store the sent message in the session (as an
attribute), so when you receive the MessageSent event, you just have to grab it from the
session attributes, print it and discard it.Hope it helps. 


New Comment: 
It appears the fix is just a matter of a one line change &#8211; I currently <br/>lack the
facilities to test that theory.We'll see who's priority pile moves quicker.  <img
class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.png"
height="16" width="16" align="absmiddle" alt="" border="0"/>    This one only affects
<br/>my debug logging, so it's fairly low priority.The problem is NOT the 0-byte IoBuffer
calls at all.   Those are Mina <br/>internals and I don't need to mess with them; I won't
depend on them for <br/>the same reason.The problem is the data-bearing (ie non-0-byte)
IoBuffer calls that <br/><b>happen</b> on a socket connection <b>DO NOT HAPPEN</b> on a
serial connection.Yes, I could hack around this problem but I would prefer not
to.Especially since that's how it works for socket connections.    My hack <br/>would have
to take transport mechanism into account, and one of the <br/>strengths of Mina is
abstracting that. 


