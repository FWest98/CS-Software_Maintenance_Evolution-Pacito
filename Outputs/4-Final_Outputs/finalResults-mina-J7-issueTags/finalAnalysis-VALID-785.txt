Pattern changes caused by commit: cceb46d33f5def88a6ac80a98544d34ae781e943

From: Adapter-2
To:   Adapter-4

From: Facade-6
To:   Facade-7

From: Flyweight-5
To:   Flyweight-6

From: Proxy-1
To:   Proxy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-785.txt 

commit cceb46d33f5def88a6ac80a98544d34ae781e943
Author: Trustin Lee <trustin@apache.org>

    Resolved issue: DIRMINA-443 (SocketConnection cannot be manually closed (for v2.X))
    * Fixed a possible FD leak or unnotified ConnectFutures when close() is called



==================================
 Issue DIRMINA-443 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-443] SocketConnection cannot be manually closed (for v2.X)
-----------------

-----------------
Summary: SocketConnection cannot be manually closed (for v2.X)
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Thu, 20 Sep 2007 14:57:15 +0000
-----------------

-----------------
Resolved at: Thu, 27 Sep 2007 14:37:18 +0000
-----------------

-----------------
Assigned to: Maarten Bosteels
-----------------

-----------------
Description: 

The SocketConnection cannot be closed. Currently it will wait a certain amount of timeout
as specified by the worker timeout to shut down the connection. This can result in OOM and
hanging clients until the timeouts occur. Mina should allow the SocketConnection to be
closed manually if the connection is known to be completed. 
 

-----------------

-----------------
Comments: 

New Comment: 
Patch attached allows SocketConnector to be closed. 


New Comment: 
Thanks for the patch.<br/>I applied it to the trunk.Should we also apply this to
SerialConnector, DatagramConnector and VmPipeConnector ? 


New Comment: 
Yes...I think a similar patch would be applicable to those connectors as well. 


New Comment: 
Could you explain a little bit more in detail about this issue?  I simply didn't get why
the current implementation can cause OOM.  Is it because you create too many
SocketConnectors, instead of using a shared instance? 


New Comment: 
The patch can lead to unexpected termination of I/O threads even while there's a
connection attempt in progress.  Why not just setting the timeout to 0?  It will make the
thread to exit immediately when there's no connection to handle. 


New Comment: 
How would it lead to an abnormal termination?  The Worker threads check for the closeFlag
and they exit, almost no different from the timeout = 0.I guess the close() could probably
do a timeout = 0 which would do the same thing <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/wink.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
According to the applied patch:            for (; <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/wink.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> {<br/>                try {<br/>         
          int nKeys = selector.select(1000);                    if (closeFlag){<br/>      
                 synchronized (lock) {                            worker = null;          
                 break;                        }                    }it just breaks out of
the loop, so any connection attempts in progress will not complete at all, possibly
leading to FD leak.  Anyways, it seems like setting the timeout value to 0 do what you
want.  What do you think about just adding more explanation of the behavior when timeout
is 0, instead of adding a new method? <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>Moreover, We are going to implement a
global pool of I/O threads so you won't even need to worry about such kind of leak in 2.0. 


New Comment: 
Trustin, my apologies., it seems that I was too quick with applying the patch. <br/>Will
you revert it, or should I do it ? 


New Comment: 
No need to apologize.  It's trunk anyway! <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/biggrin.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>Let's wait for Jeff's comment in case we
are missing something. 


New Comment: 
Well...the close() is shutting everything down, so we really don't want more connections
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/>  Isn't setting a timeout to 0
also a breakout of the loop in a similar fashion as the closeFlag? <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/wink.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>However, I agree, setting the timeout to 0
will do what is needed here...but setting that seems counter intuitive.  I think having a
close() method (which can set the timeout to zero) makes sense since it signifies you are
shutting it down manually.  If not that, then it should be heavily documented in the wiki
since this question (how to immediately shutdown a SocketConnection) seems to be a
frequently asked question on the lists.  I say this because it took me a good few hours of
going through the Mina code to figure out setting the timeout to 0 shuts it all down <img
class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/> I'm just being nit-picky <img
class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/>May I submit a new patch to
undo the first patch and have close() just set the timeout to 0, or a patch just to back
it out all together and we live with the timeout=0? 


New Comment: 
I agree that it makes sense to have a close() method 


New Comment: 
"Well...the close() is shutting everything down, so we really don't want more connections
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/> Isn't setting a timeout to 0
also a breakout of the loop in a similar fashion as the closeFlag? <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/wink.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> "Not exactly.  The breakout caused by
timeout makes sure if the number of in-progress connection attempt is 0, so there's no FD
leak.  However, just breaking out of the loop not checking the number can cause a FD leak
or related ConnectFuture will not be notified at all.  And the worker will be executed
again when there's any additional connection request.Once again, we will get rid of the
timeout property and maintain a pool of I/O workers (including NioProcessor and workers in
SocketAcceptor and SocketConnector), so please consider the timeout property as a
temporary workaround for a performance issue.  Therefore, even if we decide to retain the
close() method, it will go away when the first milestone of MINA 2 is released.Anyways,
please feel free to provide us a new patch that modifies the behavior of the close()
method. 


New Comment: 
Ok...I see the code for the timeout and thus the differences...sorry about that...I should
have checked earlier.Patch attached...but if this will truly go away, then no worries.
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
Fixes the close() to use the timeout. 


New Comment: 
I checked in the patch.  Please confirm and close. 


