Pattern changes caused by commit: 89734ea88700b181551be5c77de90ee95a016144

From: Facade-4
To:   Facade-2

From: Proxy-0
To:   Proxy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1434.txt 

commit 89734ea88700b181551be5c77de90ee95a016144
Author: Julien Vermillard <jvermillard@apache.org>

    Applying Geoff Cadien patch for fixing destruction of APR sockets. See DIRMINA-584



==================================
 Issue DIRMINA-584 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-584] Using apr-transport crashes jvm on Linux
-----------------

-----------------
Summary: Using apr-transport crashes jvm on Linux
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 14 May 2008 00:35:15 +0000
-----------------

-----------------
Resolved at: Fri, 6 Jun 2008 08:25:40 +0000
-----------------

-----------------
Assigned to: Julien Vermillard
-----------------

-----------------
Description: 

To reproduce you can simply run the EchoServer from mina-example and use AprIoAcceptor
instead of NioAcceptor.  I used the EchoClient from Julien Vermillard's sandbox here: <a
href="https://svn.apache.org/repos/asf/mina/sandbox/jvermillard/" class="external-link"
rel="nofollow">https://svn.apache.org/repos/asf/mina/sandbox/jvermillard/</a> and used 20
or 30 concurrent connections.

AprIoProcessor.destroy() is called multiple times when an
exception is generated in AbstractPollingIoProcessor (RST, etc.) and either epoll or apr
doesn't like to remove a closed fd from the pollset.  I believe that destroy is called
twice because AprIoProcessor.state() returns SessionState.OPEN when the native fd is &gt;
0.  I don't believe once open it will ever be 0 again.

I was able to fix the problem by
explicitly settion AprSession.descriptor to 0 after the socket was closed although I'm not
sure this is the correct solution.
 

-----------------

-----------------
Comments: 

New Comment: 
This is not a blocker because you can always revert back to NIO transport.  Thank you for
the detailed report.  Let me fix it ASAP. 


New Comment: 
I kept the descriptor property final.  Instead, I changed
AprIoProcessor.destroy(AprSession) to return immediately when no session with the
descriptor ID is found.  Please confirm if my fix works for you. 


New Comment: 
Yes the fix seems to work.  Thanks for looking at it so quickly.One note,  this actually
was a blocker for me.  I need to deploy on FreeBSD and the NIO implementation still uses
poll(2) instead of kqueue which causes a serious degradation in performance.   APR uses
kqueue.  Thanks again! 


New Comment: 
Aha,, thanks for the information.  That makes sense.  Glad to hear that it helped! <img
class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/smile.png"
height="16" width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
I may have closed this issue too soon <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/sad.png" height="16" width="16"
align="absmiddle" alt="" border="0"/>.  While Trustin's patch fixed the jvm crash, there
still is another problem.  With the destroy method being called twice the session count
(nSessions) in AbstractPollingIoProcessor will be incorrect.  I noticed Worker threads
that never exited because nSessions &lt; 0 and the Worker thread only checks for nSessions
== 0.  I assume it is also possible for the Worker thread to exit (nSessions == 0) when
there are still sessions to be processed. 


New Comment: 
Just for completeness here is a small patch that manually sets the file descriptor in
AprSession to 0 when it is destroyed.  It's probably not the best solution but it does
work. Index:
src/main/java/org/apache/mina/transport/socket/apr/AprIoProcessor.java<br/>===================================================================<br/>&#8212;
src/main/java/org/apache/mina/transport/socket/apr/AprIoProcessor.java      (revision
656872)<br/>+++ src/main/java/org/apache/mina/transport/socket/apr/AprIoProcessor.java    
 (working copy)<br/>@@ -43,7 +43,6 @@<ul>	<li>@author The Apache MINA Project
(dev@mina.apache.org)</li>	<li>@version $Rev$, $Date$<br/>  */<br/>-<br/> public final
class AprIoProcessor extends AbstractPollingIoProcessor&lt;AprSession&gt; {     private
static final int POLLSET_SIZE = 1024;@@ -239,6 +238,11 @@             }         } finally
{<br/>             ret = Socket.close(session.getDescriptor());<br/>+            // I
think socket needs to be destroyed.  When a connection is accepted<br/>+            // a
pool is allocated for the socket and I don't see how else it will<br/>+            // get
destroyed.<br/>+            Socket.destroy(session.getDescriptor());<br/>+           
session.setDescriptor(0);<br/>             if (ret != Status.APR_SUCCESS) {               
 throwException(ret);             }</li></ul>Index:
src/main/java/org/apache/mina/transport/socket/apr/AprSession.java<br/>===================================================================<br/>&#8212;
src/main/java/org/apache/mina/transport/socket/apr/AprSession.java	(revision
656872)<br/>+++
src/main/java/org/apache/mina/transport/socket/apr/AprSession.java	(working copy)<br/>@@
-38,7 +38,7 @@<ul>	<li>@version $Rev$, $Date$<br/>  */<br/> public abstract class
AprSession extends AbstractIoSession {-    private final long descriptor;+    private 
long descriptor;      private final IoService service;     private final
IoProcessor&lt;AprSession&gt; processor;@@ -89,6 +89,10 @@         return descriptor;    
}</li></ul>+    void setDescriptor(long desc) {+        this.descriptor = desc;+    }+   
<br/>     @Override<br/>     protected IoProcessor&lt;AprSession&gt; getProcessor() {<br/>
        return processor; 


New Comment: 
Thanks, pushed the patch 


