Pattern changes caused by commit: c004d60944625df21a47cbaab027c3d730eb491f

From: Adapter-2
To:   Adapter-4

From: Facade-2
To:   Facade-5

From: Flyweight-3
To:   Flyweight-5


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-929.txt 

commit c004d60944625df21a47cbaab027c3d730eb491f
Author: Trustin Lee <trustin@apache.org>

    Resolved issue: DIRMINA-428 (MessagePriorities)
    * Renamed IoSessionAttributeMapFactory to IoSessionDataStructureFactory
    ** IoSessionDataStructure has additional method 'getWriteRequestQueue' which allows a user to provide his or her own queue implementation, possibly prioritized queue.



==================================
 Issue DIRMINA-428 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-428] Message priorities
-----------------

-----------------
Summary: Message priorities
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 29 Aug 2007 03:50:46 +0000
-----------------

-----------------
Resolved at: Tue, 6 Nov 2007 06:26:36 +0000
-----------------

-----------------
Assigned to: Trustin Lee
-----------------

-----------------
Description: 

I would like MINA to support sending
messages with different priorities, so
that higher-priority messages will get
sent out first (in the order that they
were added to the queue, if they have
the same priority)

Here's how I think
this could be implemented:
<ul
class="alternate"
type="square">	<li>define different
priorities; I suggest using numeric
constants, such as LOWEST=0, LOW=25,
NORMAL=50, HIGH=75, HIGHEST=100,
allowing any custom values from 0 to
100</li>	<li>add a priority field to
WriteRequest, and implement Comparable
using it</li>	<li>add a write(Object
message, int priority) method to
IoSession</li>	<li>make write(message)
call write(message,
NORMAL)</li>	<li>make the
writeRequestQueue in the session
implementations a priority queue, but
one that preserves the original order of
"equal" elements</li>	<li>ensure that a
higher priority message won't interrupt
sending out another message (if
pending)</li>	<li>if desired, write an
IoFilter that can manipulate the
priority</li></ul> 
