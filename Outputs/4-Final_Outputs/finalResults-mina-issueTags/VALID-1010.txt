Pattern changes caused by commit: d79b207fbdbf9e5fd3c89dacca808e240ba4f585

From: Adapter-4
To:   Adapter-2

From: Facade-5
To:   Facade-4

From: Flyweight-5
To:   Flyweight-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1010.txt 

commit d79b207fbdbf9e5fd3c89dacca808e240ba4f585
Author: Trustin Lee <trustin@apache.org>

    * Added IoBuffer.minimumCapacity(...)
    * Added IoBuffer.shrink()
    * Fixed issue: DIRMINA-471 (Reduce SSL buffers overhead)
    ** The change uses the new feature of 2.0 so it won't be backported to 1.x.



==================================
 Issue DIRMINA-471 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-471] Reduce SSL buffers overhead
-----------------

-----------------
Summary: Reduce SSL buffers overhead
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 7 Nov 2007 18:37:00 +0000
-----------------

-----------------
Resolved at: Tue, 13 Nov 2007 03:40:04 +0000
-----------------

-----------------
Assigned to: Trustin Lee
-----------------

-----------------
Description: 

There is a significant overhead for SSL
connections.<br/>Investigation shows
that every SSL connection requires an
SSLHandler, which contains 3
buffers:
<ul class="alternate"
type="square">	<li>Two buffers for
encrypted inbound and outbound packets,
respectively.</li>	<li>One buffer for
decrypted application data</li></ul>
The
buffer sizes are computed as
follows:<br/>Packet buffer size = the
current size of the largest SSL/TLS
packet that is expected when using this
session
(SSLSession.packetBufferSize())<br/>Application
buffer size = 2 x packet buffer size

In
Sun JSSE the
SSLSession.packetBufferSize() equals to
16K, which implies a total of 64K SSL
buffer space per connection. For 10K
active this means that 640MB of memory
is required just for SSL buffers.

Such
overhead really limits the number of
concurrent connections an application
can support. 

A possible resolution is
to dynamically re-adjusting the buffer
capacity, and allowing to configure the
initial buffer sizes.
 
