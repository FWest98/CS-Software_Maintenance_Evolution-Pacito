Pattern changes caused by commit: 912385eb3402a82ce69ee2c994e5b11c4ddffca1

From: Facade-3
To:   Facade-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1501.txt 

commit 912385eb3402a82ce69ee2c994e5b11c4ddffca1
Author: Edouard De Oliveira <edeoliveira@apache.org>

    New IoFilter that implements DIRMINA-519



==================================
 Issue DIRMINA-519 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-519] BufferingFilter
-----------------

-----------------
Summary: BufferingFilter
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Thu, 24 Jan 2008 09:58:30 +0000
-----------------

-----------------
Resolved at: Sun, 10 Aug 2008 20:56:25 +0000
-----------------

-----------------
Assigned to: Edouard De Oliveira
-----------------

-----------------
Description: 

As JDK provides BufferedOutputStream, we could provide BufferingFilteer which does the
same thing, which buffers encoded data and flushes it out when the buffer becomes full or
the flush operation is explicitly requested.  This kind of filter is sometimes useful when
a session is generating very small messages too frequently and consequently generates
unnecessary traffic overhead.
 

-----------------

-----------------
Comments: 

New Comment: 
This file contains a micro benchmark demonstrating the benefits of the
LazyInitializedCacheMap commited to trunk.<br/>Only tested under winXP on a 2way cpu under
jdk1.6. The recent improvements on synchronized and the changes on the jmm seem to have
affected the gap between HashMap and ConcurrentHashMap. <br/>But due to the cost of an
IoBuffer allocation and the specific use of this buffering filter, on my configuration it
seems accurate to use this special map.Need other testers to confirm it. 


New Comment: 
These are my results on an OS X machine running Java 1.6.0_05CPU = 2.4GHz Core 2 DuoMap
type:           ConcurrentHashMap<br/>Runtime:            60000<br/>Number of threads: 
3<br/>Remove probability: 0.1<br/>Ops per second:     17204.25Map type:          
HashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove probability:
0.1<br/>Ops per second:     107432.13333333333Map type:          
LazyInitializedCacheMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:     55034.433333333334Hope this helps.... 


New Comment: 
Following are my tests results on a 2.1GHz Core 2 Duo. It seems that under JDK1.5 on XP
the LazyInitializedCacheMap performs significantly better.<br/>Mark could you do a jdk1.5
test on your machine please ?My tests results:WinXP 1.5.0_11-b03 options
-Xmx512mStarted...<br/>Map type:           LazyInitializedCacheMap<br/>Runtime:           
60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:    
466187.36666666664Started...<br/>Map type:           HashMap<br/>Runtime:           
60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:    
165805.88333333333Started...<br/>Map type:           ConcurrentHashMap<br/>Runtime:       
    60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:    
144387.43333333332------------------------------------------------<br/>WinXP 1.6.0_01-b06
options -Xmx512m -serverStarted...<br/>Map type:          
LazyInitializedCacheMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:     632299.45Started...<br/>Map type:          
HashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove probability:
0.1<br/>Ops per second:     534555.5666666667Started...<br/>Map type:          
ConcurrentHashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:    
177202.66666666666------------------------------------------------<br/>WinXP 1.6.0_01-b06
options -Xmx512mStarted...<br/>Map type:           LazyInitializedCacheMap<br/>Runtime:   
        60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:   
 494747.06666666665Started...<br/>Map type:           HashMap<br/>Runtime:           
60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:    
412600.9666666667Started...<br/>Map type:           ConcurrentHashMap<br/>Runtime:        
   60000<br/>Number of threads:  3<br/>Remove probability: 0.1<br/>Ops per second:    
150455.65------------------------------------------------<br/>Allocating a 32k buffer
instead of a 8k one<br/>WinXP 1.6.0_01-b06 options -Xmx512m -serverStarted...<br/>Map
type:           LazyInitializedCacheMap<br/>Runtime:            60000<br/>Number of
threads:  3<br/>Remove probability: 0.1<br/>Ops per second:     105764.7Started...<br/>Map
type:           HashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:    
100448.58333333333------------------------------------------------<br/>Allocating a 32k
buffer instead of a 8k one<br/>WinXP 1.5.0_11-b03 options -Xmx512mStarted...<br/>Map type:
          LazyInitializedCacheMap<br/>Runtime:            60000<br/>Number of threads: 
3<br/>Remove probability: 0.1<br/>Ops per second:     141899.01666666666Started...<br/>Map
type:           HashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:     90772.15 


New Comment: 
Linux JDK1.6.0_1 ,  Athlon64 X2  4400+Started...<br/>Map type:          
LazyInitializedCacheMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:     400222.81666666665Started...<br/>Map type:       
   HashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove probability:
0.1<br/>Ops per second:     380242.18333333335Started...<br/>Map type:          
ConcurrentHashMap<br/>Runtime:            60000<br/>Number of threads:  3<br/>Remove
probability: 0.1<br/>Ops per second:     147320.55 


