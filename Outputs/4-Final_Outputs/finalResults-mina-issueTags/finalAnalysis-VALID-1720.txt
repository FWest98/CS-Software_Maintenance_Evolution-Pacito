Pattern changes caused by commit: ddcbeadcc2693be05203e358d1d737a9ac61f5d0

From: Proxy-1
To:   Proxy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1720.txt 

commit ddcbeadcc2693be05203e358d1d737a9ac61f5d0
Author: Edouard De Oliveira <edeoliveira@apache.org>

    Fix for DIRMINA-709



==================================
 Issue DIRMINA-709 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-709] PENDING session is removed and added endlessly  -- garbage allocation and high CPU usage problem
-----------------

-----------------
Summary: PENDING session is removed and added endlessly  -- garbage allocation and high CPU usage problem
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Tue, 5 May 2009 11:16:32 +0000
-----------------

-----------------
Resolved at: Sun, 14 Jun 2009 20:42:22 +0000
-----------------

-----------------
Assigned to: Edouard De Oliveira
-----------------

-----------------
Description: 

(This problem was discussed in mail lists, I will copy it here).

Seems I have found a
bug with IoSession - I can see that a "PREPARING" session is not removed correctly from
queue.

When some session is in PREPARING state, it is removed from "removingSessions"
queue but right after that it is added to this queue again! So this session is added to
the queue and removed from it until forever.<br/>As a result, this give us significant
garbage allocation, so CPU spends most of time in garbage collector (I can see this is
JConsole).

I see comments there in AbstractPollingIoProcessor class:

private int
remove() {<br/>...<br/>    case PREPARING:<br/>                // Retry later if session
is not yet fully initialized.<br/>                // (In case that Session.close() is
called before      addSession() is processed)<br/>               
scheduleRemove(session);<br/>                return removedSessions;<br/>...<br/>}

I have
added logging to this code, and I can see that the SAME session is removed and added again
and again.

Can somebody explain this logic please? Why don't we remove the PENDING 
session? Or maybe is there a workaround for this.

Sorry, I can not provide a test for
this issue, but it is reproduced almost every day at out production servers under some
load. Maybe, you can reproduce it by adding a delay in addSession() and then closing the
session during this delay.
 

-----------------

-----------------
Comments: 

New Comment: 
If I do a simple workaround - call removeNow() for such sessions - can something go wrong
this way? 


New Comment: 
Seems that my patch is working - I can see that several pending sessions were removed
during last 3 days on our servers.<br/>I hope that it does not have impact on some other
functions of mina <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>Anyway, it would be great to see comments
from mina creators! 


New Comment: 
My patch is the following - I have changed AbstractPollingIoProcessor.remove() method this
way:switch (state) {<br/>            case OPEN:<br/>            case PREPARING:<br/>      
         if (removeNow(session)) {                    removedSessions ++;                }
               break;<br/>            case CLOSED:<br/>                // Skip if channel
is already closed<br/>                break;I am not sure whether the problem was for
every PREPARING session or not, but the patch seems to work. 


New Comment: 
The only side-effect I see is that sometimes after remove() method there is an
exception:04/05/2009 14:25:18| WARN  |
org.apache.mina.util.DefaultExceptionMonitor.exceptionCaught(): Unexpected
exception.<br/>java.nio.channels.ClosedChannelException<br/>        at
java.nio.channels.spi.AbstractSelectableChannel.configureBlocking(AbstractSelectableChannel.java:252)<br/>
       at
org.apache.mina.transport.socket.nio.NioProcessor.init(NioProcessor.java:100)<br/>       
at org.apache.mina.transport.socket.nio.NioProcessor.init(NioProcessor.java:42)<br/>      
 at
org.apache.mina.core.polling.AbstractPollingIoProcessor.addNow(AbstractPollingIoProcessor.java:417)<br/>
       at
org.apache.mina.core.polling.AbstractPollingIoProcessor.add(AbstractPollingIoProcessor.java:403)<br/>
       at
org.apache.mina.core.polling.AbstractPollingIoProcessor.access$200(AbstractPollingIoProcessor.java:59)<br/>
       at
org.apache.mina.core.polling.AbstractPollingIoProcessor$Processor.run(AbstractPollingIoProcessor.java:878)<br/>
       at
org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:65)<br/>      
 at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)<br/>  
     at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)<br/>      
 at java.lang.Thread.run(Thread.java:619)Maybe this is somehow related to my patch, I do
not know. Maybe we could think at a better patch. 


New Comment: 
Our production servers are working with this fix during ~1 month, everything seems to
work.<br/>The only side-effect is mentioned in my comment above - sometimes, rarely, I can
see this warning in log files, but everything is working.Forgot to say that I disabled
MdcInjectionFilterTest when building mina with the patch because this test failed.Are
there any plans to review this fix and include it into the next build - maybe M7 ? 


New Comment: 
Now that M6 is out, let's fix this one for M7 


New Comment: 
Hi i commited a slightly modified version of the fix that shouldfix the side effect you
are pointing at<br/>please let me know if it is indeed fixed 


