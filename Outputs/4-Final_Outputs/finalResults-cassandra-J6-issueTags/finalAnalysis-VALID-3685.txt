Pattern changes caused by commit: 5e8361bbcb142e06b46bd72263b0826acc5b390f

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3685.txt 

commit 5e8361bbcb142e06b46bd72263b0826acc5b390f
Author: Brandon Williams <brandonwilliams@apache.org>

    Pig uses schema information to cast to/from native types.
    Patch by Jeremy Hanna and brandonwilliams, reviewed by brandonwilliams
    for CASSANDRA-2387



==================================
 Issue CASSANDRA-2387 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2387] Make it possible for pig to understand packed data
-----------------

-----------------
Summary: Make it possible for pig to understand packed data
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 25 Mar 2011 18:33:33 +0000
-----------------

-----------------
Resolved at: Mon, 4 Apr 2011 21:53:44 +0000
-----------------

-----------------
Assigned to: Jeremy Hanna
-----------------

-----------------
Description: 

Packed values are throwing off pig. This ticket is to make it so pig can interpret packed
values. Originally we thought we could just use a loadcaster.  However, the only way we
know how we can do it now is to get the schema through thrift and essentially perform the
function of the loadcaster in the getNext method.
 

-----------------

-----------------
Comments: 

New Comment: 
Adding a patch with a basic loadstorecaster, wiring into the loadstorefunc, and some
adjustments to ByteBufferUtil to help with the loadcaster methods. 


New Comment: 
This is not really because of validators, but the format the data is stored in.  If you're
using the cli to insert data, it automatically inspects the CF and discovers the
validator, then packs the data accordingly. 


New Comment: 
The beginnings of getting it to work with packed data. Added a call to get the schema
through thrift when the pig load is performed. Then it uses the udf context to get the
schema when it needs to in columnToTuple (as part of getNext).With this
patch:<ul>	<li>only column values of type UTF8, int, and long are converted</li>	<li>the
comparator class for column names is not currently converted</li>	<li>super columns'
subcolumns do not deal with packed data</li></ul> 


New Comment: 
v2 builds upon this by utilizing AbstractType to handle any type, also handles column
names the same way, and only deserializes the cfdef once per row instead of for every
column.  Still has some string roundtrip casting lameness until <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2403" title="Backport
AbstractType.compose from trunk" class="issue-link"
data-issue-key="CASSANDRA-2403"><del>CASSANDRA-2403</del></a> is resolved.  Also handles
serialization when storing. 


New Comment: 
Made a FBUtilities method to getInstance - essentially for AbstractTypes - getting the
singleton.  Still has some issues, but took care of the construct errors I was getting
when it was using FBUtilities.construct in CassandraStorage. 


New Comment: 
Working version of v2/v3 and folding in the compose method that was added to AbstractType
as part of <a href="https://issues.apache.org/jira/browse/CASSANDRA-2262" title="use
o.a.c.marshal.*Type for CQL" class="issue-link"
data-issue-key="CASSANDRA-2262"><del>CASSANDRA-2262</del></a> which makes <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2403" title="Backport
AbstractType.compose from trunk" class="issue-link"
data-issue-key="CASSANDRA-2403"><del>CASSANDRA-2403</del></a> done as part of this.Still
have to test writing which will be tonight probably.Also Brandon had some ideas about
optimization. 


New Comment: 
Updated v4 to do the right thing for each AbstractType when writing back to Cassandra. 
Added a decompose method to AbsractTypes to be symmetrical to compose. 


New Comment: 
v6 handles returning a byte[] instead of a BB when there is a BytesType. 


New Comment: 
Fixing the write for BytesType. Also used BBU.getArray because it was doing funky array
overwrite things otherwise. 


New Comment: 
Committed with a brace format change in BytesType, and a cast to Object added in
FBU.getInstance to avoid a warning. 


