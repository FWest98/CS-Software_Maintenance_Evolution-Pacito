Pattern changes caused by commit: e172a9b735ef8f99cf45ba86c9850943829d14fb

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7432.txt 

commit e172a9b735ef8f99cf45ba86c9850943829d14fb
Author: Pavel Yaskevich <xedin@apache.org>

    small fix in permission checking in ClientState, related to CASSANDRA-4490



==================================
 Issue CASSANDRA-4490 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4490] Improve IAuthority interface by introducing fine-grained access permissions and grant/revoke commands.
-----------------

-----------------
Summary: Improve IAuthority interface by introducing fine-grained access permissions and grant/revoke commands.
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sat, 4 Aug 2012 23:11:16 +0000
-----------------

-----------------
Resolved at: Mon, 10 Sep 2012 15:31:52 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 

In order to improve IAuthority interface I propose to add the following new permissions:
USE, SELECT, CREATE, ALTER, DROP, UPDATE, DELETE, ALL, NONE. And the following new
commands to the CQL 3.0 which would give users possibility (with appropriate
implementation) to dynamically change user's rights to access system objects:

GRANT 
&lt;permission&gt; ON &lt;resource&gt; TO &lt;user&gt; <span class="error">&#91;WITH GRANT
OPTION&#93;</span>;<br/>REVOKE &lt;permission&gt; ON &lt;resource&gt; FROM
&lt;user_name&gt;;<br/>LIST GRANTS FOR &lt;user&gt;; // Not 'SHOW' because it's reserved
for cqlsh for commands like 'show cluster'

where &lt;resource&gt; is Keyspace or
ColumnFamily (initially, but extendable to indexes or configration options in the future),
and &lt;permission&gt; is listed above.

To keep the system backward compatible with old
authorization interface implementations Permission class would include the mappings of the
new to old <br/>permissions:

READ  -&gt; USE, SELECT<br/>WRITE -&gt; USE, CREATE, ALTER,
DROP, UPDATE, DELETE
 

-----------------

-----------------
Comments: 

New Comment: 
If we can do this without breaking existing IAuthority implementations, this is probably
safe to do in 1.1.x. 


New Comment: 
Patch has two incompatible parts:<ul>	<li>IAuthority is now abstract class instead of
interface. Implementation needs to change "implements" to
"extends".</li>	<li>Permission.ALL/NONE are now part of enum instead of static EnumSet. If
those are used, then they need to be changed to FULL_ACCESS/NO_ACCESS.</li></ul>I only
tested with SimpleAuth example, but with above modification, it worked as
expected.<br/>Little problem I had is that cqlsh disconnects from C* when
NotImplementedException is thrown.Also note that, it seems that it is implementation's
responsibility to who can grant/revoke/list permission, and because
IAuthority#revoke/listPermission don't know which user is calling, I assume anyone could
revoke/list permission? 


New Comment: 
v2 introduces IAuthority2 interface with extends the original IAuthority and adds
IAuthorityContainer to be able to handle dynamic commands without requiring any changes to
existing user implementations, plus it includes improvements to the permission checking. 


New Comment: 
updated v2 with ALL, NONE back as EnumSet for compatibility. Also:<ul class="alternate"
type="square">	<li>FULL_ACCESS, NO_ACCESS permissions are replacing ALL,
NONE;</li>	<li>REVOKE command now supportes revoker arguments which points to the user
executing revoke command.</li></ul> 


New Comment: 
Overall looks good. SimpleAuth works compatible way without modification.I think using ALL
in GRANT/REVOKE is more SQL'ish compare to using FULL_ACCESS, so I suggest converting
keyword ALL to internal Permission.FULL_ACCESS when parsing. Attached patch for that. What
do you think? 


New Comment: 
I think that could be misleading to the users as in LIST GRANTS and SELECT from
permissions they would still see FULL_ACCESS/NO_ACCESS, don't know if that is worth the
saved symbols. 


New Comment: 
Hmm, if LIST GRANTS command is expected to return list of Permission, then I think you
should change method signature of listPermissions to return List&lt;Permission&gt; or some
other Collection&lt;Permission&gt;. It would describe API more precisely. 


New Comment: 
It's not only permission but rather resource, permission and grant_option for now, but
it's not final list of fields as it depends on IAuthority implementation. 


New Comment: 
Alright, then +1 on v2. 


New Comment: 
Committed. 


