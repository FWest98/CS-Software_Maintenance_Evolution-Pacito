Pattern changes caused by commit: 43a472e13a38e4cd0420d7fb668a70464fa31ada

From: Flyweight-1
To:   Flyweight-3

From: Mediator-1
To:   Mediator-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6628.txt 

commit 43a472e13a38e4cd0420d7fb668a70464fa31ada
Author: Jonathan Ellis <jbellis@apache.org>

    average a reduced liveRatio estimate with the previous one
    patch by Daniel Doubleday; reviewed by jbellis for CASSANDRA-4065



==================================
 Issue CASSANDRA-4065 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4065] Bogus MemoryMeter liveRatio calculations
-----------------

-----------------
Summary: Bogus MemoryMeter liveRatio calculations
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 20 Mar 2012 08:39:11 +0000
-----------------

-----------------
Resolved at: Wed, 18 Apr 2012 23:14:34 +0000
-----------------

-----------------
Assigned to: Daniel Doubleday
-----------------

-----------------
Description: 

I get strange cfs.liveRatios.

A couple of mem meter runs seem to calculate bogus
results: 
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>Tue 09:14:48 dd@blnrzh045:~$ grep 'setting
live ratio to maximum of 64 instead of' /var/log/cassandra/system.log WARN [MemoryMeter:1]
2012-03-20 08:08:07,253 Memtable.java (line 193) setting live ratio to maximum of 64
instead of Infinity WARN [MemoryMeter:1] 2012-03-20 08:08:09,160 Memtable.java (line 193)
setting live ratio to maximum of 64 instead of Infinity WARN [MemoryMeter:1] 2012-03-20
08:08:13,274 Memtable.java (line 193) setting live ratio to maximum of 64 instead of
Infinity WARN [MemoryMeter:1] 2012-03-20 08:08:22,032 Memtable.java (line 193) setting
live ratio to maximum of 64 instead of Infinity WARN [MemoryMeter:1] 2012-03-20
08:12:41,057 Memtable.java (line 193) setting live ratio to maximum of 64 instead of
67.11787351054079 WARN [MemoryMeter:1] 2012-03-20 08:13:50,877 Memtable.java (line 193)
setting live ratio to maximum of 64 instead of 112.58547951925435 WARN [MemoryMeter:1]
2012-03-20 08:15:29,021 Memtable.java (line 193) setting live ratio to maximum of 64
instead of 193.36945063589877 WARN [MemoryMeter:1] 2012-03-20 08:17:50,716 Memtable.java
(line 193) setting live ratio to maximum of 64 instead of
348.45008340969434</pre></div></div>
Because meter runs never decrease liveRatio in
Memtable (Which seems strange to me. If past calcs should be included for any reason
wouldn't averaging make more sense?):
<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>cfs.liveRatio =
Math.max(cfs.liveRatio, newRatio);</pre></div></div>
Memtables are flushed every couple of
secs:
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>ColumnFamilyStore.java (line 712) Enqueuing
flush of Memtable-BlobStore@935814661(1874540/149963200 serialized/live bytes, 202
ops)</pre></div></div>
Even though a saner liveRatio has been calculated after the bogus
runs:
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>INFO [MemoryMeter:1] 2012-03-20 08:19:55,934
Memtable.java (line 198) CFS(Keyspace='SmeetBlob', ColumnFamily='BlobStore')    liveRatio
is 64.0 (just-counted was 2.97165811895841).  calculation took 124ms for 58
columns</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
<blockquote>meter runs never decrease liveRatio in Memtable, which seems strange to me. If
past calcs should be included for any reason wouldn't averaging make more
sense?</blockquote>I'm open to ways to improve this, but the idea is that the penalty for
overestimating how big the memtable is (frequent flushes) is less severe than the penalty
for underestimating (running out of memory and dying). 


New Comment: 
I wonder if we could use some kind of constantly-updated estimate instead of scanning the
whole memtable periodically... 


New Comment: 
Maybe a simple solution would suffice: Don't use jamm but do some simplified estimation as
estimate_size = $raw_size + $row_count * ROW_OVERHEAD + $column_count * COL_OVERHEADSince
we know the used data structures ... and to keep it easy use 64b overhead since this will
be the usual case anyway. 


New Comment: 
That's probably possible in theory, but there isn't a fixed-size overhead for structures
like CLHM. 


New Comment: 
<blockquote>That's probably possible in theory, but there isn't a fixed-size overhead for
structures like CLHM.</blockquote>Well yes - I though of an approximation.But maybe even
easier (still conservative but able to heal):<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>if (newRatio
&gt; cfs.liveRatio) {    cfs.liveRatio = newRatio;} else {    cfs.liveRatio =
(cfs.liveRatio + newRatio) / 2.0;}</pre></div></div> 


