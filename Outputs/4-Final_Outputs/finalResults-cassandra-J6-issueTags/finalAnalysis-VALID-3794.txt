Pattern changes caused by commit: f5203cfef2790080bde0d83ec768e6884b276f86

From: Abstract Factory-2
To:   Abstract Factory-3

From: Factory Method-2
To:   Factory Method-3

From: Mediator-1
To:   Mediator-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3794.txt 

commit f5203cfef2790080bde0d83ec768e6884b276f86
Author: Gary Dusbabek <gdusbabek@apache.org>

    honor specific column validators in JDBC driver. patch by gdusbabek, reviewed by jbellis. CASSANDRA-2410



==================================
 Issue CASSANDRA-2410 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2410] JDBC ResultSet does not honor column value typing for the CF and uses default validator for all column value types.
-----------------

-----------------
Summary: JDBC ResultSet does not honor column value typing for the CF and uses default validator for all column value types.
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 31 Mar 2011 20:55:25 +0000
-----------------

-----------------
Resolved at: Sat, 16 Apr 2011 23:10:22 +0000
-----------------

-----------------
Assigned to: Gary Dusbabek
-----------------

-----------------
Description: 

Assume a CF declared in CQL as :
<div class="code panel" style="border-width: 1px;"><div
class="codeContent panelContent"><pre class="code-java">CREATE COLUMNFAMILY TestCF(KEY
utf8 PRIMARY KEY,description utf8, anumber <span class="code-object">int</span>)  WITH
comparator = ascii AND default_validation = <span
class="code-object">long</span>;</pre></div></div>
If the <tt>ResultSet</tt> is fetched
thusly:
<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">Statement stmt = con.createStatement();ResultSet rs =
stmt.executeQuery(query);<span class="code-object">String</span> description;<span
class="code-object">Integer</span> anumber;    <span class="code-keyword">while</span>
(rs.next())    {      description = rs.getString(1);      <span
class="code-object">System</span>.out.print(<span class="code-quote">"description :
"</span>+ description);      anumber = rs.getInt(2);      <span
class="code-object">System</span>.out.print(<span class="code-quote">"anumber     :
"</span>+ anumber);    }</pre></div></div>
It will immediately fail with a message of:

<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">org.apache.cassandra.db.marshal.MarshalException: A
<span class="code-object">long</span> is exactly 8 bytes: 16	at
org.apache.cassandra.db.marshal.LongType.getString(LongType.java:66)	at
org.apache.cassandra.cql.jdbc.TypedColumn.&lt;init&gt;(TypedColumn.java:45)	at
org.apache.cassandra.cql.jdbc.ColumnDecoder.makeCol(ColumnDecoder.java:158)	at
org.apache.cassandra.cql.jdbc.CassandraResultSet.next(CassandraResultSet.java:1073)	at
da.access.testing.TestJDBC.selectAll(TestJDBC.java:83)         ...</pre></div></div>
It
appears that the <tt>makeCol</tt> method of <tt>ColumnDecoder.java</tt> chooses NOT to use
the <tt>CfDef</tt> to look up the possible occurrence of a column? That's not right.
Right? 
<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">    <span class="code-comment">/** constructs a typed
column */</span>    <span class="code-keyword">public</span> TypedColumn makeCol(<span
class="code-object">String</span> keyspace, <span class="code-object">String</span>
columnFamily, <span class="code-object">byte</span>[] name, <span
class="code-object">byte</span>[] value)    {        CfDef cfDef = cfDefs.get(<span
class="code-object">String</span>.format(<span class="code-quote">"%s.%s"</span>,
keyspace, columnFamily));        AbstractType comparator = getComparator(keyspace,
columnFamily, Specifier.Comparator, cfDef);        AbstractType validator =
getComparator(keyspace, columnFamily, Specifier.Validator, <span
class="code-keyword">null</span>);        <span class="code-keyword">return</span> <span
class="code-keyword">new</span> TypedColumn(comparator, name, validator, value);   
}</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
I noticed a failure of org.apache.cassandra.db.RecoveryManagerTest after applying the
patch.  Chances are it was failing before--I can't see how a jdbc change would affect
that. 


New Comment: 
+1 


New Comment: 
committed. 


