Pattern changes caused by commit: eca0c4856fbc42d833aead796c82fc2939cbfd5b

From: Facade-1
To:   Facade-0

From: Flyweight-3
To:   Flyweight-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5756.txt 

commit eca0c4856fbc42d833aead796c82fc2939cbfd5b
Author: Brandon Williams <brandonwilliams@apache.org>

    Allow setting rpc_timeout via JMX.
    Patch by Ruben Terrazas, reviewed by brandonwilliams for CASSANDRA-2940



==================================
 Issue CASSANDRA-2940 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2940] Make rpc_timeout_in_ms into a jmx mbean property
-----------------

-----------------
Summary: Make rpc_timeout_in_ms into a jmx mbean property
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 22 Jul 2011 22:05:53 +0000
-----------------

-----------------
Resolved at: Thu, 5 Jan 2012 21:59:00 +0000
-----------------

-----------------
Assigned to: Ruben Terrazas
-----------------

-----------------
Description: 

When using the hadoop integration especially, experimenting with rpc_timeout_in_ms is a
pain if you have to restart every server in the cluster for it to take effect.  This would
be an improvement to make it into a jmx mbean property to set it at runtime.  The yaml
file could be updated separately so it would be persistent still.
 

-----------------

-----------------
Comments: 

New Comment: 
Index:
src/java/org/apache/cassandra/config/Config.java<br/>===================================================================<br/>&#8212;
src/java/org/apache/cassandra/config/Config.java	(revision 1224646)<br/>+++
src/java/org/apache/cassandra/config/Config.java	(working copy)<br/>@@ -23,10 +23,18
@@<br/> import org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider;<br/> import
org.apache.cassandra.cache.IRowCacheProvider;+import
java.lang.management.ManagementFactory;<br/> import java.util.List;+import
javax.management.InstanceAlreadyExistsException;<br/>+import
javax.management.MBeanRegistrationException;<br/>+import
javax.management.MBeanServer;<br/>+import
javax.management.MalformedObjectNameException;<br/>+import
javax.management.NotCompliantMBeanException;<br/>+import
javax.management.ObjectName;-public class Config<br/>+<br/>+public class Config implements
ConfigMBean<br/> {<br/>     public String cluster_name = "Test Cluster";<br/>     public
String authenticator;<br/>@@ -134,6 +142,24 @@<br/>     public int row_cache_keys_to_save
= Integer.MAX_VALUE;<br/>     public String row_cache_provider =
ConcurrentLinkedHashCacheProvider.class.getSimpleName();+    public Config() throws
RuntimeException<br/>+    {<br/>+        MBeanServer mbs =
ManagementFactory.getPlatformMBeanServer();<br/>+        ObjectName confName;<br/>+<br/>+ 
      try {+            confName = new
ObjectName("org.apache.cassandra.config:type=Config");+        } catch
(MalformedObjectNameException e) {+            throw new RuntimeException(e); +       
}+<br/>+        try {+            mbs.registerMBean(this, confName);+        } catch
(Exception e) {+            throw new RuntimeException(e);+        }+    }<br/>+<br/>    
public static enum CommitLogSync {<br/>         periodic,<br/>         batch<br/>@@ -150,4
+176,14 @@     {         keyspace     }+<br/>+    public void setRpcTimeoutInMs(Long
timeoutInMillis)<br/>+    {+        rpc_timeout_in_ms = timeoutInMillis;+    }+<br/>+   
public Long getRpcTimeoutInMs()<br/>+    {+        return rpc_timeout_in_ms;+    }
}<br/>Index:
src/java/org/apache/cassandra/config/ConfigMBean.java<br/>===================================================================<br/>&#8212;
src/java/org/apache/cassandra/config/ConfigMBean.java	(revision 0)<br/>+++
src/java/org/apache/cassandra/config/ConfigMBean.java	(revision 0)<br/>@@ -0,0 +1,27
@@<br/>+package org.apache.cassandra.config;<br/>+/*<br/>+ * <br/>+ * Licensed to the
Apache Software Foundation (ASF) under one<br/>+ * or more contributor license agreements.
 See the NOTICE file<br/>+ * distributed with this work for additional information<br/>+ *
regarding copyright ownership.  The ASF licenses this file<br/>+ * to you under the Apache
License, Version 2.0 (the<br/>+ * "License"); you may not use this file except in
compliance<br/>+ * with the License.  You may obtain a copy of the License at<br/>+ *
<br/>+ *   <a href="http://www.apache.org/licenses/LICENSE-2.0" class="external-link"
rel="nofollow">http://www.apache.org/licenses/LICENSE-2.0</a><br/>+ * <br/>+ * Unless
required by applicable law or agreed to in writing,<br/>+ * software distributed under the
License is distributed on an<br/>+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
ANY<br/>+ * KIND, either express or implied.  See the License for the<br/>+ * specific
language governing permissions and limitations<br/>+ * under the License.<br/>+ * <br/>+
*/<br/>+<br/>+public interface ConfigMBean <br/>+{+    public void setRpcTimeoutInMs(Long
timeoutInMillis);+    public Long getRpcTimeoutInMs();+}\ No newline at end of file 


New Comment: 
Patch I propose for this issue:I implemented the new ConfigMBean.java interface in the
Config.java class, and only exposed the desired property's getter and setter.I also
registered the bean in the Config constructor because it seemed to me the best place to do
so, I could have done this in DatabaseDescriptor, but it seemed cleaner to do so here.I
added Jeremy Hanna as reviewer, don't know if this is the right thing to do, but if he
could give the patch a look, I'd be appreciative.As stated in the guidelines, I re-threw
exceptions as Runtime exception, since no callers could handle them (ended up in a static
block). 


New Comment: 
Thanks for the patch!  Talked to Brandon Williams and Nick Bailey about the patch.  They
don't want to have a Config MBean.  Brandon said it would be better to move the property
to to StorageProxy but add the setter to DatabaseDescriptor.  StorageProxy can call that
setter. 


New Comment: 
No problem.If I understand correctly, the preferred approach would be something like
this:-New methods in StorageProxyMBean expose this property.<br/>-StorageProxy implements
this as a call to the new static method
DatabaseDescriptor.setRpcTimeout(Long).<br/>-DatabaseDescriptor.setRpcTimeout(Long)
changes the value of Config.rpc_timeout_in_ms (notice that my understanding is that we
should keep this as it is, so that the default value can still be loaded from the yaml
file if needed).If my understanding is correct, I'll be happy to make the change, if not,
could you please clarify where you think needed?. Thanks. 


New Comment: 
<blockquote>If I understand correctly, the preferred approach would be something like
this:-New methods in StorageProxyMBean expose this property.<br/>-StorageProxy implements
this as a call to the new static method
DatabaseDescriptor.setRpcTimeout(Long).<br/>-DatabaseDescriptor.setRpcTimeout(Long)
changes the value of Config.rpc_timeout_in_ms (notice that my understanding is that we
should keep this as it is, so that the default value can still be loaded from the yaml
file if needed).</blockquote>Yes, this is correct, we should never be rewriting the yaml. 
Thanks! 


New Comment: 
<blockquote>DatabaseDescriptor.setRpcTimeout(Long) changes the value of
Config.rpc_timeout_in_ms (notice that my understanding is that we should keep this as it
is...</blockquote>I realized there may be some confusion here... Config itself should not
need any changes, but DatabaseDescriptor's instance of it (conf) can be updated.  There
are numerous others setters in DD that do this. 


New Comment: 
Updated patch:Exposed the property in the StorageProxyMBean, and the implementation uses
the value of DatabaseDescriptor.conf.rpc_timeout_in_ms. Added setter in DatabaseDescriptor
to be able to update the value from StorageProxy. 


New Comment: 
Thanks, I just updated the patch. Let me know what you think.On Wed, Dec 28, 2011 at 12:24
PM, Brandon Williams (Commented) (JIRA) &lt; 


