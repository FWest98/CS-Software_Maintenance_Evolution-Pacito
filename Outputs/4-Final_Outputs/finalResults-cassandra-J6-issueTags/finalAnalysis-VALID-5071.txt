Pattern changes caused by commit: 445696052d0a488b4ab7c71a2958a058242169eb

From: Decorator-1
To:   Decorator-0

From: Flyweight-4
To:   Flyweight-5

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5071.txt 

commit 445696052d0a488b4ab7c71a2958a058242169eb
Author: Pavel Yaskevich <xedin@apache.org>

    FBUtilities.hexToBytes(String) to throw NumberFormatException when string contains non-hex characters
    patch by Jonathan Ellis and Pavel Yaskevich; reviewed by Pavel Yaskevich for (CASSANDRA-3231)



==================================
 Issue CASSANDRA-3231 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3231] CQL does not throw an error when invalid hex is supplied
-----------------

-----------------
Summary: CQL does not throw an error when invalid hex is supplied
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 20 Sep 2011 01:06:09 +0000
-----------------

-----------------
Resolved at: Tue, 27 Sep 2011 20:14:56 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 

As reported on irc, if you try to create an index on a CF with a default comparator of
BytesType, but you supply invalid hex, weird things happen.  Namely if you try to create
one on 'category' you instead get one on '\xca\xfe\xff\xff', which is 4 bytes that appears
to coincide with attempting to interpret 'ca', 'te', 'go', 'ry' as hex.
 

-----------------

-----------------
Comments: 

New Comment: 
This is not a CQL/CLI problem but a problem in FBUtilities bytesToHex and hexToBytes
methods. New issue would be opened to fix that (if needed). 


New Comment: 
I don't think we need a new issue. 


New Comment: 
There is the question then - do we really need to change behavior of bytesToHex/hexToBytes
methods of FBUtilities class? 


New Comment: 
we need to validate index targets one way or the other.shouldn't this be done by calling
AbstractType.validate? 


New Comment: 
This is not a question of validation because {from/get}String methods of any type should
return valid data rather the question of BytesType string representation, I'm going to let
Brandon comment on the latter. 


New Comment: 
"public ByteBuffer fromString(String source) throws MarshalException"if the source is not
a valid encoding of the type (as "category" is not for BytesType) then this should throw 


New Comment: 
Exactly, but FBUtilities.hexToBytes does not validate the string so we need to way to
validate was is string a correct hex or not 


New Comment: 
what is this existing part of fromString checking for?<div class="code panel"
style="border-width: 1px;"><div class="codeContent panelContent"><pre class="code-java">  
     <span class="code-keyword">catch</span> (NumberFormatException e)        {           
<span class="code-keyword">throw</span> <span class="code-keyword">new</span>
MarshalException(<span class="code-object">String</span>.format(<span
class="code-quote">"cannot parse <span class="code-quote">'%s'</span> as hex
bytes"</span>, source), e);        }</pre></div></div> 


New Comment: 
I think that was expecting hexToBytes to validate string and throw a NumberFormatException
but it never did before this patch. 


New Comment: 
looks like that's from the old hexToBytes implementation, where the inner loop used to
be<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">            bytes[i] = (<span
class="code-object">byte</span>)<span
class="code-object">Integer</span>.parseInt(str.substring(i*2, i*2+2),
16);</pre></div></div>So I think it's safe to remove now. 


New Comment: 
do you want to throw MarshalException directly from FBUtilities.hexToBytes to remove
NumberFormatException from BytesType.fromString(String)? 


New Comment: 
v2 attached that doesn't need an extra regexp pass.  (since we use bytestype for cql blob
data it can be performance sensitive.) 


New Comment: 
+1 just please add the test from my patch so we don't face such regressions in the future. 


