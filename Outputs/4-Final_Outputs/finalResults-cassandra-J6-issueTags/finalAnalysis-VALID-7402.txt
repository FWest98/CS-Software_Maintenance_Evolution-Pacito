Pattern changes caused by commit: 76e092b2d3785ac1549f1af16702839bee570c69

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7402.txt 

commit 76e092b2d3785ac1549f1af16702839bee570c69
Author: Pavel Yaskevich <xedin@apache.org>

    Fix cql error with ORDER BY when using IN
    patch by Pavel Yaskevich; reviewed by Sylvain Lebresne for CASSANDRA-4612



==================================
 Issue CASSANDRA-4612 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4612] cql error with ORDER BY when using IN
-----------------

-----------------
Summary: cql error with ORDER BY when using IN
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 4 Sep 2012 18:20:39 +0000
-----------------

-----------------
Resolved at: Fri, 7 Sep 2012 16:01:38 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 
<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">            CREATE TABLE test(                my_id
varchar,                 col1 <span class="code-object">int</span>,                 value
varchar,                 PRIMARY KEY (my_id, col1)            );INSERT INTO test(my_id,
col1, value) VALUES ( <span class="code-quote">'key1'</span>, 1, <span
class="code-quote">'a'</span>);INSERT INTO test(my_id, col1, value) VALUES ( <span
class="code-quote">'key2'</span>, 3, <span class="code-quote">'c'</span>);INSERT INTO
test(my_id, col1, value) VALUES ( <span class="code-quote">'key3'</span>, 2, <span
class="code-quote">'b'</span>);INSERT INTO test(my_id, col1, value) VALUES ( <span
class="code-quote">'key4'</span>, 4, <span class="code-quote">'d'</span>);SELECT col1 FROM
test WHERE my_id in(<span class="code-quote">'key1'</span>, <span
class="code-quote">'key2'</span>, <span class="code-quote">'key3'</span>) ORDER BY
col1;</pre></div></div>
The following error results: TSocket read 0 bytes<br/>The log
gives a traceback:
<div class="code panel" style="border-width: 1px;"><div
class="codeContent panelContent"><pre class="code-java">ERROR [Thrift:8] 2012-09-04
12:02:15,894 CustomTThreadPoolServer.java (line 202) Error occurred during processing of
message.java.lang.IndexOutOfBoundsException: Index: 1, Size: 1	at
java.util.ArrayList.RangeCheck(ArrayList.java:547)	at
java.util.ArrayList.get(ArrayList.java:322)	at
org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator.compare(SelectStatement.java:1356)	at
org.apache.cassandra.cql3.statements.SelectStatement$SingleColumnComparator.compare(SelectStatement.java:1343)	at
java.util.Arrays.mergeSort(Arrays.java:1270)	at java.util.Arrays.sort(Arrays.java:1210)	at
java.util.Collections.sort(Collections.java:159)	at
org.apache.cassandra.cql3.statements.SelectStatement.orderResults(SelectStatement.java:821)	at
org.apache.cassandra.cql3.statements.SelectStatement.process(SelectStatement.java:793)	at
org.apache.cassandra.cql3.statements.SelectStatement.executeInternal(SelectStatement.java:136)	at
org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:118)	at
org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:62)	at
org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:107)	at
org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:115)	at
org.apache.cassandra.thrift.CassandraServer.execute_cql_query(CassandraServer.java:1521)	at
org.apache.cassandra.thrift.Cassandra$Processor$execute_cql_query.getResult(Cassandra.java:3618)	at
org.apache.cassandra.thrift.Cassandra$Processor$execute_cql_query.getResult(Cassandra.java:3606)	at
org.apache.thrift.ProcessFunction.process(ProcessFunction.java:32)	at
org.apache.thrift.TBaseProcessor.process(TBaseProcessor.java:34)	at
org.apache.cassandra.thrift.CustomTThreadPoolServer$WorkerProcess.run(CustomTThreadPoolServer.java:184)	at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	at
java.lang.<span class="code-object">Thread</span>.run(<span
class="code-object">Thread</span>.java:662)</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
fixed problem related to determining position when single 'order by' condition is used and
added a check to prevent users from ordering by columns which are not included in the
select clause. 


New Comment: 
The fix for the case where there is only one ordered column lgtm but this doesn't handle
the CompositeComparator case. 


New Comment: 
Also, I believe this affect 1.1 as well, so I would suggest fixing it there. 


New Comment: 
ported to 1.1 and added composite support. 


New Comment: 
I believe that removing the "Order by currently only support the ordering of columns
following their declared order in the PRIMARY KEY" is buggy because it still doesn't work
in the case where the key restriction is an EQ (i.e. not an IN). That is, we can remove it
but in that case we must change the condition at the top of orderResults() so that we go
through the 'CompositeComparator' path if the keyRestriction is an EQ and the requested
orderings are not in the same order that in the PK definition. Not a bad idea though.Some
minor nits:<ul>	<li>We can provide the size when allocating the typesWithPositions list. I
would have split typesWithPositions in two lists as this reduce the number of allocation
needed (because you avoid all the Pair but also because you can use int[] for the
positions) and in that case wouldn't really complicate the code anyway.</li>	<li>In
getColumnPositionInSelect, we could use a by-index for loop and directly return the
current index when we find the name. That way we can throw an assertion if we didn't find
the name at all since that shouldn't happen anyway (tiny bonus: iteration by index on
ArrayList is slightly cheaper as it avoids the iterator allocation).</li></ul> 


New Comment: 
Looks like its's just not my day today, I will fix keyRestriction thing and nits asap. 


New Comment: 
v2 with nits fixed and order restriction reverted to original state after discussion with
Jonathan. 


New Comment: 
lgtm, +1 


