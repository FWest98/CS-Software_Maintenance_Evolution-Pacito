Pattern changes caused by commit: ffdfe1b102c164cb46885befb845057aa07102a4

From: Decorator-0
To:   Decorator-1

From: Flyweight-5
To:   Flyweight-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4735.txt 

commit ffdfe1b102c164cb46885befb845057aa07102a4
Author: Pavel Yaskevich <xedin@apache.org>

    Fix streaming over SSL when compressed SSTable involved
    patch by Pavel Yaskevich; reviewed by Jonathan Ellis for CASSANDRA-3051



==================================
 Issue CASSANDRA-3051 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3051] On Disk Compression breaks SSL Encryption
-----------------

-----------------
Summary: On Disk Compression breaks SSL Encryption
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 17 Aug 2011 22:06:47 +0000
-----------------

-----------------
Resolved at: Tue, 30 Aug 2011 13:50:29 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 

Encryption depends on FileStreamTask.write <span class="error">&#91;1&#93;</span>
protected member to be called because the SSLFileStreamTask.write overrides this to write
back to the server.

When enabled, compression circumvents the call and the client does
not communicate using an SSL socket back to the server.

<span
class="error">&#91;1&#93;</span><br/>protected long write(FileChannel fc, Pair&lt;Long,
Long&gt; section, long length, long bytesTransferred) throws IOException
 

-----------------

-----------------
Comments: 

New Comment: 
Removed SSLFileStreamTask and added EncryptionOptions to the constructor of the
FileStreamTask.Rebased with latest trunk (last commit
0a4b1667bee674f7c0a22057cbdab97e368a20d1) 


New Comment: 
lgtm, +1 if it actually works <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
I don't see anh reason why it won't <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> but can't write a test because SSL is
treacky with it's stores... 


New Comment: 
wait, you tested it locally first, right?  It's not difficult to set up a streaming
environment locally. 


New Comment: 
do we have a "ssl howto" somewhere?  I was hoping it would be in cassandra.yaml by
encryption_options but no.  Or at least, not sufficiently "for dummies" for me. 


New Comment: 
No, unfortunately I haven't found any info about how to do that so you are welcome to test
if you can... 


New Comment: 
Not that I know of.  If someone wants to write one it would flesh out these basic
steps:<ol>	<li>follow the steps for generating a keystore and a trust store here: <a
href="http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore"
class="external-link"
rel="nofollow">http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html#CreateKeystore</a></li>	<li>plug
those files into encryption_options in cassandra.yaml</li>	<li>make sure
encryption_options.internode_encryption = all in the yaml.</li></ol>I was mostly raising a
voice of caution against committing code backed up by statements like "I don't see anh
reason why it won't..."  This is usually a prelude to something like "we need to quickly
release a new version because XYZ broke streaming."  Just sayin'. 


New Comment: 
Following your logic - person who was working on ssl should've done that at first place,
there is no guarantee that it works in the current state. I'm not pushing things forward
just wondering why testing wasn't done before. 


New Comment: 
Pavel, I tested SSL prior to committing the feature.I was under the impression that this
ticket exists because compression, when enabled, breaks SSL.  The implication is that it
was working prior, else the ticket would be something more like "SSL is broken." 


New Comment: 
You misunderstood that, it is not breaking SSL it was just special cased in FileStreamTask
so it wasn't using ssl socket. This patch removes special casing for SSL streaming by
creating ssl socket directly in FileStreamTask if encryption options were set. 


New Comment: 
Pavel, can you try to set up local SSL w/ a ccm cluster based on Gary's instructions to
verify? 


New Comment: 
Sure 


New Comment: 
I figured out the problem - SSLSocket always returns null on getChannel even on current
code, I will refactor FileStreamingTask to support DataOutputStream instead of
SocketChannel to unify normal and SSL transfers. 


New Comment: 
CompressedRandomAccessReader.transfer method was removed with special casing for
compressed files, SocketChannel based transfer changed to DataOuputStream based to unify
SSL and normal modes. SSLFileStreamTask removed as unused. 


New Comment: 
<ul class="alternate" type="square">	<li>feels like we lose more than we gain by making
writeHeader/write separate methods.  they aren't really self-contained so you have to keep
the context they were called in, around mentally.  and if they were in-line, it would be
obvious that you don't need to re-seek for each call to write().</li>	<li>comments in
write() don't really add much to what the code says, imo</li>	<li>is flushing with each
chunk necessary?  seems like that would harm performance</li></ul> 


New Comment: 
removed writeHeader method, seek and flush are done once per section. 


New Comment: 
+1 


New Comment: 
Committed. 


