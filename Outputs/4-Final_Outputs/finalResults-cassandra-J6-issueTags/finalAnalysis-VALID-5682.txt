Pattern changes caused by commit: e3c5d5d4335150e76b3e7e5ea7147f33ddc49910

From: Facade-1
To:   Facade-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5682.txt 

commit e3c5d5d4335150e76b3e7e5ea7147f33ddc49910
Author: Jonathan Ellis <jbellis@apache.org>

    stop thrift service in shutdown hook so we can quiesce MessagingService
    patch by jbellis; reviewed by Brandon Williams for CASSANDRA-3335



==================================
 Issue CASSANDRA-3335 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3335] ThreadPoolExecutor creates threads as non-daemon and will block on shutdown by default
-----------------

-----------------
Summary: ThreadPoolExecutor creates threads as non-daemon and will block on shutdown by default
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 7 Oct 2011 21:40:31 +0000
-----------------

-----------------
Resolved at: Tue, 20 Dec 2011 20:41:22 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

This is most obviously visible in OptionalTasks which should not block shutdown, but
often does.
 

-----------------

-----------------
Comments: 

New Comment: 
Patch that switches DTPE to daemon threads, and Memtable's jamm TPE to DTPE. The only
other direct use of TPE is the thrift handler for sync mode in ACD, which doesn't seem to
have a problem killing things off when we ask it to so I left it alone. 


New Comment: 
+1 on this patch for being technically correct, but it actually does not help.  What I see
is OptionalTasks jump to 100% on control-c, and then eventually it spins down and a few
minutes later java finally exits.  During the last bit, I can see jamm still working.  I'm
not sure why java is taking so long to exit, but it is responsive to nodetool the entire
time, though tpstats shows nothing active. 


New Comment: 
v2 adds a log line before running any scheduled task. Maybe that will help pinpoint the
culprit. 


New Comment: 
(all the task logging is done w/ the StorageService logger so it can be enabled separately
from the reset of the package involved) 


New Comment: 
Tracked down to the shutdown hook:<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>   java.lang.Thread.State:
TIMED_WAITING (sleeping)    at java.lang.Thread.sleep(Native Method)    at
org.apache.cassandra.utils.ExpiringMap.shutdown(ExpiringMap.java:103)    at
org.apache.cassandra.net.MessagingService.shutdown(MessagingService.java:495)    at
org.apache.cassandra.service.StorageService$2.runMayThrow(StorageService.java:426)    at
org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:30)    at
java.lang.Thread.run(Thread.java:662)</pre></div></div>Appears to be the ExpiringMap added
in <a href="https://issues.apache.org/jira/browse/CASSANDRA-2034" title="Make Read Repair
unnecessary when Hinted Handoff is enabled" class="issue-link"
data-issue-key="CASSANDRA-2034"><del>CASSANDRA-2034</del></a>. 


New Comment: 
Patch to stop adding new messages to the callback map when MessagingService is shutdown. 


New Comment: 
Doesn't seem to help.  Thread dump attached. 


New Comment: 
Okay, take four here.  The problem with v3 is that we were only blocking sendOneWay during
shutdown, not addCallback, which is the source of the ExpiringMap entries we were waiting
for.As I commented,<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>    /**     * There isn't a good way to shut
down the MessagingService. One problem (but not the only one)     * is that StorageProxy
has no way to communicate back to clients, "I'm nominally alive, but I can't     * send
that request to the nodes with your data."  Neither TimedOut nor Unavailable is
appropriate     * to return in that situation.     *     * So instead of shutting down MS
and letting StorageProxy/clients cope somehow, we shut down     * the Thrift service and
then wait for all the outstanding requests to finish or timeout.    
*/</pre></div></div>That part was straightforward.  I also had to make the Thrift shutdown
actually work &#8211; we were calling setSoTimeout to attempt to make accept()
nonblocking, but "0" means "wait indefinitely" not "don't wait at all".  Then we needed to
handle the timeout in the accept loop.Finally, I did a bunch of cleanup to ExpiringMap and
added trace-level logging in case we need to go at this <b>again</b>. 


New Comment: 
+1 


