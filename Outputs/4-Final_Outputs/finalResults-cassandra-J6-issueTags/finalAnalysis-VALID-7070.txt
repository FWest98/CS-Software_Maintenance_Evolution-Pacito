Pattern changes caused by commit: 5bcfcbc3ed1bbaadcd0f6e373d0d207db38ec6c2

From: Facade-1
To:   Facade-0

From: Flyweight-1
To:   Flyweight-4

From: Mediator-1
To:   Mediator-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7070.txt 

commit 5bcfcbc3ed1bbaadcd0f6e373d0d207db38ec6c2
Author: Jonathan Ellis <jbellis@apache.org>

    allow dropping columns shadowed by not-yet-expired supercolumn or row tombstones in PrecompactedRow
    patch by jbellis; reviewed by slebresne for CASSANDRA-4396



==================================
 Issue CASSANDRA-4396 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4396] Subcolumns not removed when compacting tombstoned super column
-----------------

-----------------
Summary: Subcolumns not removed when compacting tombstoned super column
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 29 Jun 2012 17:34:59 +0000
-----------------

-----------------
Resolved at: Tue, 10 Jul 2012 13:36:00 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

When we compact a tombstone for a super column with the old data for that super column,
we end up writing the deleted super column and all the subcolumn data that is now
worthless to the new sstable. This is especially inefficient when reads need to scan
tombstones during a slice.

Here is the output of a simple test I ran to confirm:

insert
supercolumn, then flush
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>Nicks-MacBook-Pro:12:20:52 cassandra-1.0]
cassandra$ bin/sstable2json ~/.ccm/1node/node1/data/Keyspace2/Super4-hd-1-Data.db
{"6b657931": {"supercol1": {"deletedAt": -9223372036854775808, "subColumns":
[["737562636f6c31","7468697320697320612074657374",1340990212532000]]}}}</pre></div></div>
delete
supercolumn, flush again
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>[Nicks-MacBook-Pro:12:20:59 cassandra-1.0]
cassandra$ bin/nodetool -h localhost flush[Nicks-MacBook-Pro:12:22:41 cassandra-1.0]
cassandra$ bin/sstable2json ~/.ccm/1node/node1/data/Keyspace2/Super4-hd-2-Data.db
{"6b657931": {"supercol1": {"deletedAt": 1340990544005000, "subColumns":
[]}}}</pre></div></div>
compact and check resulting sstable
<div class="preformatted
panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>[Nicks-MacBook-Pro:12:22:55 cassandra-1.0] cassandra$ bin/nodetool -h
localhost compact [Nicks-MacBook-Pro:12:23:09 cassandra-1.0] cassandra$ bin/sstable2json
~/.ccm/1node/node1/data/Keyspace2/Super4-hd-3-Data.db {"6b657931": {"supercol1":
{"deletedAt": 1340990544005000, "subColumns":
[["737562636f6c31","7468697320697320612074657374",1340990212532000]]}}}[Nicks-MacBook-Pro:12:23:20
cassandra-1.0] cassandra$ </pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
This code in removeDeletedSuper is intended to address this scenario:<div class="code
panel" style="border-width: 1px;"><div class="codeContent panelContent"><pre
class="code-java">.               <span class="code-comment">// remove subcolumns <span
class="code-keyword">if</span></span>                <span class="code-comment">// (a) the
subcolumn itself is tombstoned or</span>                <span class="code-comment">// (b)
the supercolumn is tombstoned and the subcolumn is not newer than it</span>               
<span class="code-keyword">if</span> (subColumn.timestamp() &lt;= minTimestamp            
       || subColumn.getLocalDeletionTime() &lt; gcBefore)                {                
   subIter.remove();                }</pre></div></div>Unclear why it's not actually
working here. 


New Comment: 
This is also a problem with simply flushing super column deletes:From a fresh cluster I
can create a supercolumn with subcolumns, delete that supercolumn, trigger a flush with
nodetool, and observe the subcolumn data in the flushed sstable with sstable2json. 


New Comment: 
I'm okay with not calling removeDeleted on flush, in fact I think it's probably the right
tradeoff given that the extra overhead will be a no-op most of the time, but compaction
should definitely evict it. 


New Comment: 
This was introduced by <a href="https://issues.apache.org/jira/browse/CASSANDRA-3234"
title="LeveledCompaction has several performance problems" class="issue-link"
data-issue-key="CASSANDRA-3234"><del>CASSANDRA-3234</del></a>.  Fix attached to allow
dropping columns shadowed by supercolumn (and row) tombstones that are not yet
expired.Reducing gcgs is one way to work around the problem without this patch.  This only
affects in-memory compactions, so reducing in_memory_compaction_limit_in_mb could also
mitigate it. 


New Comment: 
+1 


New Comment: 
committed 


New Comment: 
<a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jbellis"
class="user-hover" rel="jbellis">Jonathan Ellis</a> I still see the same behavior with
this patch applied. Major compaction of an sstable with subcolumns and an sstable with a
tombstone for the relevant super column, produces a new sstable with the super column
tombstoned but the subcolumns still present. 


New Comment: 
patch to fix mixing user-provided timestamps and local deletion time.  includes unit test. 


New Comment: 
(also fixes &lt; to &lt;=) 


New Comment: 
patch is against 1.0, merging to trunk fixed the bug there... 


New Comment: 
v2 is working here - thanks! 


New Comment: 
v2 lgtm, +1. 


