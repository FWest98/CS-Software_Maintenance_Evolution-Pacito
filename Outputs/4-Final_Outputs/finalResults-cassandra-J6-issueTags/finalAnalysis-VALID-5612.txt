Pattern changes caused by commit: e21cda43ca924e8aba692f7992abb6e8181e4961

From: Decorator-0
To:   Decorator-1

From: Flyweight-5
To:   Flyweight-4

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5612.txt 

commit e21cda43ca924e8aba692f7992abb6e8181e4961
Author: Sylvain Lebresne <slebresne@apache.org>

    add back partitioner in sstable metadata
    patch by yukim; reviewed by slebresne for CASSANDRA-3540



==================================
 Issue CASSANDRA-3540 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3540] Wrong check of partitioner for secondary indexes
-----------------

-----------------
Summary: Wrong check of partitioner for secondary indexes
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 29 Nov 2011 17:57:44 +0000
-----------------

-----------------
Resolved at: Thu, 8 Dec 2011 12:06:20 +0000
-----------------

-----------------
Assigned to: Yuki Morishita
-----------------

-----------------
Description: 

<a href="https://issues.apache.org/jira/browse/CASSANDRA-3407" title="Changing
partitioner causes interval tree build failure before the change can be detected"
class="issue-link" data-issue-key="CASSANDRA-3407"><del>CASSANDRA-3407</del></a> doesn't
handle the fact that secondary indexes have a specific partitioner (LocalPartitioner).
This result in the following error when starting nodes in 1.0.4:
<div class="preformatted
panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>java.lang.RuntimeException: Cannot open
/var/lib/cassandra/data/Index/AttractionLocationCategoryDateIdx.AttractionLocationCategoryDateIdx_09partition_idx-h-1
because partitioner does not match
org.apache.cassandra.dht.LocalPartitioner</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
This bug is caused by SSTableMetadata providing node's partitioner when reading old
version (prior hc) of sstable.Attached patch let SSTableMetadata to use empty string("")
instead of DatabaseDescriptor.getPartitioner as default. When older version of sstable is
read, SSTableMetadata provides empty string for partitioner, and check for partitioner is
skipped. 


New Comment: 
Some nits:<ul>	<li>We can give then partitioner as an argument to
Collector.finalizeMetadata() instead of adding a new field.</li>	<li>I think I slightly
prefer using null when there is no partitioner available. I understand that "" make
SSTableMetadata slightly simpler but in fact we shouldn't ever write a SSTableMetadata
with no partitioner (we can only read one). So we could simply assert that partitioner !=
null in the serialize method.</li></ul> 


New Comment: 
I'd also like to add a unit test (probably using clearUnsafe) to make sure we're
exercising the logic and triggering the original 3407 bug. 


New Comment: 
Updated patch to give partitioner an arg to Collector#finalizeMetadata().<br/>I also added
test to SSTableReaderTest which fails when run against current 1.0 branch and  succeeds
after this patch. 


New Comment: 
The patch lgtm. Regarding the tests, I think it would be worth testing if we're correctly
able to load old sstable, those without a saved partitioner, which I don't think the
attached test does, does it (but the current test is good, we should keep it) ? Typically
we could have a similar test than in the patch, but that nukes the statistics component of
the sstables before reloading them . 


New Comment: 
Sylvain,I separate the patch into two parts.0001 just adds tests to reproduce <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3407" title="Changing partitioner
causes interval tree build failure before the change can be detected" class="issue-link"
data-issue-key="CASSANDRA-3407"><del>CASSANDRA-3407</del></a>, one test from previous
patch (flush and open) and new test to simulate upgrading from previous version of
SSTable. Patch generates Indexed1 SSTable which I created using v1.0.3 (SSTable version is
"hb") under test/data/legacy-sstables/hb.<br/>When testing, those sstables are copied into
unit test data location just like ScrubTest does.Note that it also generates Standard1
sstable in order to let LegacySSTableTest pass.0002 contains fix same as previously
submitted patch.Only applying 0001 patch let SSTableReaderTest in current 1.0 branch fail,
and you can see it success after applying 0002. 


