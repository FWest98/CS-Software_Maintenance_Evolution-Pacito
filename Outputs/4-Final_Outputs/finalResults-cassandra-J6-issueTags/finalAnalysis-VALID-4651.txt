Pattern changes caused by commit: 01883da5fc68b6570fac934fbfe5e5340b5b98de

From: Decorator-0
To:   Decorator-1

From: Mediator-2
To:   Mediator-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4651.txt 

commit 01883da5fc68b6570fac934fbfe5e5340b5b98de
Author: Brandon Williams <brandonwilliams@apache.org>

    Re-introduce FastByteArrayInputStream (and Output equivalent)
    Patch by Paul Loy, reviewed by brandonwilliams for CASSANDRA-2820



==================================
 Issue CASSANDRA-2820 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2820] Re-introduce FastByteArrayInputStream (and Output equivalent)
-----------------

-----------------
Summary: Re-introduce FastByteArrayInputStream (and Output equivalent)
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 24 Jun 2011 09:55:31 +0000
-----------------

-----------------
Resolved at: Tue, 16 Aug 2011 18:27:11 +0000
-----------------

-----------------
Assigned to: Paul Loy
-----------------

-----------------
Description: 

In <a href="https://issues.apache.org/jira/browse/CASSANDRA-37" class="external-link"
rel="nofollow">https://issues.apache.org/jira/browse/CASSANDRA-37</a>
FastByteArrayInputStream and FastByteArrayOutputStream were removed due to being code
copied from the JDK and then subsequently modified. The JDK license is incompatible with
Apache 2 license so the code had to go.

I have since had a look at the performance of the
JDK ByteArrayInputStream and a FastByteArrayInputStream (i.e. one with synchronized
methods made un-synchronized) and seen the difference is significant.

After a
warmup-period of &gt;10000 loops I get the following for 10000 loops through a 128000 byte
array:

bais : 3513ms<br/>fbais: 72ms

This varies depending on the OS, machine and Java
version, but it's always in favour of the FastByteArrayInputStream as you might
expect.

Then, at Jonathan Ellis' suggestion, I tried this using a modified Apache Harmony
ByteArrayInputStream - i.e. one whose license is compatible - and the results were the
same. A significant boost.

I will attach a patch with changes for the 0.8.0 tag.
 

-----------------

-----------------
Comments: 

New Comment: 
Would you mind attaching that patch instead of inlining it in a comment. If only because
the markup used by JIRA comment make it unusable as is. If you could rebase this against
the current 0.8 branch, that would also be very helpful. 


New Comment: 
sure thing. I failed miserably to attach the patch <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/sad.png" height="16" width="16"
align="absmiddle" alt="" border="0"/> Will try again (with a rebased version) 


New Comment: 
patch for branches/cassandra-0.8 


New Comment: 
This looks very interesting, thanks. A few comments (having just eyeballed it so
far).Can't we just change the implementation class ? By that I mean, it would rather
have<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>ByteArrayInputStream buffer = new
FastByteArrayInputStream(bytes);</pre></div></div>instead of<div class="preformatted
panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>FastByteArrayInputStream buffer = new
FastByteArrayInputStream(bytes);</pre></div></div>Also, this does not always conform to <a
href="http://wiki.apache.org/cassandra/CodeStyle" class="external-link"
rel="nofollow">http://wiki.apache.org/cassandra/CodeStyle</a>. And rewrites a lot of
imports, expanding * and moving some farther from what the codeStyle call for, which
should be avoided. 


New Comment: 
<blockquote>this does not always conform to <a
href="http://wiki.apache.org/cassandra/CodeStyle" class="external-link"
rel="nofollow">http://wiki.apache.org/cassandra/CodeStyle</a></blockquote>FWIW I would
advocate code copied from Harmony with limited, surgical changes to keep the Harmony
style, with a comment as to their origin.  If we start making deeper changes then I would
want it to be our style though. 


New Comment: 
(Motivation being, if Harmony fixes a bug it's easy to re-apply our diff.) 


New Comment: 
In terms of not having it extend ByteArrayInputStream, this was in-keeping with the
original code in <a href="https://issues.apache.org/jira/browse/CASSANDRA-37"
title="Remove JDK-derived code from project" class="issue-link"
data-issue-key="CASSANDRA-37"><del>CASSANDRA-37</del></a>. However, if you'd prefer it to
be that way I will change that.Yeah, I confess I didn't read your code style guidelines.
Will fix that now. Also, forgot about my over-zealous CTRL+SHIFT+Oing. Will revert those! 


New Comment: 
so Jonathan, if we want to keep the Fast versions as close to Harmony as possible, should
I not have them extend ByteArrayInput/OutputStream?If I do have them extend, I need keep
them as a carbon copy due to member visibility and add super(new byte<span
class="error">&#91;0&#93;</span>) to the constructors. Not too many changes, but does add
more than those that are necessary. 


New Comment: 
oh no wait, they're protected...hmm, I'll give 2 alternatives. 


New Comment: 
extending looks like a cleaner approach to me too.  (or at least, it contains the ugly
better. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
The problem with extending is we're then expecting the actual implementation to work the
same as Harmony's implementation does. At present they look pretty compatible. But who
knows what the future may bring.So I think we have to use a carbon-copy of Harmony's BAIS
to ensure JRE compat. We can still extend it so that Sylvain's suggestion holds, but in
real terms it'll override all methods so won't really extend. 


New Comment: 
This patch has:<ul>	<li>FastByteArrayIn/OutputStream impls that extend the base Harmony
versions.</li>	<li>Same formatting of the Fast versions and the Harmony version for easy
diffing if Harmony bug fixes need to be applied.</li>	<li>A full carbon-copy of Harmony
code to ensure cross-JRE support.</li>	<li>Other import changes (eclipse CTRL+SHIFT+Os)
reverted.</li></ul> 


New Comment: 
I'm actually not too much of a fan of extending ByteArray*Stream but redeclaring all the
fields, giving "fake" argument to the super constructor. It's a bit ugly and not too
optimal in memory size (the space argument is not a huge one I agree). I think we should
extend and reuse the protected field of the super class. Those are part of the public API,
so there is not so much liberty over what a future Harmony implementation (or any
implementation for that matter) can do with them in the future and more importantly, if we
override all the methods, we don't care (expect for the call to the super constructor
actually, but it's easy enough to assert the validity of the field assignation after the
call to super() if we really want to). And talking about that, we need to add an
implementation of read(byte[]), flush() and write(byte[]) because we can't be sure that
the implementation we extend will not override the ones inherited from
InputStream/OutputStream.Now I'll admit that I made my earlier comment a bit quickly and
that in the end it may be simpler/cleaner to make FastByteArray*Stream extends
Input/OutputStream directly and use<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>InputStream buffer = new
FastByteArrayInputStream(bytes);OutputStream buffer = new
FastByteArrayOutputStream(bytes);</pre></div></div>We cannot always do that for the
OutputStream side because OutputStream doesn't have the toByteArray() method, but we can
use FastByteArrayOutputStream then. Really my earlier comment was more about avoiding to
use FastByteArray*Stream in more places than strictly necessary. 


New Comment: 
&gt; I'm actually not too much of a fan of extending ByteArray*Stream but redeclaring all
the fields, giving "fake" argument to the super constructor. It's a bit ugly and not too
optimal in memory size...Haha, me too!&gt; it may be simpler/cleaner to make
FastByteArray*Stream extends Input/OutputStream directly I prefer this too.&gt; my earlier
comment was more about avoiding to use FastByteArray*Stream in more places than strictly
necessarySure. I guess this was lost in translation :SI'll update the patch. 


New Comment: 
More like my original:<ul>	<li>extends Input/OutputStream</li>	<li>change uses of
ByteArrayInputStream to use InputStream</li>	<li>uses of ByteArrayOutputStream have to now
know they are using FastByteArrayOutputStream as that has the #toArray() method.</li></ul> 


New Comment: 
Sorry, took me longer to get to that than I would have hope to.<br/>This looks good to me
though, but do you mind rebasing it one last time so that I can check it compiles and
commit ? 


New Comment: 
Hey Sylvian,likewise sorry for my delay. Have been job hunting, and will now be relocating
to LA from London.I've just rebased, will attach a patch.Paul 


New Comment: 
Hi Paul,Sylvain is on vacation but I can take care of committing this.  It looks like v5
is against 0.8, can you attach a patch against trunk? 


New Comment: 
Rebased to trunk. 


New Comment: 
rebased to trunk. 


New Comment: 
I've asked Brandon to do some real-world performance testing too. 


New Comment: 
Awesome! Here's hoping it gives some discernible positive effect! 


New Comment: 
I'm seeing up to 10% improvement with stress on real iron with this patch. 


New Comment: 
Committed, thanks. 


New Comment: 
Integrated in Cassandra #1026 (See <a href="https://builds.apache.org/job/Cassandra/1026/"
class="external-link"
rel="nofollow">https://builds.apache.org/job/Cassandra/1026/</a>)<br/>    Re-introduce
FastByteArrayInputStream (and Output equivalent)<br/>Patch by Paul Loy, reviewed by
brandonwilliams for <a href="https://issues.apache.org/jira/browse/CASSANDRA-2820"
title="Re-introduce FastByteArrayInputStream (and Output equivalent)" class="issue-link"
data-issue-key="CASSANDRA-2820"><del>CASSANDRA-2820</del></a>brandonwilliams : <a
href="http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1158410"
class="external-link"
rel="nofollow">http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1158410</a><br/>Files
:
<ul>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/Truncation.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/io/util/FastByteArrayOutputStream.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/io/util/FastByteArrayInputStream.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/IndexScanCommand.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2VerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/service/AbstractRowResolver.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/io/util/OutputBuffer.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/ReadCommand.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutation.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java</li>	<li>/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReply.java</li></ul> 


New Comment: 
Wouldn't this stuff be a nice contribution to the commons-io project ? 


New Comment: 
yeah I think it would.I've been looking at thrift for some things lately and that also
uses the synchronized JDK ByteArray*Streams and could possibly benefit from this too.
Actually they do have a TByteArrayOutputStream that allows them to get the byte[] buffer
without a deep copy which may be of use to cassandra also. So I could roll the two into
one and contrib to commons-io. 


New Comment: 
Great Paul, once you have a commons-* ticket number let us know and I'm sure many would be
interested in following it. 


