Pattern changes caused by commit: 5a6f0b852935e7da957e5cfc397fd0a55b9516b6

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6750.txt 

commit 5a6f0b852935e7da957e5cfc397fd0a55b9516b6
Author: Jonathan Ellis <jbellis@apache.org>

    Introduce MessageOut class, which wraps an object to be sent in the "payload" field.  The old Header class is inlined into the "parameters" map.
    patch by jbellis; reviewed by yukim for CASSANDRA-3617



==================================
 Issue CASSANDRA-3617 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3617] Clean up and optimize Message
-----------------

-----------------
Summary: Clean up and optimize Message
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Mon, 12 Dec 2011 22:40:24 +0000
-----------------

-----------------
Resolved at: Tue, 8 May 2012 17:54:08 +0000
-----------------

-----------------
Assigned to: Yuki Morishita
-----------------

-----------------
Description: 

The Message class has grown largely by accretion and it shows.  There are several
problems:
<ul class="alternate" type="square">	<li>Outbound and inbound messages aren't
really the same thing and should not be conflated</li>	<li>We pre-serialize message bodies
to byte[], then copy those bytes onto the Socket buffer, instead of just keeping a
reference to the object being serialized and then writing it out directly to the
socket</li>	<li>MessagingService versioning is poorly encapsulating, scattering version
variables and references to things like CachingMessageProducer across the
codebase</li></ul> 

-----------------

-----------------
Comments: 

New Comment: 
I've gotten this to pass unit tests and demonstrate that the approach is sound.  Patches
are up at <a href="https://github.com/jbellis/cassandra/tree/3617-4" class="external-link"
rel="nofollow">https://github.com/jbellis/cassandra/tree/3617-4</a> with hopefully
meaningful commit messages.However, to work in a cluster this requires filling in all the
IVersionedSerializer serializedSize methods that we left unimplemented in the past, which
we could get away with because MessagingService would serialize to a byte[] (Message.body)
before passing to OutboundTCPConnection.  Now we do need the serializedSize method to
work, since we rely on that to avoid having to do that extra copy-to-byte[].(Where we rely
on Thrift for message serialization as in RangeSliceCommandSerializer we'll need to do a
serializer-internal copy-to-byte[] in serializedSize, since TSerializer doesn't expose a
size method.  We can introduce a new version of those serializers in another ticket that
does not rely on Thrift, but for this ticket let's keep it simple.)I've started doing that
in the last commit posted, but there are more to do and I'm out of time for now, so I'm
going to hand this off to Yuki. 


New Comment: 
Rebased and updated at <a href="https://github.com/jbellis/cassandra/branches/3617-6"
class="external-link"
rel="nofollow">https://github.com/jbellis/cassandra/branches/3617-6</a>.I've added
serializedSize for the streaming, gms, and dht classes.  The gossip part is tested to work
under ccm.  The db package still needs serializedSize support as described above. 


New Comment: 
Still in progress, but rebased, implemented serializedSize for all IVersionedSerializer
and added unit tests for those. <br/>Current work is at <a
href="https://github.com/yukim/cassandra/branches/3617" class="external-link"
rel="nofollow">https://github.com/yukim/cassandra/branches/3617</a>.CliTest and RemoveTest
still fail, but all other unit tests including SerializationsTests pass. 


New Comment: 
Updated patches are at <a href="https://github.com/yukim/cassandra/branches/3617-2"
class="external-link"
rel="nofollow">https://github.com/yukim/cassandra/branches/3617-2</a>.All unit
tests/dtests pass. 


New Comment: 
Do you see any performance benefit (in a cluster)? 


New Comment: 
In a 4 node cluster with rf=1 (to maximize the number of messages needed) using 4M rows
there was about a 6% improvement on writes and a 12.5% improvement on reads.  I expect
this would grow over time with the size of the test. 


