Pattern changes caused by commit: 8cd42641f47197dfd14b0f4630a77cc505135484

From: Decorator-1
To:   Decorator-0

From: Flyweight-4
To:   Flyweight-5

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4876.txt 

commit 8cd42641f47197dfd14b0f4630a77cc505135484
Author: Brandon Williams <brandonwilliams@apache.org>

    Make IncomingTcpConnection responsible for version handling.
    Patch by Marcus Erikkson, reviewed by Peter Schuller and brandonwilliams
    for CASSANDRA-3166



==================================
 Issue CASSANDRA-3166 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3166] Rolling upgrades from 0.7 to 0.8 not possible
-----------------

-----------------
Summary: Rolling upgrades from 0.7 to 0.8 not possible
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 9 Sep 2011 12:45:30 +0000
-----------------

-----------------
Resolved at: Mon, 12 Sep 2011 16:50:06 +0000
-----------------

-----------------
Assigned to: Unassigned
-----------------

-----------------
Description: 

We are in the progress of upgrading to 0.8 and we need to do a rolling upgrade, this
fails miserably and it is reproducible;

1. set up a 3 node cluster with 0.7.9 and rf=3,
read and write, QUORUM<br/>2. upgrade one of the nodes (i upped a seednode, not sure if
that is important)<br/>3. continue reading/writing<br/>4. see logs on the 0.7 node fill up
with: INFO 12:36:08,240 Received connection from newer protocol version. Ignorning
message.

it does work if i start the 0.7.9 nodes <b>after</b> the 0.8.4 node which makes
me think that it matters if it is the 0.8 node connecting to the 0.7 nodes or the other
way round.

Debug logging on the 0.8 node shows:<br/>/var/log/cassandra/system.log.9:DEBUG
<span class="error">&#91;pool-2-thread-82&#93;</span> 2011-09-09 11:55:06,067
StorageProxy.java (line 178) Write timeout java.util.concurrent.TimeoutException for one
(or more) of: <br/>/var/log/cassandra/system.log.9:DEBUG <span
class="error">&#91;pool-2-thread-76&#93;</span> 2011-09-09 11:55:06,067 StorageProxy.java
(line 584) Read timeout: java.util.concurrent.TimeoutException: Operation timed out -
received only 1 responses from /193.182.3.92,  .

nothing except for the "newer protocol
version..." in the 0.7-logs

i will continue to look at this issue but if anyone has a
quick patch, let me know
 

-----------------

-----------------
Comments: 

New Comment: 
oh, note that it fails all the way to the client as well, timeouts in hector 


New Comment: 
Are you seeing any "Version for $IP is $VERSION" output when running in debug mode?
IncomingTcpConnection.run() should be logging that. 


New Comment: 
Currently suspecting 6eb154ba5616e0df3ce4f11c88dbb1c92d317465 which adds the version reset
on disconnection. 


New Comment: 
And that commit was due to <a href="https://issues.apache.org/jira/browse/CASSANDRA-2818"
title="0.8.0 is unable to participate with nodes using a _newer_ protocol version"
class="issue-link" data-issue-key="CASSANDRA-2818"><del>CASSANDRA-2818</del></a> and <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2860" title="Versioning works *too*
well" class="issue-link" data-issue-key="CASSANDRA-2860"><del>CASSANDRA-2860</del></a>. 


New Comment: 
Removing the resetVersion() did not help. I added some logging to IncomingTcpConnection
and it seems that when the 0.8 node goes up first, the 0.7 node never tries to make an
outgoing connection to it.If my understanding is correct, from reading <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2818" title="0.8.0 is unable to
participate with nodes using a _newer_ protocol version" class="issue-link"
data-issue-key="CASSANDRA-2818"><del>CASSANDRA-2818</del></a> and looking at the code, I
think the intent is that we discover the version of the other guy whenever that guy
connects to <b>us</b>; we can never find out that the other side has a mis-matched version
based on activity on the outbound connection.So, incoming connections would be a necessity
in order for the 0.8 node to ever adjust it's lingo. 


New Comment: 
That's right.  This is why when we do get a message from a newer-version host we make sure
to add it to gossiper so we connect back to it.Not sure if that fix got applied to 0.7
&#8211; if not, making the 0.8 node a seed should work around it. 


New Comment: 
Sorry, epic fail on my part. Removing the version reset does have an effect, and the 0.7
node is in fact connecting. I made a boo-boo involving running from the wrong working
copy... 


New Comment: 
I'm having difficulty coming up with a clean yet simple fix here. Reverting <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2860" title="Versioning works *too*
well" class="issue-link" data-issue-key="CASSANDRA-2860"><del>CASSANDRA-2860</del></a>
certainly fixes this problem, but re-introduces <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2860" title="Versioning works *too*
well" class="issue-link" data-issue-key="CASSANDRA-2860"><del>CASSANDRA-2860</del></a>
instead.I could imagine an environment variable/config option to disable the support for
pretending you are older than you are, which could be used in a second round of rolling
restarts after upgrading all nodes of a cluster to 0.8. A JMX tweakable setting would be
nice, but upon changing it you'd want to tear down all the TCP connections to re-initiate
versioning negotiation so maybe it's okay to leave it with an extra round of restarts
required.Alternatively, I think (not tested) things will tend to sort itself out
incrementally every time you restart a 0.8 node since it will tend to initiate connections
to other nodes immediately, but documenting for users that they need to restart nodes all
over the place until everyone seems to have gotten it seems like a poor solution.Adding
some new kind of message that says "i really am this other version" or similar isn't
clean.Am I missing a much simpler and cleaner fix here? 


New Comment: 
Minimal patch attachedClear version in IncomingTcpConnection instead since that is the one
setting it;<br/>before we could end up in a state where the outgoing connections got
closed, but the incoming one was still up, meaning the version was reset and it was never
possible to get the version set again.Now it is the IncomingTcpConnections responsibility
to keep track of versions, if that one is closed, we are bound to get a new incoming
connection and therefor set the version correctly 


New Comment: 
Make IncomingTcpConnection responsible for version handling 


New Comment: 
+1 on my end. That's a very simple solution that I wasn't seeing. Can't figure out a way
it will break anything.<ul>	<li>0.7 &lt;-&gt; 0.7: No version mismatch ever, no reset ever
happens. All is well.</li>	<li>0.8 &lt;-&gt; 0.8: Same.</li>	<li>0.7 &lt;-&gt; 0.8: 0.8
-&gt; 0.7 will be killed (streaming) or retained but messages ignored (messaging). 0.7
-&gt; 0.8 will work, and 0.8 will know the version of 0.7. Future outgoing will use
correct version, and the pre-existing messaging connection starts sending messages at a
version that isn't ignored.</li>	<li>0.7 node restarted and upgraded to 0.8 talking to
0.8: Both incoming/outgoing go down, so version reset, then equivalent of 0.8 &lt;-&gt;
0.8.</li>	<li>0.7 node restarted and upgraded to 0.8 talking to 0.7: Both
incoming/outgoing go down, so version reset, then equivalent of 0.7 &lt;-&gt;
0.8.</li></ul> 


New Comment: 
Committed, with minor changes: logs pushed to debug, if logic around logging removed since
interpolation of {} automatically does that. 


