Pattern changes caused by commit: c0af7f604189f9e2a21fed397ad32c43a8aff89f

From: Facade-0
To:   Facade-1

From: Flyweight-4
To:   Flyweight-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5731.txt 

commit c0af7f604189f9e2a21fed397ad32c43a8aff89f
Author: Jonathan Ellis <jbellis@apache.org>

    avoid returning internal Cassandra classes over JMX
    patch by Nick Bailey; reviewed by yukim for CASSANDRA-2805



==================================
 Issue CASSANDRA-2805 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2805] Clean up mbeans that return Internal Cassandra types
-----------------

-----------------
Summary: Clean up mbeans that return Internal Cassandra types
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 21 Jun 2011 20:46:48 +0000
-----------------

-----------------
Resolved at: Sat, 31 Dec 2011 16:19:08 +0000
-----------------

-----------------
Assigned to: Nick Bailey
-----------------

-----------------
Description: 

We need to clean up wherever we return internal cassandra objects over jmx. Namely
CompactionInfo objects as well as Tokens. There may be a few other examples.

This is bad
for two reasons

1. You have to load the cassandra jar when querying these mbeans, which
sucks.<br/>2. Stuff breaks between versions when things are moved. For example, <a
href="https://issues.apache.org/jira/browse/CASSANDRA-1610" title="Pluggable Compaction"
class="issue-link" data-issue-key="CASSANDRA-1610"><del>CASSANDRA-1610</del></a> moves the
compaction related classes around. Any code querying those jmx mbeans in 0.8.0 is now
broken in 0.8.2. (assuming those moves stay in the 0.8 branch)

For things like
CompactionInfo we should just expose more mbean methods or serialize to something standard
like json.

I'd like to target this for 0.8.2. Since we've already broken compatibility
between 0.8.0 and 0.8.1, I'd say just fix this everywhere now.
 

-----------------

-----------------
Comments: 

New Comment: 
If you can list which methods to clean up, this would be a good ticket for the
surprisingly frequently asked, "What's a good place to get my feet wet in the Cassandra
code?" 


New Comment: 
Off the top of my head:<ul>	<li>A CompactionInfo object is returned when getting
compactions from the CompactionManager mbean.</li>	<li>Sub-types of Token objects are
returned when calling getTokenToEndpointMap (StorageService mbean i think).</li></ul>I'll
see if i can't look around for any more. 


New Comment: 
Maybe the JMX CompositeType could be returned instead of JSON? 


New Comment: 
Didn't know that existed. I guess it is specifically designed to address this kind of
problem?A quick look makes it seem overly complicated and verbose. If we want to avoid
json we can still allow for more complicated types like Map&lt;String&gt; and whatnot. The
main problem is just having to include the cassandra jar when querying jmx. From what I
can tell it's basically impossible to do jmx-type stuff on a non-jvm language anyway, so
maybe we don't really need json. 


New Comment: 
CompositeData is a JMX type that holds a key value map of other JMX types and can be
nested. <a
href="http://docs.jboss.org/jbossas/javadoc/4.0.1-sp1/jmx/javax/management/openmbean/CompositeDataSupport.html"
class="external-link"
rel="nofollow">http://docs.jboss.org/jbossas/javadoc/4.0.1-sp1/jmx/javax/management/openmbean/CompositeDataSupport.html</a>This
should allows us to return complex objects over JMX without having to resort to JSON
serializing things. 


New Comment: 
Unless someone else has already started, I am planning to take this one up. 


New Comment: 
Ed,I'm not sure I see the advantage of a JMX Composite type as opposed to using something
like a Map&lt;String, Int&gt; approach in any place that needs 'complex' types. 


New Comment: 
Based on my research so far scanning the MBean's and their internal users (NodeProbe,
NodeCmd and CliClient), there are 4 Cassandra-type dependencies: CompactionInfo,
CompactionType, Token, Range. Addressing them individually and discussing my plan:1.
CompactionInfo/CompactionType<br/>Now, CompactionInfo/CompactionType are manageable with a
Map as suggested but Range and Token are a bit tightly coupled and more involved.2.
Range<br/>Since Range already has the partitioner (either injected or implicit from
StorageService), I believe I can add 2 new constructors that look like:<br/>    public
Range(String left, String right)<br/>    public Range(String left, String right,
IPartitioner partitioner)and use the partioner.getTokenFactory().fromString() to curate
the left and right Token's.Also, to replace the StorageServiceMBean's:<br/>    public
Map&lt;Range, List&lt;String&gt;&gt; getRangeToEndpointMap(String keyspace);<br/>   
public Map&lt;Range, List&lt;String&gt;&gt; getPendingRangeToEndpointMap(String
keyspace);based on their usages, the Range in StorageService can be safely copied to
something like a Pair/Tuple.I noticed that the getRangeToAddressMap() is not exposed on
the StorageServiceMBean interface - is that by design (not that I am complaining because
right now, it is 1 less dependency to decouple but if it is an omission, I need to account
for it)?3. Token<br/>I can change all MBean interfaces that need a Token to the
corresponding String representation using partitioner.getTokenFactory().toString() and
then reconstruct back using the fromString() 


New Comment: 
I'm not sure you need to add any constructors to Range. How about just an asPair() method
or something similar that returns the tokens that make up the range converted to
strings?Everything else looks fine. getRangeToAddressMap() isn't needed because
getRangeToEndpointMap() is exposed.Another thing that might be nice to fix here is the
getNaturalEndpoints() method. It currently only takes a byte array or byteBuffer object
which makes it impossible to call from something like jconsole. It would be nice to
overload that with another method that takes a string as the key so you can call it from
jconsole. 


New Comment: 
Guarav, are you still working on this? 


New Comment: 
I'm probably going to take this and try and get it done quickly before the 1.0 freeze. I'd
really like to solve this problem before 1.0 and then be strict on preventing this in
future mbean methods. 


New Comment: 
Obviously I didn't get this done before the 1.0 freeze. And of course, this breaks between
0.8 and 1.0 since the serial version of CompactionInfo changes.Can we target this for
1.0.1? 


New Comment: 
I don't think we should break compatibility in a minor release. 


New Comment: 
I agree my main argument though is that we have a history of doing it unknowingly.
Especially something like this where any update the the CompactionInfo requires updating
the serialization version and then breaks compatibility.I suppose I can live with this in
1.1 and a 'let's try really really really hard not to break compatibility in the 1.0.x
releases. 


New Comment: 
Should take care of any instances where internal types are returned over jmx. 


New Comment: 
Nick,<ul class="alternate" type="square">	<li>I think double brace initialization should
be avoided at CompactionInfo#asMap. (yeah, I know Java syntax is sucks.)</li>	<li>I prefer
<tt>Integer/Long.toString(val)</tt> over <tt>new
Integer/Long(val).toString()</tt>.</li></ul>but, otherwise +1. 


New Comment: 
Alright removed the double brace <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/sad.png" height="16" width="16"
align="absmiddle" alt="" border="0"/>, and updated to use static toString. 


New Comment: 
+1 


