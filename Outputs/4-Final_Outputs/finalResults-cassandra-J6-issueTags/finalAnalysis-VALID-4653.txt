Pattern changes caused by commit: 4deb77971a43cf5a55bd2e2835255ff044137fc5

From: Decorator-0
To:   Decorator-1

From: Mediator-2
To:   Mediator-3


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4653.txt 

commit 4deb77971a43cf5a55bd2e2835255ff044137fc5
Author: Pavel Yaskevich <xedin@apache.org>

    Fix missing logging for some exceptions
    patch by Jonathan Ellis; reviewed by Pavel Yaskevich for CASSANDRA-2061



==================================
 Issue CASSANDRA-2061 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2061] Missing logging for some exceptions
-----------------

-----------------
Summary: Missing logging for some exceptions
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 27 Jan 2011 04:29:02 +0000
-----------------

-----------------
Resolved at: Tue, 16 Aug 2011 20:53:17 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 
<blockquote>
Since you are using ScheduledThreadPoolExecutor.schedule(), the exception was
swallowed by the FutureTask.

You will have to perform a get() method on the
ScheduledFuture, and you will get ExecutionException if there was any exception occured in
run().
</blockquote> 

-----------------

-----------------
Comments: 

New Comment: 
As near as I can tell, an exception thrown on a scheduled task will never kill the
executor, just like in TPE.  I don't remember why the author <span
class="error">&#91;me&#93;</span> wrote that code &#8211; probably because it was
replacing Timer and TimerTask, and an uncaught exception in a TimerTask <em>will</em> kill
the timer.Patch removes RetryingSTPE and replaces with DebuggableSTPE that has an
afterExecute copied from DTPE. 


New Comment: 
new patch also updates afterExecute in both classes to log error if default uncaught
exception handler is null 


New Comment: 
patch for 0.7 


New Comment: 
<ul>	<li>2061.txt doesn't completely remove RetryingSTPE.java, and doesn't replace the
usage in CFStore</li>	<li>2061-0.7.txt doesn't apply to the 0.7 branch</li></ul>Also, will
we need a separate patch for trunk? 


New Comment: 
<blockquote>2061.txt doesn't completely remove RetryingSTPE.java</blockquote>that's just
how svn diff works.<blockquote>and doesn't replace the usage in CFStore</blockquote>fixed. 


New Comment: 
<blockquote>2061-0.7.txt doesn't apply to the 0.7 branch</blockquote>fixed.  also applies
to trunk. 


New Comment: 
Based on anecdotal evidence (it exposed an exception I was expecting), this looks good.
But it looks like we can probably merge Debuggable(Scheduled)ThreadPool... they are appear
to be essentially identical now. 


New Comment: 
From the STPE javadoc, it sounds like STPE is more heavyweight than TPE and you don't want
to use the former when all you need API-wise is the latter.  I have not done the code
diving to confirm this though. 


New Comment: 
STPE also notes,<blockquote>While this class inherits from ThreadPoolExecutor, a few of
the inherited tuning methods are not useful for it. In particular, because it acts as a
fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to
maximumPoolSize have no useful effect.</blockquote>We've wanted bounded queues in the
past, and we definitely still use growable pools in places, so that's another reason to
keep both. 


New Comment: 
committed 


New Comment: 
reverted because of DynamicEndpointSnitchTest failure.  Not sure what is going on there
&#8211; I suspect some scheduled task is taking too long and keeping the DES update from
happening, but why that should be affected by this patch is obscure to me. 


New Comment: 
Integrated in Cassandra-0.7 #243 (See <a
href="https://hudson.apache.org/hudson/job/Cassandra-0.7/243/" class="external-link"
rel="nofollow">https://hudson.apache.org/hudson/job/Cassandra-0.7/243/</a>) 


New Comment: 
Figured out the problem.  Here's the new version of logExceptionsAfterExecute that fixes
it:<div class="code panel" style="border-width: 1px;"><div class="codeContent
panelContent"><pre class="code-java">     <span class="code-keyword">public</span> <span
class="code-keyword">static</span> void logExceptionsAfterExecute(<span
class="code-object">Runnable</span> r, Throwable t)     {-        <span
class="code-comment">// exceptions wrapped by FutureTask</span>-        <span
class="code-keyword">if</span> (r <span class="code-keyword">instanceof</span>
FutureTask&lt;?&gt;)+        <span class="code-comment">// Check <span
class="code-keyword">for</span> exceptions wrapped by FutureTask.  We <span
class="code-keyword">do</span> <span class="code-keyword">this</span> by calling get(),
which will</span>+        <span class="code-comment">// cause it to <span
class="code-keyword">throw</span> any saved exception.</span>+        <span
class="code-comment">//</span>+        <span class="code-comment">// Complicating things,
calling get() on a ScheduledFutureTask will block until the task</span>+        <span
class="code-comment">// is cancelled.  Hence, the extra isDone check beforehand.</span>+  
     <span class="code-keyword">if</span> ((r <span class="code-keyword">instanceof</span>
Future&lt;?&gt;) &amp;&amp; ((Future&lt;?&gt;) r).isDone())         {             <span
class="code-keyword">try</span>             {-                ((FutureTask&lt;?&gt;)
r).get();+                ((Future&lt;?&gt;) r).get();             }</pre></div></div> 


New Comment: 
v3 attached for trunk. 


New Comment: 
committed. 


