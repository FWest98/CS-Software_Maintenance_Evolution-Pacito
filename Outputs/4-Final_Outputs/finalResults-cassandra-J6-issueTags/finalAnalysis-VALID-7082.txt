Pattern changes caused by commit: be969899c954751f861b3861b3b709be56270ccd

From: Decorator-2
To:   Decorator-1

From: Flyweight-2
To:   Flyweight-1

From: Mediator-3
To:   Mediator-1

From: Strategy-0
To:   Strategy-1

From: Template Method-3
To:   Template Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7082.txt 

commit be969899c954751f861b3861b3b709be56270ccd
Author: Jonathan Ellis <jbellis@apache.org>

    avoid using global partitioner to estimate ranges in index sstables
    patch by jbellis; reviewed by yukim for CASSANDRA-4403



==================================
 Issue CASSANDRA-4403 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4403] cleanup uses global partitioner to estimate ranges in index sstables
-----------------

-----------------
Summary: cleanup uses global partitioner to estimate ranges in index sstables
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Mon, 2 Jul 2012 22:19:20 +0000
-----------------

-----------------
Resolved at: Wed, 4 Jul 2012 02:29:05 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

Introduced in <a href="https://issues.apache.org/jira/browse/CASSANDRA-1404"
title="Improve pre-cleanup estimate of disk space required" class="issue-link"
data-issue-key="CASSANDRA-1404"><del>CASSANDRA-1404</del></a>, CleanupTest is showing this
on trunk (on stderr, so test doesn't actually fail):
<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>    [junit]
java.lang.ClassCastException: org.apache.cassandra.dht.Token$KeyBound cannot be cast to
org.apache.cassandra.dht.Token    [junit]     at
org.apache.cassandra.dht.LocalToken.compareTo(LocalToken.java:24)    [junit]     at
org.apache.cassandra.dht.Range$1.compare(Range.java:386)    [junit]     at
org.apache.cassandra.dht.Range$1.compare(Range.java:383)    [junit]     at
java.util.Arrays.mergeSort(Arrays.java:1270)    [junit]     at
java.util.Arrays.sort(Arrays.java:1210)    [junit]     at
java.util.Collections.sort(Collections.java:159)    [junit]     at
org.apache.cassandra.dht.Range.normalize(Range.java:382)    [junit]     at
org.apache.cassandra.io.sstable.SSTableReader.getSampleIndexesForRanges(SSTableReader.java:570)
   [junit]     at
org.apache.cassandra.io.sstable.SSTableReader.estimatedKeysForRanges(SSTableReader.java:549)
   [junit]     at
org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy.getNextBackgroundTask(SizeTieredCompactionStrategy.java:111)
   [junit]     at
org.apache.cassandra.db.compaction.CompactionManager$1.runMayThrow(CompactionManager.java:136)
   [junit]     at org.apache.cassandra.utils.WrappedRunnable.run(WrappedRunnable.java:26) 
  [junit]     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)  
 [junit]     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)   
[junit]     at java.util.concurrent.FutureTask.run(FutureTask.java:138)    [junit]     at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)   
[junit]     at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)    [junit]
    at java.lang.Thread.run(Thread.java:662)</pre></div></div>
This doesn't happen on the
1.1 branch (less robust test?) but the problem is still there.
 

-----------------

-----------------
Comments: 

New Comment: 
Actually, looks like there are two places to fix: one in getExpectedCompactedFileSize that
I've attached a fix for, and another in STCS from <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4022" title="Compaction of hints can
get stuck in a loop" class="issue-link"
data-issue-key="CASSANDRA-4022"><del>CASSANDRA-4022</del></a>.  Not sure off the top of my
head how to fix that one so I'll leave to Yuki. <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
Decided to split the second part out to <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4404" title="tombstone estimation
needs to avoid using global partitioner against index sstables" class="issue-link"
data-issue-key="CASSANDRA-4404"><del>CASSANDRA-4404</del></a> since it affects only 1.2. 


