Pattern changes caused by commit: 447e45fd446bc11b9eb5d3d4cff5104936c9f02f

From: Decorator-0
To:   Decorator-1

From: Flyweight-5
To:   Flyweight-4

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4812.txt 

commit 447e45fd446bc11b9eb5d3d4cff5104936c9f02f
Author: Jonathan Ellis <jbellis@apache.org>

    add DecimalType
    patch by Rick Shaw; reviewed by jbellis for CASSANDRA-2883



==================================
 Issue CASSANDRA-2883 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2883] Add Support for BigDecimal Java data type as the "DecimalType" AbstractType
-----------------

-----------------
Summary: Add Support for BigDecimal Java data type as the "DecimalType" AbstractType
-----------------

-----------------
Issue type: Sub-task
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 12 Jul 2011 02:27:28 +0000
-----------------

-----------------
Resolved at: Tue, 6 Sep 2011 22:20:24 +0000
-----------------

-----------------
Assigned to: Rick Shaw
-----------------

-----------------
Description: 

The JDBC Driver suite needs support for <tt>BigDecimal</tt> to complete it's data type
support for <tt>ResultSet</tt> and <tt>PreparedStatement</tt>. This datatype could also be
used to represent numeric (non-integer) counter values. This is a very simple addition to
the collection of data types supported by Cassandra. It is quite versatile like
<tt>BigInteger</tt>. It can represent decimal numbers of virtually any precision and
scale. It is represented in Java as an arbitrary precision integer unscaled value ( think
<tt>IntegerType</tt> )and a 32-bit integer scale factor, which could be represented as a
<tt>IntegerType</tt> as well. This could share much of the logic from the
<tt>BigInteger</tt> (<tt>IntegerType</tt>) implementation. 

CQL would need to add a
datatype (decimal?). Decimal literal support is already provided in CQL.

This is low
hanging fruit.
 

-----------------

-----------------
Comments: 

New Comment: 
rebased to current trunk (after the dust settled) <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
I store a full 32 bit integer encoding for the scale part of the data into C*, which is
what the Java class <tt>BigDecimal</tt> supports. but for a scale factor that is crazy
huge. I could easily be talked into using just a byte to support 128 or 256 scale. that is
still 256 digits after the decimal... The unscaled value is stored like
<tt>IntegerType</tt>. 


New Comment: 
Don't we need to add antlr support for specifying the type as decimal(precision, scale)? 


New Comment: 
On second thought, just allowing any decimal is fine to start with. 


New Comment: 
committed 


