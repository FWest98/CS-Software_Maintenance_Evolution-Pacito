Pattern changes caused by commit: 8495560c2ba71621ab4326de7a87e9f3222ab8e4

From: Decorator-1
To:   Decorator-2

From: Flyweight-1
To:   Flyweight-2

From: Mediator-1
To:   Mediator-3

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7689.txt 

commit 8495560c2ba71621ab4326de7a87e9f3222ab8e4
Author: Vijay Parthasarathy <vijay2win@gmail.com>

    Support client Thrift SSL socket
    patch by Jason Brown; reviewed by Vijay for CASSANDRA-4239



==================================
 Issue CASSANDRA-4239 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4239] Support Thrift SSL socket
-----------------

-----------------
Summary: Support Thrift SSL socket
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 10 May 2012 20:54:33 +0000
-----------------

-----------------
Resolved at: Fri, 26 Oct 2012 05:36:40 +0000
-----------------

-----------------
Assigned to: Jason Brown
-----------------

-----------------
Description: 

Thrift has supported SSL encryption for a while now (<a
href="https://issues.apache.org/jira/browse/THRIFT-106" title="TSSLServerSocket"
class="issue-link" data-issue-key="THRIFT-106"><del>THRIFT-106</del></a>); we should allow
configuring that in cassandra.yaml
 

-----------------

-----------------
Comments: 

New Comment: 
Where is the keystore password stored? or is it entered on command line? 


New Comment: 
We'd probably store it passwordless on the server, similar to internode encryption. 
Unfortunately, it looks like thrift only supports the sync server, which kind of sucks. 


New Comment: 
One problem we're going to have here is specifying client encryption options, since
unfortunately when we added internode encryption we used some names that are a bit
generic:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>encryption_options:    internode_encryption:
none    keystore: conf/.keystore    keystore_password: cassandra    truststore:
conf/.truststore    truststore_password: cassandra    # More advanced defaults below:    #
protocol: TLS    # algorithm: SunX509    # store_type: JKS    # cipher_suites:
[TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA]</pre></div></div>If we can get
by with using the same keystore/truststore for clients as we do nodes, then this isn't a
big deal, otherwise we're going to either have some pretty confusing options for 1.1, or
have to push this to 1.2 to reorg. 


New Comment: 
I don't have a problem requiring we use the same truststore as I don't think there's
anything malicious you can do with internode communication that you can't do (more easily)
via RPC. 


New Comment: 
Linking factory approach described in <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4607" title="Support SSL Client
Encryption" class="issue-link"
data-issue-key="CASSANDRA-4607"><del>CASSANDRA-4607</del></a> 


New Comment: 
Re <a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=brandon.williams"
class="user-hover" rel="brandon.williams">Brandon Williams</a> comment, we could change to
server_encryption_options with the fallback of encryption_options and a log warning saying
it needs to be updated. 


New Comment: 
Here is one interesting requirement; to only have SSL for Thrift Clients and rest be
as-is.<br/>To expose secured Thrift Server socket to Firewalled Thrift Clients.Current
solution is discussion is either SSL or not in entirity <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/><br/>What if only certain clients are use
SSL.I locally made changes to code and tested to have two Thrift SYNC Server
sockets.<br/>Also SSLFactory and quite some code is duplication of
org.apache.thrift.transport.TSSLTransportFactoryLet me know if i going in wrong direction?
I can wait on James; but in a rush to get some SSL Thrift Client solution 


New Comment: 
Followed the advice from the comments of both this ticket and <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4662" title="Core support for Thrift
SSL integration" class="issue-link"
data-issue-key="CASSANDRA-4662"><del>CASSANDRA-4662</del></a>. Added SSL thrift support
ThriftSSLFactory for both client and server sockets. As the thrift library (0.7.0) only
supports SSL on the blocking sockets, did not modify the HSHA TServer implementation.
Added in TTrasportFactory implementations for both cli and stress. 


New Comment: 
Couple of concerns, 1) DatabaseDescriptor.getClientEncryptionOptions(): cli will now
require the user to load cassandra.yaml, i guess we can just do new
EncryptionOptions()<br/>   Keystore is not needed in the client, we might not need
it<br/>2) If encryption is enabled on HSHA currently we are not alerting the user/throw an
exception. 


New Comment: 
1) When Pavel and I discussed a few weeks, we thought that using the yaml would be a
convenience for defining the SSL settings. However, AFAIK, as no other client (cqlsh,
hector, astyanax, and so on) will be reading the yaml, so it seems reasonable not to tie
the cli to DatabaseDescriptor.2) I wasn't sure if we should just ignore the SSL settings
when bringing up the HSHA server (o.a.c.t.CustomTHsHaServer.Factory), log a message, or
fail to launch. Now that you bring it up, probably the best choice is to throw an
exception: if the user explicitly defined the client encryption options, they should
probably be informed (in a blatant manner) that the settings will not work with HSHA. 


New Comment: 
As per Vijay's recommendation, I added throwing of an exception when using a non-blocking
server type (async or hsha) and client encryption options are enabled. Also, cli no longer
depends on using DatabaseDescriptor/yaml as a conenience for getting client SSL
settings.Also, Added in the backward compatibility for 'server_encryption_options' in
DatabaseDescription (as per Jake). We log a warning, and use the values as set up for
'encryption_options'. 


New Comment: 
Hi Jason, V3 attached is the same as v2 with following changes.<ul>	<li>Removed -ks and
-kspw from both cli and stress tool</li>	<li>moved SSLTransportFactory in stress to
o.a.c.c.t</li>	<li>Removed TSSLFactory, and removed some unused imports.</li></ul>What do
you think? 


New Comment: 
1) I'm curious as to why you removed -ks and -kspw. Admittedly, I was following the
options we allow in the yaml for {server|client}_encryption_options.<br/>2) Removing
ThriftSSLFactory, as long as there's very little code that's duplicated in the guys who
were using it (all the setup with o.a.t.t.TSSLTransportFactory), then I think there's no
harm in yanking the extra class <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>.Otherwise, LGTM. 


New Comment: 
<blockquote>I'm curious as to why you removed -ks and -kspw.</blockquote>KS is not needed
in the client, and you can distribute TS without compromising your private keys which is
stored in KS. KS is in the yaml because the server needs it. Basically in v3 i removed the
dead code... Hope that helps. 


New Comment: 
Committed to trunk, Thanks! 


New Comment: 
Ahh, ok, makes sense about client not needing the keystore. Let's ship it. 


New Comment: 
Is there any reason we couldn't rename the class
<tt>tools/stress/src/org/apache/cassandra/cli/transport/SSLTransportFactory.java</tt> so
that it does not conflict with
<tt>src/java/org/apache/cassandra/cli/transport/SSLTransportFactory.java</tt> (for example
when an IDE is configured to include source folders containing both)?  Or perhaps there is
some straightforward way to combine the two (they look nearly identical). 


New Comment: 
Looks like intelij is complaining? <br/>The problem is that if we rename it will cause
confusion for the end user, the problem is reusing is that TTransport doesn't expose
hostname and port. SST in the core uses CliSessionState to get around the problem. 


New Comment: 
Maybe I'm missing something.  How would it confuse users if you renamed
<tt>tools/stress/src/org/apache/cassandra/cli/transport/SSLTransportFactory.java</tt> (aka
the SSL transport used in stress), or changed the package to something other than
<tt>org.apache.cassandra.cli.transport</tt>? 


New Comment: 
Currently to use the transport factory the user has to use -tr
org.apache.cassandra.cli.transport.SSLTransportFactory in the clients (including stress
tool), but if we rename in stress the user has to use
org.apache.cassandra.cli.transport.SSLTransportFactory for cli and everything else except
cassandra-stress.Plz look at Session.java<div class="code panel" style="border-width:
1px;"><div class="codeContent panelContent"><pre class="code-java">            <span
class="code-keyword">if</span> (cmd.hasOption(<span class="code-quote">"tf"</span>))      
         transportFactory = validateAndSetTransportFactory(cmd.getOptionValue(<span
class="code-quote">"tf"</span>));</pre></div></div>I am open for other idea's or forcing
the user to have this exception (documenting it?), let me know. Thanks! 


New Comment: 
<blockquote>...the problem is reusing is that TTransport doesn't expose hostname and port.
SST in the core uses CliSessionState to get around the problem.</blockquote>There is
always an instance of this factory, couldn't you create a ctor that accepted arguments for
hostname, protocol, cipher suites, etc (including one that accepted a list of hosts to
shuffle through, for stress)?<blockquote>Currently to use the transport factory the user
has to use -tr org.apache.cassandra.cli.transport.SSLTransportFactory in the clients
(including stress tool)...</blockquote>How many other transports other than this, and the
default does stress need?  Couldn't the argument simply be -ssl or something, negating the
need to supply the entire class name? 


New Comment: 
Hey guys,Using a TTransportFactory derived class comes from <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4609" title="Add thrift transport
factory impl to cassandra-cli" class="issue-link"
data-issue-key="CASSANDRA-4609"><del>CASSANDRA-4609</del></a>, and that's what both cli
and stress use for a pluggable thrift transport. The problem with using a ctor, which I
first tried when implementing this (to alleviate depending on stress's Session and cli's
CLiSessionState, respectively), was that you end up needing to special case the
TTransportFactory implementation to make sure you get all the needed values to the ctor.
As this scheme for cli and stress was meant to be pluggable, having that special casing
inside of the c* code seemed contrary to making it abstract.I think moving stress's
SSLTransportFactory class to different package is reasonable. 


New Comment: 
Alright, attached patch moves the SSLTF and updated help. 


New Comment: 
+1 for moving the class to a different package, but perhaps change the help comment a bit
as SSLTF is a Thrift SSL connector, so it' not really an 'Exception', per se. Maybe just
"Fully-qualified TTransportFactory class name for creating a connection. Note: For Thrift
over SSL, use org.apache.cassandra.stress.SSLTransportFactory."Otherwise, LGTM. 


