Pattern changes caused by commit: bafa3059cc404045c570050081f7263f3fcc35a9

From: Facade-1
To:   Facade-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5483.txt 

commit bafa3059cc404045c570050081f7263f3fcc35a9
Author: Sylvain Lebresne <slebresne@apache.org>

    add new upgradesstables nodetool command
    patch by slebresne; reviewed by jbellis for CASSANDRA-3406



==================================
 Issue CASSANDRA-3406 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3406] Create a nodetool upgrade_sstables to avoid using scrubs for tasks it wasn't intended to.
-----------------

-----------------
Summary: Create a nodetool upgrade_sstables to avoid using scrubs for tasks it wasn't intended to.
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 26 Oct 2011 16:39:28 +0000
-----------------

-----------------
Resolved at: Thu, 17 Nov 2011 08:57:51 +0000
-----------------

-----------------
Assigned to: Sylvain Lebresne
-----------------

-----------------
Description: 

Scrub was intended to check a data file is not corrupted and to try to correct some form
of corruption and discard the data when it can't repair. But we are now using it also
for:
<ul>	<li>major upgrade, to have sstable in the new data format for streaming sake
(that one could be "fixed" independently by supporting old format during
streaming)</li>	<li>to force the compaction of existing sstables after changing the
compression algorithm</li></ul>
We should probably provide a separate tool/command for
those two last tasks since:
<ul>	<li>we could have a better name, like upgrade_sstables or
rewrite_sstables for that operation</li>	<li>we could avoid the automatic snapshot that
scrub does (and is not expected by users for those operations)</li>	<li>make it slightly
quicker/simpler by avoiding the corruption detection code</li></ul> 

-----------------

-----------------
Comments: 

New Comment: 
Honestly I'm not finding the benefits here very compelling in exchange for the additional
complexity.  We're still doing the same amount of i/o, and 99% as much CPU (most of the
scrub "corruption detection" only kicks in if there's an exception trying to rewrite). 


New Comment: 
Parts of the patch is just refactoring slightly CompactionManager to avoid some existing
code duplication between performCleanup and performScrub. I don't claim such refactoring
is a priority or anything, but I would venture that this is a good thing in itself. Once
that refactoring is done, the new operation is literally 4 lines. Then there is the cruft
to make it callable from nodetool, but overall it doesn't sound like much complexity to
me.Now for the benefits, it is clearly <b>not</b> for saving i/o or CPU. The goal
is:<ul>	<li>to avoid having an operation called 'scrub' part of the normal upgrade path
because it's a scary name. Yes, it's just a naming thing (but names are important) and yes
nobody came complaining about that name but let's be honest, scrub was not created for the
action of rewriting sstables post-upgrade and the name is not adapted.</li>	<li>scrub does
an automatic snapshot. It's totally reasonable for scrub initial purpose given the fact it
can discard data (albeit corrupted ones), but it's just annoying when you've already
snapshotted (and maybe move the snapshot in some safe place) everything just before your
upgrade because you're a good guy.</li>	<li>scrub can discard data. I think this is
something that should never go unnoticed. By pushing the use of scrub for case where there
is absolutely no reason to suspect corruption, it makes it more likely to have it be
unnoticed, at least at first.</li></ul>So yes, all of this is mostly details, and sorry to
be so verbose for such a minor issue but I happen to think that such details are important
and that this ticket would be an improvement. 


New Comment: 
Can you split it into refactor + newscrub patches?(Incidently I think having snapshot on
the upgrade path is a Very Good Thing Indeed, although scrub isn't quite the best way to
do that.) 


New Comment: 
<blockquote>Can you split it into refactor + newscrub patches?</blockquote>Will
do.<blockquote>(Incidently I think having snapshot on the upgrade path is a Very Good
Thing Indeed, although scrub isn't quite the best way to do that.)</blockquote>I couldn't
agree more but it must be before the upgrade, scrub is run after, so not the good place at
all. 


New Comment: 
Patches attached with the refactor in its own patch. 


New Comment: 
+1 


