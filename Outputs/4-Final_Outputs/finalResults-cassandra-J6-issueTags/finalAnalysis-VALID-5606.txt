Pattern changes caused by commit: 8623bfb19f52a83472c673b1ad5acf06b40795c9

From: Facade-1
To:   Facade-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5606.txt 

commit 8623bfb19f52a83472c673b1ad5acf06b40795c9
Author: Pavel Yaskevich <xedin@apache.org>

    'describe ring' moved from CLI to nodetool and available through JMX
    patch by Jackson Chung; reviewed by Pavel Yaskevich for CASSANDRA-3220



==================================
 Issue CASSANDRA-3220 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3220] add describe_ring to cli
-----------------

-----------------
Summary: add describe_ring to cli
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 16 Sep 2011 18:24:13 +0000
-----------------

-----------------
Resolved at: Wed, 7 Dec 2011 18:27:46 +0000
-----------------

-----------------
Assigned to: Jackson Chung
-----------------

-----------------
Description: 

Lately I have found the describe_ring feature was needed to debug/analyze issue, but the
cli does not have this available.

So just in case it is useful, please see the attached
patch.

here is the sample output:
<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>[default@unknown] help;......decr
                   Decrements a counter column.describe ring           Describe the token
range information.describe cluster        Describe the cluster
configuration.......[default@unknown] help describe ring;describe ring
&lt;keyspace&gt;;Describes the token range settings for the named keyspace.Required
Parameters:- keyspace: Name of the keyspace to describe the token range.Examples:describe
ring &lt;keyspace&gt;; - Describes the token range settings for the named
keyspace.[default@unknown] describe ring Keyspace3;TokenRange:        
TokenRange(start_token:9739248273232290250409572410247679660,
end_token:9739248273232290250409572410247679660, endpoints:[192.168.0.125],
rpc_endpoints:[192.168.0.125], endpoint_details:[EndpointDetails(host:192.168.0.125,
port:9160, datacenter:168)])[default@unknown] describe ring fooks;Keyspace with name
'fooks' wasn't found, , please, authorize to one of the keyspaces first.[default@unknown]
describe ring;Syntax error at position 13: mismatched input ';' expecting set
null</pre></div></div> 

-----------------

-----------------
Comments: 

New Comment: 
&#8212; src/java/org/apache/cassandra/cli/CliClient.java    (revision 1171325)<br/>&#8212;
src/java/org/apache/cassandra/cli/Cli.g     (revision 1171325)<br/>&#8212;
src/resources/org/apache/cassandra/cli/CliHelp.yaml (revision 1171325) 


New Comment: 
more sample... i didn't actually test the authentication keyspace and actually on a
cluster, but they should work.<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>[default@unknown] describe ring
system;nullInvalidRequestException(why:There is no ring for the keyspace: system)       
at org.apache.cassandra.thrift.Cassandra$describe_ring_result.read(Cassandra.java:23267)  
     at
org.apache.cassandra.thrift.Cassandra$Client.recv_describe_ring(Cassandra.java:1262)      
 at org.apache.cassandra.thrift.Cassandra$Client.describe_ring(Cassandra.java:1237)       
at org.apache.cassandra.cli.CliClient.executeDescribeRing(CliClient.java:1437)        at
org.apache.cassandra.cli.CliClient.executeCLIStatement(CliClient.java:288)        at
org.apache.cassandra.cli.CliMain.processStatementInteractive(CliMain.java:222)        at
org.apache.cassandra.cli.CliMain.main(CliMain.java:350)</pre></div></div> 


New Comment: 
What part of this was necessary to troubleshoot?  Is it feasible to add that to nodetool
ring instead? 


New Comment: 
<blockquote>What part of this was necessary to troubleshoot?</blockquote>It's kind of pain
to test things like <a href="https://issues.apache.org/jira/browse/CASSANDRA-1777"
title="The describe_host API method is misleading in that it returns the interface
associated with gossip traffic" class="issue-link"
data-issue-key="CASSANDRA-1777"><del>CASSANDRA-1777</del></a> without it, since we don't
have anything off-the-shelf that calls describe_ring.  I had to write my own test app for
that saga. 


New Comment: 
hm, i was running into issue reported in #3044 and #2388<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>2011-09-14
22:58:44,004 ERROR CliDriver (SessionState.java:printError(343)) - Failed with exception
java.io.IOException:java.io.IOException: Could not get input splitsjava.io.IOException:
java.io.IOException: Could not get input splits    at
org.apache.hadoop.hive.ql.exec.FetchOperator.getNextRow(FetchOperator.java:341)    at
org.apache.hadoop.hive.ql.exec.FetchTask.fetch(FetchTask.java:133)    at
org.apache.hadoop.hive.ql.Driver.getResults(Driver.java:1114)    at
org.apache.hadoop.hive.cli.CliDriver.processCmd(CliDriver.java:187)    at
org.apache.hadoop.hive.cli.CliDriver.processLine(CliDriver.java:241)    at
org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:456)    at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)    at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   
at java.lang.reflect.Method.invoke(Method.java:597)    at
org.apache.hadoop.util.RunJar.main(RunJar.java:156)Caused by: java.io.IOException: Could
not get input splits    at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getSplits(ColumnFamilyInputFormat.java:157)
   at
org.apache.hadoop.hive.cassandra.input.HiveCassandraStandardColumnInputFormat.getSplits(HiveCassandraStandardColumnInputFormat.java:326)
   at org.apache.hadoop.hive.ql.exec.FetchOperator.getRecordReader(FetchOperator.java:281)
   at org.apache.hadoop.hive.ql.exec.FetchOperator.getNextRow(FetchOperator.java:320)   
... 10 moreCaused by: java.util.concurrent.ExecutionException: java.io.IOException: failed
connecting to all endpoints    at
java.util.concurrent.FutureTask$Sync.innerGet(FutureTask.java:222)    at
java.util.concurrent.FutureTask.get(FutureTask.java:83)    at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getSplits(ColumnFamilyInputFormat.java:153)
   ... 13 moreCaused by: java.io.IOException: failed connecting to all endpoints    at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat.getSubSplits(ColumnFamilyInputFormat.java:234)
   at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat.access$200(ColumnFamilyInputFormat.java:70)
   at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat$SplitCallable.call(ColumnFamilyInputFormat.java:190)
   at
org.apache.cassandra.hadoop.ColumnFamilyInputFormat$SplitCallable.call(ColumnFamilyInputFormat.java:175)
   at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)    at
java.util.concurrent.FutureTask.run(FutureTask.java:138)    at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)    at
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)    at
java.lang.Thread.run(Thread.java:662)</pre></div></div>The "failed connecting to all
endpoints" was actually supposedly printing the endpoints:<br/>throw new
IOException("failed connecting to all endpoints " + StringUtils.join(range.endpoints,
","));Since the stacktrace doesn't print anything after the endpoints, that's when i
learned that my range.endpoints are null, and hence prompted me to find out what my range
is.The reason i choose to do it in the cli as I was thinking on the how the code
internally has been getting it and see mostly using the thrift API. I could see if that
could be done in nodetool, but could you explain why it is better? 


New Comment: 
There are some very unhelpful errors when mistakes are made:<div class="preformatted
panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>[default@unknown] describe ring;Syntax error at position 13: mismatched
input ';' expecting set null[default@unknown] describe ring Keyspace1;TokenRange:        
TokenRange(start_token:113427455640312821154458202477256070484,
end_token:170141183460469231731687303715884105726, endpoints:[10.179.111.137],
rpc_endpoints:[10.179.111.137], endpoint_details:[])       
TokenRange(start_token:56713727820156410577229101238628035242,
end_token:113427455640312821154458202477256070484, endpoints:[10.179.64.227],
rpc_endpoints:[10.179.64.227], endpoint_details:[EndpointDetails(host:10.179.64.227,
port:9160, datacenter:null)])       
TokenRange(start_token:170141183460469231731687303715884105726,
end_token:56713727820156410577229101238628035242, endpoints:[10.179.65.102],
rpc_endpoints:[10.179.65.102], endpoint_details:[])[default@unknown] describe ring system;
  null[default@unknown] describe ring slkdhjsldjf;Keyspace with name 'slkdhjsldjf' wasn't
found, , please, authorize to one of the keyspaces first.</pre></div></div>In particular:
omitting the keyspace or using 'system'.  Also, datacenter is null? 


New Comment: 
i agree on all the points. I could use a help on what should be expected though. For
instance, when "use keyspace" is issued without keyspace name, you get the similar
output:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>[default@Keyspace3] use keyspace;Syntax
error at position 4: mismatched input 'keyspace' expecting set null</pre></div></div>The
stacktrace is:<br/>java.lang.RuntimeException: Syntax error at position 4: mismatched
input 'keyspace' expecting set null<br/>        at
org.apache.cassandra.cli.CliCompiler.compileQuery(CliCompiler.java:88)<br/>        at
org.apache.cassandra.cli.CliClient.executeCLIStatement(CliClient.java:197)<br/>        at
org.apache.cassandra.cli.CliMain.processStatementInteractive(CliMain.java:222)<br/>       
at org.apache.cassandra.cli.CliMain.main(CliMain.java:350)<br/>Caused by:
java.lang.RuntimeException: Syntax error at position 4: mismatched input 'keyspace'
expecting set null<br/>        at
org.apache.cassandra.cli.CliParser.reportError(CliParser.java:197)<br/>        at
org.apache.cassandra.cli.CliParser.entityName(CliParser.java:7745)<br/>        at
org.apache.cassandra.cli.CliParser.keyspace(CliParser.java:7259)<br/>        at
org.apache.cassandra.cli.CliParser.useKeyspace(CliParser.java:5713)<br/>        at
org.apache.cassandra.cli.CliParser.statement(CliParser.java:528)<br/>        at
org.apache.cassandra.cli.CliParser.root(CliParser.java:229)<br/>        at
org.apache.cassandra.cli.CliCompiler.compileQuery(CliCompiler.java:79)In any case. For
this, I think I could use the "describe keyspace" pattern, which in the case where no
keyspace is given, it ask you to use one first; and then if you are authenticated to one,
and run describe ring without the keyspace name, describe the current one. Agree?<div
class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>[default@unknown] describe;Authenticate to a Keyspace, before using
`describe` or `describe &lt;column_family&gt;`[default@unknown] use
Keyspace3;Authenticated to keyspace: Keyspace3[default@Keyspace3] describe;Keyspace:
Keyspace3:  Replication Strategy: org.apache.cassandra.locator.SimpleStrategy  Durable
Writes: true    Options: [replication_factor:4]  Column Families:    ColumnFamily: testcf 
    Key Validation Class: org.apache.cassandra.db.marshal.BytesType      Default column
value validator: org.apache.cassandra.db.marshal.BytesType      Columns sorted by:
org.apache.cassandra.db.marshal.BytesType      Row cache size / save period in seconds /
keys to save : 0.0/0/all      Key cache size / save period in seconds: 100.0/14400      GC
grace seconds: 864000      Compaction min/max thresholds: 4/32      Read repair chance:
1.0      Replicate on write: true      Built indexes: []      Compaction Strategy:
org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy</pre></div></div>For using
system, it error out because:<br/><span class="error">&#91;default@system&#93;</span>
describe ring system;<br/>null<br/>InvalidRequestException(why:There is no ring for the
keyspace: system)<br/>        at
org.apache.cassandra.thrift.Cassandra$describe_ring_result.read(Cassandra.java:23267)<br/>
       at
org.apache.cassandra.thrift.Cassandra$Client.recv_describe_ring(Cassandra.java:1262)<br/> 
      at
org.apache.cassandra.thrift.Cassandra$Client.describe_ring(Cassandra.java:1237)<br/>      
 at org.apache.cassandra.cli.CliClient.executeDescribeRing(CliClient.java:1437)<br/>      
 at org.apache.cassandra.cli.CliClient.executeCLIStatement(CliClient.java:288)<br/>       
at org.apache.cassandra.cli.CliMain.processStatementInteractive(CliMain.java:222)<br/>    
   at org.apache.cassandra.cli.CliMain.main(CliMain.java:350)It's probably because this
keyspace uses internal strategy "org.apache.cassandra.locator.LocalStrategy"?  In any
case, exception is thrown because in the CassandraServer.java:<div class="code panel"
style="border-width: 1px;"><div class="codeContent panelContent"><pre
class="code-java"><span class="code-keyword">public</span> List&lt;TokenRange&gt;
describe_ring(<span class="code-object">String</span> keyspace)<span
class="code-keyword">throws</span> InvalidRequestException    {        <span
class="code-keyword">if</span> (keyspace == <span class="code-keyword">null</span> ||
!Schema.instance.getNonSystemTables().contains(keyspace))            <span
class="code-keyword">throw</span> <span class="code-keyword">new</span>
InvalidRequestException(<span class="code-quote">"There is no ring <span
class="code-keyword">for</span> the keyspace: "</span> + keyspace);</pre></div></div>So my
option in the cli are either:<br/>1) do what CassandraServer does: invalidate it if the
keyspace given is a system table, make some pretty error<br/>2) catch the invalidrequest
exception, check if it is about "There is no ring"...  in the message, and error out with
some pretty print.(i don't like the 2nd option because the message is currently hardcoded
within the CassandraServer. There is no enum or constant for message string to reference
on.I don't think the datacenter=null is part of the problem here. It looks to be another
bug with the datacenter value not populated to the EndpointDetails. If anything, it is a
bug from <a href="https://issues.apache.org/jira/browse/CASSANDRA-2882"
class="external-link"
rel="nofollow">https://issues.apache.org/jira/browse/CASSANDRA-2882</a> ? 


New Comment: 
I think that this should handle empty &lt;keyspace&gt; argument in the same way `describe`
does. <br/>If you want to show exception message instead of "null" you should catch
InvalidRequestionException and TException inside of your method.<br/>According to
"datacenter=null" problem, it was already fixed by <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3403" title="describe_ring topology
information is wrong/incomplete" class="issue-link"
data-issue-key="CASSANDRA-3403"><del>CASSANDRA-3403</del></a>.Also you have a doubled ","
in the error message, it should be "String.format("Keyspace with name '%s' wasn't found,
please, authorize to one of the keyspaces first.", entityName)". 


New Comment: 
v2:<span class="error">&#91;default@unknown&#93;</span> describe ring system;<br/>There is
no ring for the keyspace: system<span class="error">&#91;default@unknown&#93;</span>
describe ring;       <br/>Authenticate to a Keyspace, before using `describe ring` or
`describe ring &lt;keyspace&gt;`<span class="error">&#91;default@blah&#93;</span> describe
ring; <br/>TokenRange: <br/>        TokenRange(start_token:0,
end_token:56713727820156410577229101238628035242, endpoints:<span
class="error">&#91;/0.0.0.0&#93;</span>)<br/>       
TokenRange(start_token:56713727820156410577229101238628035242,
end_token:113427455640312821154458202477256070485, endpoints:<span
class="error">&#91;/0.0.0.0&#93;</span>)<br/>       
TokenRange(start_token:113427455640312821154458202477256070485, end_token:0,
endpoints:<span class="error">&#91;0.0.0.0&#93;</span>)<span
class="error">&#91;default@blah&#93;</span> describe ring blah;<br/>TokenRange: <br/>     
  TokenRange(start_token:0, end_token:56713727820156410577229101238628035242,
endpoints:<span class="error">&#91;/0.0.0.0&#93;</span>)<br/>       
TokenRange(start_token:56713727820156410577229101238628035242,
end_token:113427455640312821154458202477256070485, endpoints:<span
class="error">&#91;/0.0.0.0&#93;</span>)<br/>       
TokenRange(start_token:113427455640312821154458202477256070485, end_token:0,
endpoints:<span class="error">&#91;0.0.0.0&#93;</span>)<span
class="error">&#91;default@blah&#93;</span> describe ring dah; <br/>Sorry, no Keyspace was
found with name: dah 


New Comment: 
Committed with minor changes such as: removed unnecessary return and if/else statements,
changed output format to return TokenRange statements without any header. 


New Comment: 
<blockquote>Is it feasible to add that to nodetool ring instead?</blockquote>I still think
nodetool is the right place to put this.  cli / cqlsh should be interacting with data,
let's keep the ops part in nodetool as much as possible. 


New Comment: 
ok, i have done a nodetool version. most of the thing work.. except somehow
jconsole/jmxterm doesn't. First the nodetool output:$ nodetool -h zaranth -p 8199 
describering Keyspace1<br/>TokenRange: <br/>        TokenRange(start_token:0,
end_token:56713727820156410577229101238628035242, endpoints:<span
class="error">&#91;184.106.233.162&#93;</span>, rpc_endpoints:<span
class="error">&#91;184.106.233.162&#93;</span>, endpoint_details:<span
class="error">&#91;EndpointDetails(host:184.106.233.162, datacenter:datacenter1,
rack:rack1)&#93;</span>)<br/>       
TokenRange(start_token:56713727820156410577229101238628035242,
end_token:113427455640312821154458202477256070485, endpoints:<span
class="error">&#91;184.106.203.196&#93;</span>, rpc_endpoints:<span
class="error">&#91;184.106.203.196&#93;</span>, endpoint_details:<span
class="error">&#91;EndpointDetails(host:184.106.203.196, datacenter:datacenter1,
rack:rack1)&#93;</span>)<br/>       
TokenRange(start_token:113427455640312821154458202477256070485, end_token:0,
endpoints:<span class="error">&#91;184.106.204.143&#93;</span>, rpc_endpoints:<span
class="error">&#91;184.106.204.143&#93;</span>, endpoint_details:<span
class="error">&#91;EndpointDetails(host:184.106.204.143, datacenter:datacenter1,
rack:rack1)&#93;</span>)$nodetool -h zaranth -p 8199  describering <br/>Missing keyspace
argument for describering.<br/>usage: java org.apache.cassandra.tools.NodeCmd --host
&lt;arg&gt; &lt;command&gt;<br/>...$ nodetool -h zaranth -p 8199  describering system<br/>
There is no ring for the keyspace: system<br/>usage: java
org.apache.cassandra.tools.NodeCmd --host &lt;arg&gt; &lt;command&gt;<br/>...$ nodetool -h
zaranth -p 8199  describering thisdoesnotexist<br/>There is no ring for the keyspace:
thisdoesnotexist<br/>usage: java org.apache.cassandra.tools.NodeCmd --host &lt;arg&gt;
&lt;command&gt;now the problem with jconsole/jmxterm:<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>$&gt;run
getTokenRanges Keyspace1 #calling operation getTokenRanges of mbean
org.apache.cassandra.db:type=StorageServiceorg.cyclopsgroup.jmxterm.io.RuntimeIOException:
Runtime IO exception: error unmarshalling return; nested exception is:        
java.io.StreamCorruptedException: unexpected block data        at
org.cyclopsgroup.jmxterm.cc.CommandCenter.doExecute(CommandCenter.java:157)        at
org.cyclopsgroup.jmxterm.cc.CommandCenter.execute(CommandCenter.java:207)        at
org.cyclopsgroup.jmxterm.boot.CliMain.execute(CliMain.java:156)        at
org.cyclopsgroup.jmxterm.boot.CliMain.main(CliMain.java:48)        at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     
  at java.lang.reflect.Method.invoke(Method.java:597)        at
org.codehaus.classworlds.Launcher.launchStandard(Launcher.java:353)        at
org.codehaus.classworlds.Launcher.launch(Launcher.java:264)        at
org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)        at
org.codehaus.classworlds.Launcher.main(Launcher.java:375)        at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     
  at java.lang.reflect.Method.invoke(Method.java:597)        at
org.codehaus.classworlds.uberjar.boot.Bootstrapper.bootstrap(Bootstrapper.java:209)       
at org.codehaus.classworlds.uberjar.boot.Bootstrapper.main(Bootstrapper.java:116)Caused
by: java.rmi.UnmarshalException: error unmarshalling return; nested exception is:        
java.io.StreamCorruptedException: unexpected block data        at
sun.rmi.server.UnicastRef.invoke(UnicastRef.java:173)        at
com.sun.jmx.remote.internal.PRef.invoke(Unknown Source)        at
javax.management.remote.rmi.RMIConnectionImpl_Stub.invoke(Unknown Source)        at
javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.invoke(RMIConnector.java:995)
       at org.cyclopsgroup.jmxterm.cmd.RunCommand.execute(RunCommand.java:137)        at
org.cyclopsgroup.jmxterm.cc.CommandCenter.doExecute(CommandCenter.java:189)        at
org.cyclopsgroup.jmxterm.cc.CommandCenter.doExecute(CommandCenter.java:153)        ... 17
moreCaused by: java.io.StreamCorruptedException: unexpected block data        at
java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1342)        at
java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)        at
java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)        at
java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)        at
java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)        at
java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)        at
java.util.ArrayList.readObject(ArrayList.java:593)        at
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)        at
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)        at
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)     
  at java.lang.reflect.Method.invoke(Method.java:597)        at
java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:974)        at
java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1848)        at
java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)        at
java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)        at
java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)        at
sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:306)        at
sun.rmi.server.UnicastRef.invoke(UnicastRef.java:155)        ... 23 more</pre></div></div> 


New Comment: 
new patch (v3) for nodetool 


New Comment: 
attaching patch3220.v3.diff .. note this patch still have the above mentioned problem of
jconsole/jmxtermalso i called <div class="code panel" style="border-width: 1px;"><div
class="codeContent panelContent"><pre
class="code-java">DatabaseDescriptor.loadSchemas();<span class="code-keyword">if</span>
(!Schema.instance.getNonSystemTables().contains(keyspace))</pre></div></div>not sure if
that's too heavy ( loadSchemas()).The CassandraServer.describe_ring is refactor'ed to call
StorageService.instance.getTokenRanges(keyspace); 


New Comment: 
Calling loadSchemas() on the client side on each request is inappropriate, all validations
should be done on the server size. You can add "describeRing" JMX method to the
StorageServiceMBean instead of "getTokenRanges(String)" and do all keyspace validation in
there. 


New Comment: 
ok patch3220.v4.diff1) remove loadSchema/check for keyspace on client<br/>2) move the
check to StorageService, make it throw IRE<br/>3) handle the IRE in the NodeCmd just like
CliClient<br/>4) change all the name to describeRing to be consistentstill have problem if
running simply via jmx 


New Comment: 
v4 looks much better. Jonathan, what do we do with changes made to CLI, should I revert
them? 


New Comment: 
Yes, let's remove it from the cli in favor of nodetool. 


New Comment: 
working on the "unexpected block data"it seems like i cannot return any object coming from
thrift in the jmx (./interface/thrift/gen-java/org/apache/cassandra/thrift/*)I tried by
creating a test method that simply return a TokenRange, a KeyRange, an EndpointDetails in
the StorageServiceMBean (return new &lt;the object&gt;())Is there a restriction on that?
Maybe I should make the jmx method to return a String (List of String?) instead? 


New Comment: 
<blockquote>it seems like i cannot return any object coming from thrift in the jmx
</blockquote>Odd &#8211; it <b>should</b> work since Thrift objects implement
Serializable, but then again, it doesn't totally shock me that you're running into
problems since that's definitely not a common use case.<blockquote>Maybe I should make the
jmx method to return a String (List of String?) instead?</blockquote>That's probably the
best solution.  We already prefer to avoid non-primitive types over JMX (<a
href="https://issues.apache.org/jira/browse/CASSANDRA-2805" title="Clean up mbeans that
return Internal Cassandra types" class="issue-link"
data-issue-key="CASSANDRA-2805"><del>CASSANDRA-2805</del></a>). 


New Comment: 
ok, converting the methods on the jmx to return a list of String instead then.PS: i've
tried to use guava Lists.transform, but that fails with the following<div
class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>$ nodetool -h faranth describering Keyspace1TokenRange: Exception in
thread "main" java.lang.reflect.UndeclaredThrowableException        at
$Proxy0.describeRing(Unknown Source)        at
org.apache.cassandra.tools.NodeProbe.describeRing(NodeProbe.java:624)        at
org.apache.cassandra.tools.NodeCmd.printDescribeRing(NodeCmd.java:766)        at
org.apache.cassandra.tools.NodeCmd.main(NodeCmd.java:737)Caused by:
java.rmi.UnmarshalException: error unmarshalling return; nested exception is:        
java.io.WriteAbortedException: writing aborted; java.io.NotSerializableException:
org.apache.cassandra.service.StorageService$3        at
sun.rmi.server.UnicastRef.invoke(UnicastRef.java:173)        at
com.sun.jmx.remote.internal.PRef.invoke(Unknown Source)        at
javax.management.remote.rmi.RMIConnectionImpl_Stub.invoke(Unknown Source)        at
javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.invoke(RMIConnector.java:995)
       at
javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)
       ... 4 moreCaused by: java.io.WriteAbortedException: writing aborted;
java.io.NotSerializableException: org.apache.cassandra.service.StorageService$3        at
java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1332)        at
java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1946)        at
java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1870)        at
java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1752)        at
java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1328)        at
java.io.ObjectInputStream.readObject(ObjectInputStream.java:350)        at
sun.rmi.server.UnicastRef.unmarshalValue(UnicastRef.java:306)        at
sun.rmi.server.UnicastRef.invoke(UnicastRef.java:155)        ... 8 moreCaused by:
java.io.NotSerializableException: org.apache.cassandra.service.StorageService$3        at
java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1164)        at
java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1518)        at
java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1483)        at
java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1400)        at
java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1158)        at
java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:330)        at
sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:274)        at
sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:315)        at
sun.rmi.transport.Transport$1.run(Transport.java:159)        at
java.security.AccessController.doPrivileged(Native Method)        at
sun.rmi.transport.Transport.serviceCall(Transport.java:155)        at
sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)        at
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)        at
sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)        at
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)       
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)       
at java.lang.Thread.run(Thread.java:662)</pre></div></div>so sticking with just simply
manually convert.result from jmx:<div class="preformatted panel" style="border-width:
1px;"><div class="preformattedContent panelContent"><pre>$&gt;run describeRing Keyspace1
#calling operation describeRing of mbean
org.apache.cassandra.db:type=StorageService#operation returns: ( TokenRange(start_token:0,
end_token:0, endpoints:[192.168.11.6], rpc_endpoints:[192.168.11.6],
endpoint_details:[EndpointDetails(host:192.168.11.6, datacenter:168, rack:11)])
)</pre></div></div>the code using guava's Lists.transfrom is still there, please feel free
to take a look to see if i did some stupid mistake 


