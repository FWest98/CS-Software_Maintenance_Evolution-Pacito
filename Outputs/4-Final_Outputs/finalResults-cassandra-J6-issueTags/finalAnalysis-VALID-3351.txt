Pattern changes caused by commit: 079276622158fdfabe0cd8f727e55e0f963a388a

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3351.txt 

commit 079276622158fdfabe0cd8f727e55e0f963a388a
Author: Jonathan Ellis <jbellis@apache.org>

    fix BufferedRandomAccessFile bugs
    patch by jbellis; reviewed by tjake for CASSANDRA-2241



==================================
 Issue CASSANDRA-2241 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2241] BRAF read can loop infinitely instead of detecting EOF
-----------------

-----------------
Summary: BRAF read can loop infinitely instead of detecting EOF
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 24 Feb 2011 18:53:49 +0000
-----------------

-----------------
Resolved at: Fri, 25 Feb 2011 15:00:51 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

(marking this Minor since normally we never try to read past the end of an SSTable, but
<a href="https://issues.apache.org/jira/browse/CASSANDRA-2240" title="nodetool scrub hangs
or throws an exception" class="issue-link"
data-issue-key="CASSANDRA-2240"><del>CASSANDRA-2240</del></a> is running into it.)
 

-----------------

-----------------
Comments: 

New Comment: 
Adds tests for this problem and similar ones around EOF behavior.Fixes bug and makes some
changes to make BRAF more straightforward:<ul class="alternate"
type="square">	<li>ByteBuffer buffer -&gt; byte[] (no more confusion between "current" and
buffer's internal markers)</li></ul><ul class="alternate" type="square">	<li>Instead of
bufferEnd (easy to confuse with bufferOffset + buffer.length), use
validBufferBytes</li></ul><ul class="alternate" type="square">	<li>removes
hitEOF</li></ul><ul class="alternate" type="square">	<li>gives read() the behavior of
readAtMost(), which was the behavior read() is <b>supposed</b> to have</li></ul><ul
class="alternate" type="square">	<li>avoid allocating new byte<span
class="error">&#91;1&#93;</span> for each call to write(int)</li></ul><ul
class="alternate" type="square">	<li>adds asserts for expected internal state</li></ul><ul
class="alternate" type="square">	<li>fixes length() when we seek to an earlier position
that is still inside the current buffer</li></ul> 


New Comment: 
(At least some of these are regressions introduced by <a
href="https://issues.apache.org/jira/browse/CASSANDRA-1470" title="Avoid polluting page
cache during compaction" class="issue-link"
data-issue-key="CASSANDRA-1470"><del>CASSANDRA-1470</del></a>.) 


New Comment: 
I don't see anything here that is a problem, but I'll run it through some workloads... 


New Comment: 
Ok, I ran this through some more tests and it looks good to me +1 


New Comment: 
committed 


