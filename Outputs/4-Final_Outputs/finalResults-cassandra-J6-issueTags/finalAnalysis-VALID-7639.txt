Pattern changes caused by commit: ed6d24e592b3d84cac520295a5ae9f1161e2d829

From: Decorator-1
To:   Decorator-2

From: Flyweight-1
To:   Flyweight-2

From: Mediator-1
To:   Mediator-3

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7639.txt 

commit ed6d24e592b3d84cac520295a5ae9f1161e2d829
Author: Brandon Williams <brandonwilliams@apache.org>

    cqlsh: enable tracing
    Patch by Aleksey Yeschenko, reviewed by brandonwilliams for
    CASSANDRA-4584



==================================
 Issue CASSANDRA-4584 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4584] Add cqlsh syntax to enable request tracing
-----------------

-----------------
Summary: Add cqlsh syntax to enable request tracing
-----------------

-----------------
Issue type: Sub-task
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 29 Aug 2012 18:16:21 +0000
-----------------

-----------------
Resolved at: Fri, 12 Oct 2012 21:37:43 +0000
-----------------

-----------------
Assigned to: Aleksey Yeschenko
-----------------

-----------------
Description: 
 

-----------------

-----------------
Comments: 

New Comment: 
patch that adds the keyword "trace" to cql3.tracing is forced for a query when the keyword
is prepended (e.g. "trace select * from "Standard1";")the CqlResult from the query
includes the session uuid so that clients may use it to query the events/sessions
tablesadds support for showing said uuid in cqlsh <b>but</b> couldn't figure out how to
format it in intelligible form (only gibberish is printed, uuid is returned as bytes,
tried using the formatting methods but ultimately gave up, need help).also altered
cassandra-dbapi2 so that cursor now includes the uuid from the reponse (submitted patch in
<a
href="http://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=24"
class="external-link"
rel="nofollow">http://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=24</a>) 


New Comment: 
Note: patch needs an updated version of lib/cql-internal-only-1.2.0.zip that can be built
with the patch in <a
href="http://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=24"
class="external-link"
rel="nofollow">http://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=24</a> 


New Comment: 
Have only looked very superficially to the patch but since every statement can be traced,
we should call enableTracingIfRequested in a generic place (in
QueryProcessor.processStatement typically) rather that in random methods in the specific
statements. In particular, it's only called in Modification, Select and Truncate
statements, which doesn't cover all the statements. 


New Comment: 
Allowing tracing only on Modification/Select and Truncate statements was deliberate as it
mimics what is done in the thrift interface (cf/keyspace methods do not enable tracing),
but I hadn't thought of placing it in QueryProcessor, maybe it makes more sense
there.<br/>Still you raise a point should schema altering methods be traced? 


New Comment: 
If we don't want to allow tracing schema altering statements, we shouldn't allow the TRACE
syntax and do nothing with it.But honestly I'm not sure there is a point in disallowing
tracing for some query, especially since that's more work than doing it for all queries.
Besides, for any query it could be interesting to know how long it took to parse it, to
validate it and to execute it. 


New Comment: 
the non-schema-tracing behavior is legacy from the original patch, but I can't actually
think of a reason not to trace schema altering/querying statements, so I'll add it where
you suggest (and also add it to thrift for that matter). 


New Comment: 
<blockquote>But honestly I'm not sure there is a point in disallowing tracing for some
query, especially since that's more work than doing it for all queries. Besides, for any
query it could be interesting to know how long it took to parse it, to validate it and to
execute it.</blockquote>I see no reason why tracing should not be enabled for schema
querying/altering statements, but since "trace" is keyword we only know wether to trace
<b>after</b> we parse the query, which will make it difficult to track parse times. 


New Comment: 
moves enabling tracing into queryprocessor, still missing uuid pretty printing in cqlsh. 


New Comment: 
reverted changes to cqlsh as those go into <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4585" title="Add cqlsh support for
tracing results" class="issue-link"
data-issue-key="CASSANDRA-4585"><del>CASSANDRA-4585</del></a> 


New Comment: 
moving cqlsh to another issue makes this one pretty much done (before review that is) 


New Comment: 
moved the initial logging of cql queries into QueryProcessor in the cql3 case because
sessions were being started before and we needed to log params. 


New Comment: 
separated logging for prepared query submission, execution and regular query execution,
this pretty much includes <a href="https://issues.apache.org/jira/browse/CASSANDRA-4560"
title="Add tracing support for CQL3 bind variables" class="issue-link"
data-issue-key="CASSANDRA-4560"><del>CASSANDRA-4560</del></a> which is now included in
this patch. 


New Comment: 
I'm playing devil's advocate here but I wonder if this isn't something that would be
better done at the protocol level. Typically there is two less that ideal thing if we make
it part of the language?<ul>	<li>it's unclear what to do when we prepare a query with a
TRACE in it. The current patch chose to trace both the preparation and all following
execution. But that's 1) largely random and 2) not very flexible. As a user, I want to be
able to trace an execution of a prepared query without having to trace everyone. And while
maybe slightly less useful, being able to trace a prepare without necessary having all
execution being traced would be neat too.</li>	<li>as remarked by David, it means tracing
the parsing of the query become less natural (to be honest that's not really a big deal,
this would still be fairly to do, but suggests imho that trace don't belong to the
language).</li></ul>None of this is a problem if tracing is a protocol option. Besides,
the protocol is already involved in the tracing in the sense that the trace ID cannot be
returned in the ResultSet, so the protocol has to be involved already (and I note that for
CQL over thrift, we already have the trace_next_query for that; adding it to the binary
protocol will require a bit more work because of the asynchronous nature of the protocol,
but we can leave that to later).Last minor point in favor of not putting that in the
language, we won't have to torture the parser to disallow writing slightly non-sensical
queries like:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>TRACE TRACE TRACE TRACE TRACE TRACE INSERT
....;</pre></div></div>or<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>BEGIN BATCH INSERT ...; TRACE INSERT ...;
INSERT ...; TRACE INSERT ...; APPLY BATCH;</pre></div></div>and similar variation, all of
which are allowed by the current patch. 


New Comment: 
PostgreSQL added EXPLAIN to their SQL dialect.  Their solutions are<ol>	<li>not allowing
EXPLAINing a PREPARE, although EXPLAINing a PREPAREd query is okay</li>	<li>hijacking the
query's resultset for EXPLAIN's</li></ol>I think Sylvain is right that moving TRACE into
the protocol is a better solution.For the purposes of beta2, let's add a TRACE cqlsh
command, specific to cqlsh, similar to how COPY is cqlsh-only.  We can stick with thrift
for now.  Created <a href="https://issues.apache.org/jira/browse/CASSANDRA-4699"
title="Add TRACE support to binary protocol" class="issue-link"
data-issue-key="CASSANDRA-4699"><del>CASSANDRA-4699</del></a> to add it to the binary
protocol. 


New Comment: 
Changed the title to reflect that this will only add TRACE to cqlsh (which I agree is a
good idea). 


New Comment: 
I've attached an incomplete version of the patch. Please don't commit it.<br/>This version
lacks pretty trace events output, otherwise that's it.use 'tracing on' to enable tracing
and 'tracing off' to disable it. see 'help tracing'.I really don't like the info we are
gathering now - what we have isn't really useful. 


New Comment: 
Try tracing CREATE KEYSPACE or CREATE TABLE - there is too much information, all in
inconsistent formats. No idea how to display that properly.<br/>Or trace INSERT or SELECT
- there isn't as much output, but it's pretty useless and inconsistent.<br/>Also,
unrelated to that: requesting tracing info immediately after the query doesn't show all
the events. Tracing is async. Making is synchronous is probably a bad idea, so some
artificial delay needs to be introduced. 


New Comment: 
Also there is no way to calculate how much time each step has taken, which makes this
tracing almost useless.<br/>This definitely won't do. 


New Comment: 
I'm putting this on hold for now. I won't bother with formatting tracing events output
until there is reasonable data to work with.<br/>Feel free to apply/commit the patch
though, since this might help the person who will be working on fixing the tracing.Edit:
this patch depends on <a
href="https://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=26"
class="external-link"
rel="nofollow">https://code.google.com/a/apache-extras.org/p/cassandra-dbapi2/issues/detail?id=26</a>
to work. It's not yet in any published cassandra-dbapi2 release. This needs to happen
first - DON'T commit the patch until then. 


New Comment: 
Don't commit this. 


New Comment: 
Update: the required cassandra-dbapi2 version is now in trunk, so this can be committed
now.<br/>Specialized trace results output is not in the patch - tracing results are
formatted just like regular queries.<br/>Otherwise it's done. (Will specialize tracing
output once we have reasonable tracing done). 


New Comment: 
<a href="https://issues.apache.org/jira/browse/CASSANDRA-4584" title="Add cqlsh syntax to
enable request tracing" class="issue-link"
data-issue-key="CASSANDRA-4584"><del>CASSANDRA-4584</del></a>-INCOMPLETE.txt 


New Comment: 
Committed, but the version change didn't apply because it was already used.  However, I
don't see a reason to bump the version multiple times in trunk so I left it at 2.3.0. 


New Comment: 
I'm getting errors on a simple example.  (On Windows.)<div class="code panel"
style="border-width: 1px;"><div class="codeContent panelContent"><pre
class="code-java">create keyspace foo with replication = {<span
class="code-quote">'class'</span>: <span class="code-quote">'SimpleStrategy'</span>, <span
class="code-quote">'replication_factor'</span>: <span class="code-quote">'1'</span>};use
foo;create table one (id <span class="code-object">int</span> primary key, c <span
class="code-object">int</span>);TRACING ON;insert into one (id, c) values (1, 2);value
<span class="code-quote">'\x7f\x00\x00\x01'</span> (in col <span
class="code-quote">'source'</span>) can<span class="code-quote">'t be deserialized as
inet: '</span>module<span class="code-quote">' object has no attribute
'</span>inet_ntop'</pre></div></div> 


New Comment: 
OS X:~/Repos/ASF/cassandra ➤ bin/cqlsh <br/>Connected to Test Cluster at
localhost:9160.<br/><span class="error">&#91;cqlsh 2.3.0 | Cassandra 1.2.0-beta1-SNAPSHOT
| CQL spec 3.0.0 | Thrift protocol 19.34.0&#93;</span><br/>Use HELP for
help.<br/>cqlsh&gt; create keyspace foo with replication = {'class': 'SimpleStrategy',
'replication_factor': '1'};<br/>cqlsh&gt; use foo;<br/>cqlsh:foo&gt; create table one (id
int primary key, c int);<br/>cqlsh:foo&gt; TRACING ON;<br/>Now tracing
requests.<br/>cqlsh:foo&gt; insert into one (id, c) values (1, 2);<br/> session_id        
                  | event_id                 | activity                                   
                                                                                          
                                     | happened_at              | source    |
source_elapsed |
thread<br/>-------------------------------------<del><ins></del>------------------------<del></ins></del>---------------------------------------------------------------------------------------------------------------------------------------------------------------------------<del><ins></del>------------------------<del></ins></del>---------<del><ins></del>--------------<del></ins></del>-----------------<br/>
df2cfa90-14b1-11e2-0000-242d50cf1fdf | 2012-10-13 00:14:56+0300 |
Mutations/ConsistencyLevel are [RowMutation(keyspace='foo', key='00000001',
modifications=[ColumnFamily(one <span
class="error">&#91;:false:0@1350076496063000,c:false:4@1350076496063000,&#93;</span>)])]/ONE
| 2012-10-13 00:14:56+0300 | 127.0.0.1 |           1417 |         Thrift:1<br/>
df2cfa90-14b1-11e2-0000-242d50cf1fdf | 2012-10-13 00:14:56+0300 |                         
                                                             insert writing local
RowMutation(keyspace='foo', key='00000001', modifications=<span
class="error">&#91;one&#93;</span>) | 2012-10-13 00:14:56+0300 | 127.0.0.1 |          
5774 |         Thrift:1<br/> df2cfa90-14b1-11e2-0000-242d50cf1fdf | 2012-10-13
00:14:56+0300 |                                                                           
                                                                               applying
mutation | 2012-10-13 00:14:56+0300 | 127.0.0.1 |           6317 | MutationStage:34<br/>
df2cfa90-14b1-11e2-0000-242d50cf1fdf | 2012-10-13 00:14:56+0300 |                         
                                                                       1 regions now
allocated in org.apache.cassandra.utils.SlabAllocator@c303a60 | 2012-10-13 00:14:56+0300 |
127.0.0.1 |           6531 | MutationStage:34<br/> df2cfa90-14b1-11e2-0000-242d50cf1fdf |
2012-10-13 00:14:56+0300 |                                                              
completed executing
TraceSessionWrapper{state=org.apache.cassandra.tracing.TraceState@962e703, callable=null}
| 2012-10-13 00:14:56+0300 | 127.0.0.1 |           6892 | MutationStage:34cqlsh:foo&gt;
Same output on Ubuntu 12.04. Might be Windows specific. 


