Pattern changes caused by commit: 4188f99036695cf770b8ecdeccc23f7d13be6368

From: Decorator-1
To:   Decorator-0

From: Flyweight-4
To:   Flyweight-5

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5075.txt 

commit 4188f99036695cf770b8ecdeccc23f7d13be6368
Author: Jonathan Ellis <jbellis@apache.org>

    Keep SimpleSnitch proximity ordering unchanged from what the Strategy generates, as intended
    patch by slebresne; reviewed by jbellis for CASSANDRA-3262



==================================
 Issue CASSANDRA-3262 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3262] SimpleSnitch.compareEndpoints doesn't respect the intent of the snitch
-----------------

-----------------
Summary: SimpleSnitch.compareEndpoints doesn't respect the intent of the snitch
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Tue, 27 Sep 2011 09:48:46 +0000
-----------------

-----------------
Resolved at: Wed, 28 Sep 2011 04:17:08 +0000
-----------------

-----------------
Assigned to: Sylvain Lebresne
-----------------

-----------------
Description: 

SimpleSnitch is supposed to not sort the input addresses, thus respecting the order of
the partitioner. However, it's compareEndpoints instead uses IP addresses comparison. Note
that this matter when the dynamicSnitch fall back to the wrapped snitch since it uses the
compareEndpoint method then.
 

-----------------

-----------------
Comments: 

New Comment: 
Note that I refactor a bit the code because it felt weird to have compareEndpoint being
concrete in AbstractEndpointSnitch but sortByProximity being abstract. It seems more
natural to have compareEndpoint being the abstract method and sortByProximity being
defined from it in AES. 


New Comment: 
The reason for this behavior (<a
href="https://issues.apache.org/jira/browse/CASSANDRA-1314" title="snitch that prefers a
single replica for all reads to a given key" class="issue-link"
data-issue-key="CASSANDRA-1314"><del>CASSANDRA-1314</del></a>) is because for best
performance, normal reads want exactly the opposite behavior of counters: we want to
direct reads to the same replica so that the cache stays hot.  Put another way, if each
replica is serving a distinct range then you get (replica count) times as much cache
memory [with CL.ONE and RR off) than if each is getting the full range of requests from
different coordinators. 


New Comment: 
I think there is a misunderstanding. I agree with the pinning of replicas. The problem is
that the current implementation of AbstractEndpointSnitch.compareEndpoints is:<div
class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>public int compareEndpoints(InetAddress target, InetAddress a1,
InetAddress a2){    return
a1.getHostAddress().compareTo(a2.getHostAddress());}</pre></div></div>If you sort a list
of hosts using that, you will always return the host that have the "smallest" IP. In other
words, in a 3 nodes cluster with RF=3, all and every read will hit the exact same
node.What makes it kind of work today is that this compareEndpoints() method is barely
used. It's used only in the case where the dynamic snitch have no scores for the
endpoints. Otherwise, it's sortByProximity that is used (which doesn't rely on
compareEndpoints &#8211; this is confusing and my patch corrects it). And sortByProximity
does <b>the right thing</b>, i.e, it doesn't sort the input list since it is supposed to
be in token order (which effectively pin one range to every replica).So the patch here
proposes two things:<ul>	<li>If fixes the compareEndpoints method: comparing IP addresses
is not a good idea.</li>	<li>It refactors the code to make sortByProximity use
compareEndpoint, to having getting in that situation again.</li></ul> 


New Comment: 
lgtm.  made some minor updates to comments and committed. 


