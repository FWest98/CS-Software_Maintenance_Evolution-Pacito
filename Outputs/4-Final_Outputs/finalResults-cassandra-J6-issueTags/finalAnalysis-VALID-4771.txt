Pattern changes caused by commit: dd7c8552c330e4d8a8d147ae7f31e39f3a6de62e

From: Decorator-1
To:   Decorator-0

From: Flyweight-4
To:   Flyweight-5

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-4771.txt 

commit dd7c8552c330e4d8a8d147ae7f31e39f3a6de62e
Author: Sylvain Lebresne <slebresne@apache.org>

    Fix typo introduced by CASSANDRA-2941



==================================
 Issue CASSANDRA-2941 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2941] Expose number of rpc timeouts for individual hosts metric via jmx
-----------------

-----------------
Summary: Expose number of rpc timeouts for individual hosts metric via jmx
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sat, 23 Jul 2011 00:52:48 +0000
-----------------

-----------------
Resolved at: Mon, 22 Aug 2011 21:36:22 +0000
-----------------

-----------------
Assigned to: Michael Wu
-----------------

-----------------
Description: 

We have a total number timeouts for each node. It's better for monitoring to break down
this total number into number of timeouts per host that this node tried to connect to.
 

-----------------

-----------------
Comments: 

New Comment: 
expose the number of timeouts per host.<br/>expose the delta of this metric. 


New Comment: 
<ul class="alternate" type="square">	<li>does not apply to 0.8 for me</li>	<li>i don't see
anything to prevent dropping timeouts b/c of race in timeoutreporter.apply.  (using NBHM +
replace would fix this)</li>	<li>if you did the recentTimeouts create first, then the
timeouts put, you wouldn't have to special case recent == null later</li></ul> 


New Comment: 
patch are old, need to rebase. i'll do it.timeoutreporter.apply is only called in one
thread, right? In expireMap, a timerTask will be created to monitor the cache, yes/no ?If
the previous is true, the reason for me to do it this way is that I only do 'write'
operation to the hashmap in one thread so that we will not corrupt the data structure.
Although get**** is called from multi threaded, only 'read' operations of hashmap is
performed so we don't need 'lock' here. I think this is the reason I try not to create an
atomicLong and insert into hashmap. 


New Comment: 
rebased my patch. 


New Comment: 
<blockquote>timeoutreporter.apply is only called in one thread, right?</blockquote>you're
right, that should be fine.<blockquote>rebased my patch.</blockquote>What did you rebase
against?  There have been no commits in the meantime but it does not apply to 0.8 head. 


New Comment: 
Sorry for the confusion. This patch worked against the current trunk. 


New Comment: 
<blockquote>Although get**** is called from multi threaded, only 'read' operations of
hashmap is performed so we don't need 'lock' here.</blockquote>Actually, we still need to
establish a happens-before for the read, or we have no guarantees that the JMX thread will
ever see the updates made by the timeout reporter.  So we could either use a Map of
AtomicLong or a ConcurrentMap of Long. 


New Comment: 
I am not clear why we have no guarantees that the JMX thread will ever see the updates
made by the timeout reporter. The current structure is that, if there is a timeout
happened, apply() will be called for it and if this is the first time for a certain IP
address, an atomicLong will be created for it. Since this is the first time for this IP
address to time out, it is natural not to see its updates before. From then on, it will
get updated whenever JMX threads call getRecent***(). Maybe I miss something here? 


New Comment: 
I'm talking about timeoutsPerHost, not recentTimeoutsPerHost.  since tPH is a plain
HashMap there is no happens-before relationship between the updates and the reads. 


New Comment: 
change timeoutsPerHost to use AtomicLong.<br/>re-structure the code of
getRecentTimeoutPerHost() 


New Comment: 
committed, thanks! 


New Comment: 
Integrated in Cassandra-0.8 #289 (See <a
href="https://builds.apache.org/job/Cassandra-0.8/289/" class="external-link"
rel="nofollow">https://builds.apache.org/job/Cassandra-0.8/289/</a>)<br/>    expose rpc
timeouts per host in MessagingServiceMBean<br/>patch by Melvin Wang; reviewed by jbellis
for <a href="https://issues.apache.org/jira/browse/CASSANDRA-2941" title="Expose number of
rpc timeouts for individual hosts metric via jmx" class="issue-link"
data-issue-key="CASSANDRA-2941"><del>CASSANDRA-2941</del></a>jbellis : <a
href="http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1160449"
class="external-link"
rel="nofollow">http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&amp;view=rev&amp;rev=1160449</a><br/>Files
:
<ul>	<li>/cassandra/branches/cassandra-0.8/CHANGES.txt</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/MessagingServiceMBean.java</li>	<li>/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/MessagingService.java</li></ul> 


New Comment: 
for the records, this patch had the following lines:<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>       
AtomicLong c = timeoutsPerHost.get(ip);        if (c == null)            c =
timeoutsPerHost.put(ip, new AtomicLong());       
c.incrementAndGet();</pre></div></div>which are a guaranteed NPE.<br/>I've fixed that
directly though (in r1164068). 


New Comment: 
Ah, my bad. Thinking of python's dictionary while I did this <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> Sorry. 


