Pattern changes caused by commit: cad32377d71d0f711f5f98eb72fc6828d92bc318

From: Decorator-2
To:   Decorator-1

From: Facade-1
To:   Facade-0

From: Flyweight-2
To:   Flyweight-4

From: Mediator-3
To:   Mediator-2

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7516.txt 

commit cad32377d71d0f711f5f98eb72fc6828d92bc318
Author: Jonathan Ellis <jbellis@apache.org>

    Switch from NBHM to CHM in MessagingService's callback map
    patch by Daniel Norberg; reviewed by jbellis for CASSANDRA-4708



==================================
 Issue CASSANDRA-4708 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4708] StorageProxy slow-down and memory leak
-----------------

-----------------
Summary: StorageProxy slow-down and memory leak
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Mon, 24 Sep 2012 07:09:34 +0000
-----------------

-----------------
Resolved at: Mon, 24 Sep 2012 15:11:19 +0000
-----------------

-----------------
Assigned to: Daniel Norberg
-----------------

-----------------
Description: 

I am consistently observing slow-downs in StorageProxy caused by the NonBlockingHashMap
used indirectly by MessagingService via the callbacks ExpiringMap.

This seems do be due
to NBHM having unbounded memory usage in the face of workloads with high key churn. As
monotonically increasing integers are used as callback id's by MessagingService, the
backing NBHM eventually ends up growing the backing store unboundedly. This causes it to
also do very large and expensive backing store reallocation and migrations, causing
throughput to drop to tens of operations per second, lasting seconds or even minutes.


This behavior is especially noticable for high throughput workloads where the dataset is
completely in ram and I'm doing up to a hundred thousand reads per second.

Replacing NBHM
in ExpiringMap with the java standard library ConcurrentHashMap resolved the issue and
allowed me to keep a consistent high throughput.

An open issue on NBHM can be seen here:
<a
href="http://sourceforge.net/tracker/?func=detail&amp;aid=3563980&amp;group_id=194172&amp;atid=948362"
class="external-link"
rel="nofollow">http://sourceforge.net/tracker/?func=detail&amp;aid=3563980&amp;group_id=194172&amp;atid=948362</a>
 

-----------------

-----------------
Comments: 

New Comment: 
Attached patch with the proposed fix; replaces NBHM with CHM in ExpiringMap. 


New Comment: 
committed, thanks!(also commented on NBHM SF issue.) 


New Comment: 
did a quick audit of NBHM usage elsewhere.  think we're okay, everything else has a pretty
tiny amount of possible keys.  the main "large" maps are in the column containers where
NBHM is a non-candidate since we need sorting. 


New Comment: 
also committed to 1.0 branch 


