Pattern changes caused by commit: 0d6db4a68f1d66da789c037d8340c682f21253ba

From: Abstract Factory-3
To:   Abstract Factory-2

From: Factory Method-3
To:   Factory Method-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-3416.txt 

commit 0d6db4a68f1d66da789c037d8340c682f21253ba
Author: Jonathan Ellis <jbellis@apache.org>

    add CL.TWO, THREE
    patch by Peter Schuller; reviewed by tjake for CASSANDRA-2013



==================================
 Issue CASSANDRA-2013 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-2013] Add CL.TWO, CL.THREE; tweak CL documentation
-----------------

-----------------
Summary: Add CL.TWO, CL.THREE; tweak CL documentation
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Thu, 20 Jan 2011 01:17:55 +0000
-----------------

-----------------
Resolved at: Fri, 4 Mar 2011 21:18:24 +0000
-----------------

-----------------
Assigned to: Peter Schuller
-----------------

-----------------
Description: 

Attaching draft patch to add CL.TWO and CL.THREE.

Motivation for adding is that having
to select between either ONE or QUORUM is too narrow a choice for clusters with RF &gt; 3.
In such a case, it makes particular sense to want to do writes at e.g. CL.TWO for
durability purposes even though you are not looking to get strong consistency with QUORUM.
CL.THREE is the same argument. TWO and THREE felt reasonable; there is no objective reason
why stopping at THREE is the obvious choice.

Technically one would want to specify an
arbitrary number, but that is a much more significant change. 

Two open questions:

(1) I
adjusted the documentation of ConsistencyLevel to be more consistent and also to reflect
what I believe to be reality (for example, as far as I can tell QUORUM doesn't send
requests to all nodes as claimed in the .thrift file). I'm not terribly confident that I
have not missed something though.

(2) There is at least one unresolved issue, which is
this assertion check WriteResponseHandler:

        assert 1 &lt;= blockFor &amp;&amp;
blockFor &lt;= 2 * Table.open(table).getReplicationStrategy().getReplicationFactor()<br/> 
          : String.format("invalid response count %d for replication factor %d",<br/>     
                      blockFor,
Table.open(table).getReplicationStrategy().getReplicationFactor());

At THREE, this causes
an assertion failure on keyspace with RF=1. I would, as a user, expect
UnavailableException. However I am uncertain as to what to do about this assertion. I
think this highlights one TWO/THREE are different from previously existing CL:s, in that
they essentially hard-code replicate counts rather than expressing them in terms that can
by definition be served by the cluster at any RF.

Given that with THREE (and not TWO, but
that is only due to the implementation detail that bootstrapping is involved) implies a
replicate count that is independent of the replication factor, there is essentially a new
failure mode. It is suddenly possible for a consistency level to be fundamentally
incompatible with the RF. My gut reaction is to want UnavailableException still, and that
the assertion check can essentially be removed (other than the &lt;= 1 part).

If a
different failure mode is desired, presumably it would not be an assertion failure (which
should indicate a Cassandra bug).  Maybe UnstisfiableConsistencyLevel? I propose just
adjusting the assertion (which has no equivalent in ReadCallback btw); giving a friendlier
error message in case of a CL/RF mismatch would be good, but doesn't feel worth
introducing extra complexity to deal with it.

'ant test' passes. I have tested w/
py_stress with a three-node cluster and an RF=3 keyspace and with 1 and 2 nodes down, and
get expected behavior (available or unavailable as a function of nodes that are up).
 

-----------------

-----------------
Comments: 

New Comment: 
I can see how someone would want this with RF &gt; 6  but who does that? 


New Comment: 
It is relevant already at RF=4 (which seems very reasonable; e.g. two copies per data
center).You may not care about quorum consistency yet want to require at least two copies
of writes for durability purposes. 


New Comment: 
We are using Cassandra as storage to build a message store. There are few customers who
are asking for two copies of data even when two replicas are down. These are big customers
with large number of subscribers and large data volume. The most obvious solution we
recommended is RF = 5 and R/W CL = QUORUM. However, this increases the TCO. Keeping 5
copies of data makes the system less attractive. Based on logical reason that you cannot
have two working copies unless you have two working replicas, they agreed to have RF =
4.To achieve the requirement explained above with RF=4 we will need to start with R/W CL =
QUORUM. If one of the replica goes down we continue with CL=QUORUM ( we can downgrade to
TWO as well). If second replica goes down, we reduce the CL to TWO. This way we satisfy
the R + W &gt; N while two replica's are down, also meet the requirement of maintaining
two working copies even after two replicas are down. As the replicas come up we upgrade
the CL to QUORUM. We are aware that this strategy has some loose ends where we may have
partitioned reads and writes with CL.TWO.We believe this is a common usecase and other
users of Cassandra will also find this useful. Hence, atleast CL.TWO make lot of sense in
practical cases. 


New Comment: 
Narendra, good point.  I think the case that you want more than ONE without requiring a
QUORUM would give you a bit of redundancy without the strict consistency requirements.My
only issue here is this is a "power user" feature and we are throwing it in so everyone
will start using it and not understand the implications... 


New Comment: 
committed 


New Comment: 
Integrated in Cassandra-0.7 #349 (See <a
href="https://hudson.apache.org/hudson/job/Cassandra-0.7/349/" class="external-link"
rel="nofollow">https://hudson.apache.org/hudson/job/Cassandra-0.7/349/</a>)<br/>    add
CL.TWO, THREE<br/>patch by Peter Schuller; reviewed by tjake for <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2013" title="Add CL.TWO, CL.THREE;
tweak CL documentation" class="issue-link"
data-issue-key="CASSANDRA-2013"><del>CASSANDRA-2013</del></a> 


New Comment: 
For the record, the patch as committed still retains the "regression" of sorts that you
can get an AssertionFailure instead of a cleaner error when attempting to insert at
CL.THREE in a cluster with RF &lt; 3. That may be okay, I just wanted to say that clearly
outside of my wall of text above.(Sorry for the delay, caught up a bit on JIRA traffic
today.) 


New Comment: 
Looks like the easiest fix is to just remove the assert, which is somewhat obsolete
anyway. Then assureSufficientLiveNodes will throw UnavailableException, if necessary. 


New Comment: 
(patch attached to remove assert) 


New Comment: 
Sounds good to me. 


New Comment: 
committed 


New Comment: 
Integrated in Cassandra-0.7 #386 (See <a
href="https://hudson.apache.org/hudson/job/Cassandra-0.7/386/" class="external-link"
rel="nofollow">https://hudson.apache.org/hudson/job/Cassandra-0.7/386/</a>)<br/>    r/m
obsolete assert<br/>patch by jbellis; reviewed by Peter Schuller for <a
href="https://issues.apache.org/jira/browse/CASSANDRA-2013" title="Add CL.TWO, CL.THREE;
tweak CL documentation" class="issue-link"
data-issue-key="CASSANDRA-2013"><del>CASSANDRA-2013</del></a> 


