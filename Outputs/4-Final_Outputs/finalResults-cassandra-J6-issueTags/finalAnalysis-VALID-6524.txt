Pattern changes caused by commit: 142e8c1a2967947a3ed5314e4577f4be3cfe4bd3

From: Facade-1
To:   Facade-0

From: Flyweight-1
To:   Flyweight-4

From: Mediator-1
To:   Mediator-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-6524.txt 

commit 142e8c1a2967947a3ed5314e4577f4be3cfe4bd3
Author: Jonathan Ellis <jbellis@apache.org>

    add auto_snapshot option allowing disabling snapshot before drop/truncate
    patch by dbrosius; reviewed by jbellis for CASSANDRA-3710



==================================
 Issue CASSANDRA-3710 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3710] Add a configuration option to disable snapshots
-----------------

-----------------
Summary: Add a configuration option to disable snapshots
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sun, 8 Jan 2012 19:39:13 +0000
-----------------

-----------------
Resolved at: Wed, 11 Apr 2012 14:14:24 +0000
-----------------

-----------------
Assigned to: David Brosius
-----------------

-----------------
Description: 

Let me first say, I hate this idea.  It gives cassandra the ability to permanently delete
data at a large scale without any means of recovery.  However, I've seen this requested
multiple times, and it is in fact useful in some scenarios, such as when your application
is using an embedded cassandra instance for testing and need to truncate, which without
JNA will timeout more often than not.
 

-----------------

-----------------
Comments: 

New Comment: 
So...  install JNA? 


New Comment: 
I am one guy who an issue with snapshots triggered by truncate (Brandon thinks that
snapshotting is causing my problem).I guess there is no real reason why anyone would
<em>need</em> that. Its just that for embedding into a testsuite its simply not needed to
snapshot data and it makes the setup harder.For me snapshots are still not working, even
though I have jna in my classpath. I guess there must be something wrong with
maven-surefire. But I guess this is not the topic here. 


New Comment: 
Another option would be to use Java7: <a
href="https://issues.apache.org/jira/browse/CASSANDRA-3734" title="Support native link w/o
JNA in Java7" class="issue-link"
data-issue-key="CASSANDRA-3734"><del>CASSANDRA-3734</del></a> 


New Comment: 
I think I came up with a real use case for this: It would be useful for Development or
Quality Systems. I personally dont care if data gets lost on my Development machines. But
I dont like deleting snapshots on all those machines.Afaik also schema updates create
snapshots. Jonathan: Would it help if somebody would provide a patch for this, or are you
against it? 


New Comment: 
Update on my testsuite: I was just able to get jna running in my junits, therefore
truncate is finally working, which is good.Unfortunetaly the performance of my testsuite
is not good any more. It now took 25 minutes instead of 3 minutes to run all my tests. The
hard disk was busy all the time (top showed ~10% io wait).<br/>I checked for snapshots in
the cassandra directory: There were about 2300 folders within the snapshots directory.
Within these were ~30k files in all those directories. I assume that the performance
decrease is due to the 30k symlinks being created. 


New Comment: 
I looked into it a bit deeper and I must admit its much more complicated than I thought.
The performance penalty is not just due to the hardlinks, but due to the memtable flushes
caused by the truncate.What we do:<br/>We run tests from multiple threads to improve
speed. Every thread in a separate keyspace. Between tests the current keyspace is being
resetted.What happens within cassandra:<br/>A truncate triggered from one testthread now
flushes the memtables from all other testthreads too, which causes the testthreads to
fsync each other.How I tried to resolve this:<br/>I removed the flush+hardlink from
truncate, which made it run much faster. Unfortunetaly the commitlog still has all the
data in it and I do not see a way to drop the commitlog data withoug flushing all
CFs.Well, I guess I will make a patch for our internal testsuite. Is anybody out there who
has the same problem, but maybe a better approach?kind regards,<br/>Christian 


New Comment: 
We hit the same issue with our integration tests. Originally we would truncate between
each test. As our test suite continued to grow, the time penalty became too large for us
to continue doing so.We experimented with deleting all rows from all column families
instead of truncating (inspired by <span class="error">&#91;this blog post&#93;</span><a
href="http://dev.aboutus.org/2011/08/22/cassandra-truncate-means-slow-test-suites.html"
class="external-link"
rel="nofollow">http://dev.aboutus.org/2011/08/22/cassandra-truncate-means-slow-test-suites.html</a>).
That was faster than truncating but still not as fast as we would like (performance
degraded linearly over the course of a test run).We eventually tweaked our tests in such a
way that each test was guaranteed to use a new set of row keys from any previous test;
effectively allowing us to ignore the problem. This was fairly simple for us because all
of are row keys are prefixed with a UUID. Obviously this solution is dependent on the data
model you are using and will not work for everyone.There are use cases where a patch like
this would be helpful. Obviously that needs to be balanced against the cost of maintaining
code that is not used in production rings. 


New Comment: 
added 'testmode' patch 


New Comment: 
Hi Peter,<br/>it is good to know that we are not the only ones having this problem.The
approaches you described are not really suitable for our application. Empty or old rows
would distract the application. Thats why I created a pretty radical patch for
cassandra:It adds a new config setting called 'test_mode_enabled'. If set to true, it will
disable the commitlog, disable snapshots and disables memtable flushes for truncates.I
uploaded it, maybe this is useful for your tests too.Christian 


New Comment: 
It sounds like you really want a way to "mock" Cassandra.  Have you checked out <a
href="https://github.com/riptano/Cassanova" class="external-link"
rel="nofollow">https://github.com/riptano/Cassanova</a> ?  It probably needs some updating
but it might a good fit. 


New Comment: 
Yes, some dummy cassandra that is easily resettable. Cassanova looks interesting, thanks
for sharing the link. Unfortunetaly it misses support for secondary indexes and TTL.
Currently, for me the best solution seems to patch cassandra and deploy it our maven repo.
All developers will get the patched version via maven, which will then start itself from
within the testsuite. I'm a java guy, I rather patch cassandra than integrating python
<img class="emoticon" src="https://issues.apache.org/jira/images/icons/emoticons/wink.png"
height="16" width="16" align="absmiddle" alt="" border="0"/>btw: The patched cassandra
works actually quite fast:<br/>unpatched, 2 testthreads:  632 sec<br/>unpatched, 4
testthreads: 1470 sec<br/>patched,   2 testthreads:  350 sec<br/>patched,   4 testthreads:
 243 sec<br/>(We use testng which allows tests to be run in multiple threads)Christian 


New Comment: 
Adding notes from discussion on #cassandra-dev:There are legitimate production use cases
that would benefit from being able to skip snapshots, both for truncate <b>and</b>
dropColumnFamily.For example, our application has some ColumnFamilies that contain
important data, and others that contain large volumes of derived data. Relatively often,
we have the need to discard the derived data in order to recompute it. Truncate without
snapshot would be ideal for this.While we could proactively prune snapshots, the
coordination of such housekeeping out-of-process is complex. Differentiating "important"
snapshots from unwanted snapshots when pruning requires that this process has knowledge of
our domain model.Brandon stressed that the current philosophy is that Cassandra should
never truly delete data, as a protection against accidental data loss. My own opinion is
that Cassandra and its API should not work against the caller's intent.A compromise that
we talked about is as follows:1. Additional methods for truncate and dropColumnFamily that
include a snapshot control flag, e.g:truncate(String keySpace, String cf, boolean
withSnapshot)<br/>dropColumnFamily(String keySpace, String cf, boolean withSnapshot)2. Add
a "safety" configuration option that governs whether the snapshot flag is actually
honored.<br/>So if(!withSnapshot &amp;&amp; !allowSkippedSnapshotOnDeletion), we could
either fail hard for an illegal request or log a warning and snapshot anyway.The advantage
of this approach is that it would be equally useful for testing and production. The
disadvantage is that it is an API change and so would have to come in a later release.An
interim solution might be to add the configuration option (e.g.
allowSkippedSnapshotOnDeletion, default false) and have truncate <br/>and delete honor
that value directly. In a later release, the "withSnapshot" API additions could use
allowSkippedSnapshotOnDeletion as described above in #2. 


New Comment: 
I'm fine with adding an autosnapshot configuration variable defaulting to true that
controls whether to snapshot before truncate and drop. 


New Comment: 
disableSnapshots would be great for our D/Q System, even though it wont solve the issues
for my automated tests (which I fixed myself with my own patch). So I'd still appreciate
it. Thanks! 


New Comment: 
Dave, can you add an option that allows disabling automatic snapshots for drop/truncate? 
(but that does not block explicitly requested snapshots) 


New Comment: 
against trunk 


New Comment: 
Hi Dave, does this patch also disable snapshots for truncate?I would expect an "if" in
ColumnFamilyStore.truncate() (line 1698). 


New Comment: 
add autoSnapshot option for ColumnFamilyStore.truncate as well. 


New Comment: 
This is a new one for me:<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>$ patch -p1 &lt; auto_snapshot_2.diffmissing
header for unified diff at line 2 of patch</pre></div></div> 


New Comment: 
sorry, try again... auto_snapshot_3.diff   against trunk. 


New Comment: 
Committed, thanks.Out of curiosity, what was the difference in how those diffs were
created? 


