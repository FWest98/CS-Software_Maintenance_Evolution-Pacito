Pattern changes caused by commit: edcc7f137f573eb6aa38fe4f5b79c22de7811342

From: Abstract Factory-2
To:   Abstract Factory-1

From: Factory Method-2
To:   Factory Method-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-7930.txt 

commit edcc7f137f573eb6aa38fe4f5b79c22de7811342
Author: Jonathan Ellis <jbellis@apache.org>

    pool [Compressed]RandomAccessReader objects on the partitioned read path; creating them is expensive
    patch by jbellis; reviewed by xedin and slebresne for CASSANDRA-4942



==================================
 Issue CASSANDRA-4942 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-4942] Pool [Compressed]RandomAccessReader on the partitioned read path
-----------------

-----------------
Summary: Pool [Compressed]RandomAccessReader on the partitioned read path
-----------------

-----------------
Issue type: Sub-task
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Sat, 10 Nov 2012 05:16:05 +0000
-----------------

-----------------
Resolved at: Wed, 14 Nov 2012 16:25:53 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 
 

-----------------

-----------------
Comments: 

New Comment: 
The place that actually makes the most sense to do the pooling is the SegmentedFile
implementation.  Patchset at <a href="http://github.com/jbellis/cassandra/branches/4942"
class="external-link"
rel="nofollow">http://github.com/jbellis/cassandra/branches/4942</a>. 


New Comment: 
I don't think that the proposed change is much cleaner that what we have in <a
href="https://issues.apache.org/jira/browse/CASSANDRA-4937" title="CRAR improvements
(object cache + CompressionMetadata chunk offset storage moved off-heap)."
class="issue-link" data-issue-key="CASSANDRA-4937"><del>CASSANDRA-4937</del></a> because
now we add segmented file in the fix which is unnecessary. I will work on improving my
implementation and will attach a patch to this issue. 


New Comment: 
SegmentedFile is the right place.  It's basically a RAR factory.  This also gives us
pooling of both CRAR and RAR for no extra complexity. 


New Comment: 
Let's agree to disagree. My idea of this is that it should be done transparently so we
don't duplicate the code in getSegment per implementation, and I don't like involving
PooledSegmentedFile inside of RAR as well. Caller shouldn't care what instance it gets
when it calls open. I didn't bother doing caching for RAR because the default
disk_access_node is mmap which is considered a good practice and keeping caching changes
local to CRAR (which has the most overhead per open) allows to reuse caches basically for
everything. If you think that this is the right way to go, +1. 


New Comment: 
<blockquote>it should be done transparently so we don't duplicate the code in getSegment
per implementation</blockquote>You're right, fixed + pushed to github.<blockquote>I don't
like involving PooledSegmentedFile inside of RAR as well</blockquote>Point taken, but
since the proposed alternative is a global Map, I do think this is cleaner.  (You are
right that Threadlocal makes cleanup too asynchronous, so I withdraw that suggestion.) 


New Comment: 
<blockquote>SegmentedFile is the right place. It's basically a RAR factory</blockquote>I
agree, this also feels like the better place to me.However, on the patch itself, either
I'm missing something or it never gives the PoolingSegmentedFile to any RAR (and so won't
pool/recycle anything). 


New Comment: 
Fixed &amp; pushed. 


New Comment: 
BufferedSegmentFile still don't pass the itself to the created RAR (and while I agree that
this won't matter to a lot of people since mmap use is more widespread, I don't think
there is any reason not to recycle (we'll still save the buffer allocation of RAR if we
do)).But with that fix, lgtm, +1. 


