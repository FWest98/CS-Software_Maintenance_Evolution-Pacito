Pattern changes caused by commit: 25faad4e09eaf41dbc2b832e98b5465590198b90

From: Decorator-0
To:   Decorator-1

From: Flyweight-5
To:   Flyweight-4

From: Strategy-0
To:   Strategy-1


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-5255.txt 

commit 25faad4e09eaf41dbc2b832e98b5465590198b90
Author: Pavel Yaskevich <xedin@apache.org>

    (CQL) SELECT query should allow CF name to be qualified by keyspace
    patch by Pavel Yaskevich; reviewed by Jonathan Ellis for CASSANDRA-3130



==================================
 Issue CASSANDRA-3130 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-3130] CQL queries should alow talbe names to be qualified by keyspace
-----------------

-----------------
Summary: CQL queries should alow talbe names to be qualified by keyspace
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Fri, 2 Sep 2011 19:10:21 +0000
-----------------

-----------------
Resolved at: Tue, 18 Oct 2011 22:21:54 +0000
-----------------

-----------------
Assigned to: Pavel Yaskevich
-----------------

-----------------
Description: 

While the 0.6.X api was "ugly" in terms of method signatures, it did allow you to use the
same client to query multiple keyspaces without having to call set_keyspace(String). I
totally dislike set_keyspace but I know the thrift API is definitely not changing.

The
following command sequence is three RPC operations.
<div class="preformatted panel"
style="border-width: 1px;"><div class="preformattedContent panelContent"><pre>select *
from cf;use otherkeyspace;select * from othercf;</pre></div></div>
CQL should allow us to
do:
<div class="preformatted panel" style="border-width: 1px;"><div
class="preformattedContent panelContent"><pre>select * from keyspace1.cf;select * from
keyspace2.cf;</pre></div></div>
This will make the connection pool management on the
client much easier.
 

-----------------

-----------------
Comments: 

New Comment: 
I disagree, all of the Good reasons for making that change to the RPC back then, hold true
today whether you're talking about RPC or CQL.The "keyspace" is equivalent to "database"
in other systems that use SQL, it's the application-specific namespace.  In which of these
systems are you able to qualify a table with the database name like this? 


New Comment: 
These feature is present in every major database I have worked with. People often join
across databases or query data in one to save the results in another.<div
class="preformatted panel" style="border-width: 1px;"><div class="preformattedContent
panelContent"><pre>USE db1;SELECT author_name,editor_name FROM author,db2.editor  WHERE
author.editor_id = db2.editor.editor_id;</pre></div></div><a
href="http://dev.mysql.com/doc/refman/5.0/en/use.html" class="external-link"
rel="nofollow">http://dev.mysql.com/doc/refman/5.0/en/use.html</a> 


New Comment: 
I was going to cite Postgres's docs (i.e. "Any given client connection to the server can
access only the data in a single database, the one specified in the connection request."),
but then realized that with schemas (<a
href="http://www.postgresql.org/docs/9.0/static/ddl-schemas.html" class="external-link"
rel="nofollow">http://www.postgresql.org/docs/9.0/static/ddl-schemas.html</a>), the same
capability is there.So, I stand corrected. 


New Comment: 
I don't think we should update clientState to the queried keyspace &#8211; just use it for
the purpose of that one statement. 


New Comment: 
If we don't - we loose ability to do validations... 


New Comment: 
I guess I can clone ClientState to isolate SELECT with set keyspace name. 


New Comment: 
IMO the "right" fix is to make things like hasColumnFamilyAccess take a keyspace parameter
(maybe just as an overload to keep the common case simple) 


New Comment: 
I have overcomplicated things... This is the version that uses
ClientState.hasColumnFamilyAccess with additional keyspace parameter. 


New Comment: 
One more simplification: we could add a getRawKeyspace method to clientState that doesn't
throw InvalidRequest.  +1 otherwise. 


