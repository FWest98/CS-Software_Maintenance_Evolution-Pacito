Pattern changes caused by commit: bf28e8d4b84afd5f9821ad965274768b8d4ca179

From: Abstract Factory-2
To:   Abstract Factory-1

From: Factory Method-2
To:   Factory Method-1

From: Decorator-1
To:   Decorator-2

From: Facade-1
To:   Facade-0

From: Flyweight-1
To:   Flyweight-2

From: Mediator-1
To:   Mediator-3

From: Strategy-1
To:   Strategy-0


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-9403.txt 

commit bf28e8d4b84afd5f9821ad965274768b8d4ca179
Author: Jonathan Ellis <jbellis@apache.org>

    Move System.exit on OOM into a separate thread
    patch by jbellis; reviewed by marcuse for CASSANDRA-5273



==================================
 Issue CASSANDRA-5273 Description 
=======================================

Project: Cassandra
-----------------

-----------------
Title: [CASSANDRA-5273] Hanging system after OutOfMemory. Server cannot die due to uncaughtException handling
-----------------

-----------------
Summary: Hanging system after OutOfMemory. Server cannot die due to uncaughtException handling
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Resolved
-----------------

-----------------
Created at: Wed, 20 Feb 2013 10:32:09 +0000
-----------------

-----------------
Resolved at: Wed, 22 May 2013 15:33:04 +0000
-----------------

-----------------
Assigned to: Jonathan Ellis
-----------------

-----------------
Description: 

On out of memory exception, there is an uncaughtexception handler that is calling
System.exit(). However, multiple threads are calling this handler causing a deadlock and
the server cannot stop working. See <a
href="http://www.mail-archive.com/user@cassandra.apache.org/msg27898.html"
class="external-link"
rel="nofollow">http://www.mail-archive.com/user@cassandra.apache.org/msg27898.html</a>.
And see stack trace in attachement.
 

-----------------

-----------------
Comments: 

New Comment: 
Stack trace hanging system 


New Comment: 
Do we have any better options than just adding a timeout to the appendingThread.join call? 


New Comment: 
this is very hard to reproduce (and i have never seen it happen in any of our clusters) so
i simply added timeouts to the Thread#join methods in CommitLog#shutdownBlocking 


New Comment: 
Just an idea : one could say that the problem is caused by the java runtime that is
holding a lock during System.exit(). At the same time, the cassandra code (the uncaught
exception handler) is potentially calling System.exit() many times. Would it not be more
safe and clean for the code in the handler to call at most once System.exit(), avoiding
the jre lock and letting everything die in a 'normal' way? 


New Comment: 
adds a lock to make sure only one thread calls System.exitthe threads that would have
called System.exit will block (unclear (to me) what would happen if they would be allowed
to continue to run where they should have exited) 


New Comment: 
<blockquote>the threads that would have called System.exit</blockquote>I don't think we're
very rigorous about calling Thread.setDaemon, so I think this will actually deadlock it
&#8211; System.exit will wait for daemon threads to die, and the daemon threads will park
at the lock acquisition. 


New Comment: 
<a href="https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jbellis"
class="user-hover" rel="jbellis">Jonathan Ellis</a> you think the timeouts would be
enough? 


New Comment: 
Thinking about it more, I think adding a lock doesn't change anything.  System.exit
already locks/synchronizes the important parts.  So we still have the deadlock problem,
which we can hack around with timeouts but I'd rather not.Patch attached against 1.2 to
call System.exit from a new thread instead. 


New Comment: 
v3 preallocates the Thread. 


New Comment: 
lgtm 


