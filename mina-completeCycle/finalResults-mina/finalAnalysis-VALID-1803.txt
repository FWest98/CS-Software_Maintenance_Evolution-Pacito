Pattern changes caused by commit: 7b2707ebf121bb92cf84e52f9f4ff38d721fae64

From: Bridge-16
To:   Bridge-15


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1803.txt 

commit 7b2707ebf121bb92cf84e52f9f4ff38d721fae64
Author: Emmanuel Lecharny <elecharny@apache.org>

    o Changed an error message which was misleading
    o Removed the disposalFuture which is totally useless
    o When calling dispose, kill the executor by calling shutdownNow
    o Don't wait for the dispose() to be done, as we were waiting on our own thread to signal itself on terminaison : a dead eand !
    This is a fix for DIRMINA-755



==================================
 Issue DIRMINA-755 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-755] IoConnectot.dispose blocks forever
-----------------

-----------------
Summary: IoConnectot.dispose blocks forever
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 13 Jan 2010 10:50:14 +0000
-----------------

-----------------
Resolved at: Sun, 17 Jan 2010 17:30:44 +0000
-----------------

-----------------
Assigned to: Unassigned
-----------------

-----------------
Description: 

(Extracted from the ML)

I recently switched from 2.0.0-M6 to 2.0.0-RC1 and now
discovered a<br/>problem with the IoConnector (I'm using the nio stuff)...

I'll try to
explain:

In case of network connection shutdown I try to clean up as good
as<br/>possible. I terminate tread pools, I close the session, and finally I try<br/>to
dispose the IoConnector. 

Here's a small code-snippet from my shutdown-code:
<hr
/>
CloseFuture closeFuture = ctsc.getSession().close(false);

                   
closeFuture.addListener(new<br/>IoFutureListener&lt;IoFuture&gt;() {

                    
   public void operationComplete(IoFuture future) 
{                           
ctsc.getFilterchainWorkerPool().shutdown();                           
System.out.println("managed session count="+ctsc.getConnector().getManagedSessionCount());
                           ctsc.getConnector().dispose();                        }
       
            });
<hr />
"ctsc" is a simple container which contains the session
(getSession) and<br/>the used connection (getConnector). First I try to close the session.
Then,<br/>if this operation is completed, I try to shutdown a thread pool and
finally<br/>dispose the connector. I read in the api doc, that this dispose call
may<br/>block in case of still open session related to this connector.

I tried to print
out the number of still open sessions. On the console I<br/>get: "managed session count=
0"<br/>But the next call, the dispose() call, blocks and prevents the
remaining<br/>threads from shutdown to get a clean application termination.

If I switch
from RC1 backt o M6, this works quite well. 

Am I doing something wrong? Has the behavior
changed? *little bit<br/>confused*
 
