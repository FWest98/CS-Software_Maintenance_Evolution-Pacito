Pattern changes caused by commit: c7b41628bbfd46b3e26e2faff809cadaadccc28e

From: Mediator-65
To:   Mediator-68

From: Observer-1
To:   Observer-2


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-186.txt 

commit c7b41628bbfd46b3e26e2faff809cadaadccc28e
Author: Peter A Royal Jr <proyal@apache.org>

    DIRMINA-184 - Alternate ThreadPoolFilter that uses a pluggable thead pool. A Leader-Follower implementation, as well a java5 based pool that uses an ExecutorService



==================================
 Issue DIRMINA-184 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-184] Allow ThreadPool used by ThreadPoolFilter to be pluggable
-----------------

-----------------
Summary: Allow ThreadPool used by ThreadPoolFilter to be pluggable
-----------------

-----------------
Issue type: Improvement
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Sun, 5 Mar 2006 09:44:42 +0000
-----------------

-----------------
Resolved at: Mon, 15 May 2006 00:47:47 +0000
-----------------

-----------------
Assigned to: Peter A Royal Jr.
-----------------

-----------------
Description: 

Attached is the start of a patch to allow the ThreadPool that a ThreadPoolFilter uses to
be pluggable. Currently depends on Java5, but works as an illustration of thoughts.
 

-----------------

-----------------
Comments: 

New Comment: 
Attached is a slight variant of the pluggable ThreadPoolFilter. It differs only slightly
from the one that was already submitted in the following manner<ul class="alternate"
type="square">	<li>The SessionBuffer is maintained as an attribute of the IoSession
instead of in a single map. This shifts the synchronization on the IoSession instead of on
the map. Not sure if I am losing any performance by doing so. But this way, the life cycle
of a SessionBuffer is linked to the life cycle of the IoSession. Only one session buffer
is created for each IoSession instead of the session buffer being released every time the
event queue become empty.</li></ul><ul class="alternate" type="square">	<li>Removed the
need for 'queuedSessionBuffers' by adding a 'processingCompleted' flag. I assumed that the
sole purpose of this queue was to know when a new runnable task has to be created for a
session buffer. A subtle change is that I replaced the use of ConcurrentLinkedQueue with a
LinkedList for the event queue, as I synchronize on the event queue both the times when
the queue is accessed.</li></ul> 


New Comment: 
The attachment for my previous comment. 


New Comment: 
Srikanth, great addition! I've been running tests with this for the past few days and its
very solid.. great removal of another synchronization point. 


New Comment: 
Will add to SVN shortly, will make a new 'java5' module to contain code that can use java5
until the core depends on it. 


New Comment: 
Sounds good! 


New Comment: 
Committed as an alternate filter, the ThreadPoolThreadPoolFilter. (yea, bad name..) We can
replace the current TPF after some testing, but I did not want to force the newer filter
on anyone just yet. 


New Comment: 
Peter, I have a few questions about your commit:1)<br/>At line 187 of
LeaderFollowerThreadPool:    //TODO this should be in the filter, inits on pre-add if we
have not been init'ed<br/>    public void onPreAdd( IoFilterChain parent, String name,
IoFilter.NextFilter nextFilter )<br/>        throws Exception<br/>    {<br/>        if(
leader == null )        {            init();        }    }Do we need this method?  I guess
this method is not invoked by anyone.2) If LeaderFollowerThreadPool and
ThreadPoolThreadPoolFilter provides exactly the same functionality with ThreadPoolFilter,
why don't we replace it?  ThreadPoolThreadPoolFilter could become a ThreadPoolFilter which
uses LeaderFollowerThreadPool by default, and the pool implementation could be changed if
a user specifies his or her favorite pool implementation.3) Can't we simply expose
ProcessEventRunnable to users and make ThreadPool.submit accept it instead of Object? 


New Comment: 
1) Whoops! Will remove2) Yes, the default should be changed. I left both in temporarily as
to allow people to test the new one and the old side-by-side3) Since the ThreadPool isn't
specific about processing any specific type of Runnable, I thought it was appropriate to
have the ThreadPool interface just take a Runnable. 


New Comment: 
Peter,Please review my changes:<a
href="http://svn.apache.org/viewvc?view=rev&amp;revision=411052" class="external-link"
rel="nofollow">http://svn.apache.org/viewvc?view=rev&amp;revision=411052</a><ul>	<li>Moved
all thread pool classes to org.apache.mina.filter.thread</li>	<li>Replaced the old
ThreadPoolFilter with the new one</li>	<li>Added default properties to
ThreadPool</li></ul>Adding default properties can be controversial because we don't have
any control over Executor implementations.  Please feel free to comment, and let's close
this issue when you're confident it's time to close this issue. 


New Comment: 
Overall looks good. My only concern is the new properties on the ThreadPool, since they
really only apply to the LeaderFollower implementation.. I think we should only put things
on the interface that are generally applicable across implementations.Anyone else have
thoughts on this? 


New Comment: 
The problem with extra properties is caused by the impedence mismatch between thread pools
and executors.  Because the executor abstracts all kinds of thread model, we can safely
say it's a superset of thread pools.What do you think about following the same way the JDK
did, like creating an ExecutorFilter to get rid of this impedence mismatch.  By doing
this, we can retain the extra properties in ThreadPool and make it extend an Executor
interface. Of course, the Executor interface should be a backported version of Java 5. 


New Comment: 
k, so the ThreadPoolFilter becomes an ExecutorFilter, since that's all it really needs to
do its work?the reason i avoided doing this before, is because it would change the name of
something we talk about all the time <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>I don't think we need to keep the
ThreadPool interface if we do that, since we only have one implementation.I'll do this
tomorrow if no objections (hackathon!) 


New Comment: 
No objection!  Did you already make changes? 


