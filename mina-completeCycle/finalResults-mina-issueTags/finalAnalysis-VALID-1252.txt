Pattern changes caused by commit: d616c6056add234aad29168ad1eca3a1cc14cd08

From: Bridge-18
To:   Bridge-22

From: Mediator-35
To:   Mediator-38

From: Template Method-3
To:   Template Method-4


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1252.txt 

commit d616c6056add234aad29168ad1eca3a1cc14cd08
Author: Trustin Lee <trustin@apache.org>

    Related issue: DIRMINA-495 (IoConnector needs a way to store information into the IoSession before the IoHandler gets ahold of it)
    * Changed IoSessionInitializer<ConnectFuture> to IoSessionInitializer<? extends ConnectFuture> for more API flexibility
    * Introduced @SuppressWarning inevitably eek!



==================================
 Issue DIRMINA-495 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-495] IoConnector needs a way to store information into the IoSession before the IoHandler gets ahold of it
-----------------

-----------------
Summary: IoConnector needs a way to store information into the IoSession before the IoHandler gets ahold of it
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 12 Dec 2007 01:21:51 +0000
-----------------

-----------------
Resolved at: Thu, 27 Dec 2007 18:10:28 +0000
-----------------

-----------------
Assigned to: Mike Heath
-----------------

-----------------
Description: 

It is often necessary to pass information into the IoHandler associated with an
IoConnector.  Sometimes this information is needed even as early as IoSession creation
time.  A mechanism is needed to pass information in to the IoSession at the time you call
IoConnector.connect().  Discussing this with Mike Heath, we determined that a logical
approach could be to have variants of the connect() methods that accept information that
can be attached to the IoSession when it is created.

One option is to simply pass a Map
in to the connect method.  The contents of the Map would be copied into the IoSession's
attribute map after it is constructed but before the IoHandler.sessionCreated method is
created.  In addition, it seems likely that in many cases only one entry would need to be
added - in this case the user could simply do this:<br/>   ioConnector.connect(addr,
Collections.singletonMap(MY_KEY, theValue));

Another option would be to use variable
argument lists to accept any number of key-value pairs.  The pairs could be represented by
a class - AttributePair for example.  It could look like this:

   public final class
AttributePair&lt;K, V&gt; {<br/>       private final K key;<br/>       private final V
value;

       private AttributePair(K key, V value) 
{ this.key = key; this.value =
value; }
       public static &lt;K, V&gt; AttributePair&lt;K,V&gt; pair(K key, V value)

{ return new AttributePair&lt;K, V&gt;(key, value); }
   }

Then the user can use static
imports to pull in the "pair" method.  The connect() method on IoConnector could accept a
variable list of AttributePair objects, so the user could write code like this:

   
ioConnector.connect(addr, pair(MY_KEY1, myValue), pair(MY_KEY2, myValue2));

Though this
approach is somewhat more complicated than just using a Map.

Other approaches may also be
discussed.
 
