Pattern changes caused by commit: 520ebc495d1410069fa7b36966a335cff204efdd

From: Mediator-73
To:   Mediator-75


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-163.txt 

commit 520ebc495d1410069fa7b36966a335cff204efdd
Author: Trustin Lee <trustin@apache.org>

    Fixed issue: DIRMINA-200 (IBM iSeries throws unexpected SocketException)
    * Socket/DatagramSessionConfigImpl now pre-calculates default values and availability of socket options



==================================
 Issue DIRMINA-200 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-200] IBM iSeries throws unexpected SocketException
-----------------

-----------------
Summary: IBM iSeries throws unexpected SocketException
-----------------

-----------------
Issue type: Bug
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Tue, 4 Apr 2006 22:33:51 +0000
-----------------

-----------------
Resolved at: Wed, 9 Aug 2006 07:33:17 +0000
-----------------

-----------------
Assigned to: Trustin Lee
-----------------

-----------------
Description: 

Proposal of a change to nio SocketSessionImpl.

I'd like the calls
to:

	getTrafficClass<br/>	setTrafficClass<br/>	setSendBufferSize<br/>	setReceiveBufferSize

to
not throw RuntimeIOException when a SocketException is caught.

My reasoning is based on
the Socket class javadoc:

E.g.  setTrafficClass

"As the underlying network
implementation may ignore this value applications should consider it a
hint."

and

"Setting bits in the precedence field may result in a SocketException
indicating that the operation is not permitted."

The other getter/setter method javadoc
also refer to 'hints' and a 'if there is an error obtaining' condition.

Some operating
systems (OS/400 in my case <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/wink.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> ), do not allow the trafficClass value to
be read or written.  I think this may also be the case as reported here on Linux:

<a
href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4709474" class="external-link"
rel="nofollow">http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4709474</a>

By ignoring
the SocketException thrown by these methods (perhaps issuing a log4j WARN instead?  Or
hooking up with an appropriate monitor?), socket sessions can be established without error
on an IBM iSeries.

Example stack trace:

2006-04-03 17:26:26,343 WARN  <span
class="error">&#91;org.apache.mina.common.support.DefaultExceptionMonitor&#93;</span>(SocketAcceptor-0)
Unexpected exception.<br/>org.apache.mina.common.RuntimeIOException:
java.net.SocketException<br/>	at
java.lang.Throwable.&lt;init&gt;(Throwable.java:240)<br/>	at
java.lang.Exception.&lt;init&gt;(Exception.java:77)<br/>	at
java.lang.RuntimeException.&lt;init&gt;(RuntimeException.java:77)<br/>	at
org.apache.mina.common.RuntimeIOException.&lt;init&gt;(RuntimeIOException.java:48)<br/>	at
org.apache.mina.transport.socket.nio.support.SocketSessionImpl$SocketSessionConfigImpl.setTrafficClass(SocketSessionImpl.java:342)<br/>	at
org.apache.mina.transport.socket.nio.support.SocketSessionImpl.&lt;init&gt;(SocketSessionImpl.java:71)<br/>	at
org.apache.mina.transport.socket.nio.support.SocketAcceptorDelegate$Worker.processSessions(SocketAcceptorDelegate.java:379)<br/>	at
org.apache.mina.transport.socket.nio.support.SocketAcceptorDelegate$Worker.run(SocketAcceptorDelegate.java:326)<br/>Caused
by: java.net.SocketException<br/>	at
java.lang.Throwable.&lt;init&gt;(Throwable.java:180)<br/>	at
java.lang.Exception.&lt;init&gt;(Exception.java:29)<br/>	at
java.io.IOException.&lt;init&gt;(IOException.java:28)<br/>	at
java.net.SocketException.&lt;init&gt;(SocketException.java:35)<br/>	at
sun.nio.ch.Net.setIntOption(Net.java:156)<br/>	at
sun.nio.ch.SocketChannelImpl$1.setInt(SocketChannelImpl.java:398)<br/>	at
sun.nio.ch.SocketOptsImpl.setInt(SocketOptsImpl.java:46)<br/>	at
sun.nio.ch.SocketOptsImpl$IP.typeOfService(SocketOptsImpl.java:249)<br/>	at
sun.nio.ch.OptionAdaptor.setTrafficClass(OptionAdaptor.java:158)<br/>	at
sun.nio.ch.SocketAdaptor.setTrafficClass(SocketAdaptor.java:320)<br/>	... 4 more

I have
attached a proposed patch and welcome any comments.

SimonT
 
