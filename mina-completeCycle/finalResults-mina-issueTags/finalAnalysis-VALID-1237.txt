Pattern changes caused by commit: 39d3f3d50a0f6944d2d3a5389c4e01a26ab3b37e

From: Bridge-25
To:   Bridge-26


=========================
       NEW GIT LOG
=========================

This commit refers to file: VALID-1237.txt 

commit 39d3f3d50a0f6944d2d3a5389c4e01a26ab3b37e
Author: Mike Heath <mheath@apache.org>

    Fixed DIRMINA-495 - Add support for initializing the IoSession from the code that invokes the IoConnector.connect(...) method.



==================================
 Issue DIRMINA-495 Description 
=======================================

Project: MINA
-----------------

-----------------
Title: [DIRMINA-495] IoConnector needs a way to store information into the IoSession before the IoHandler gets ahold of it
-----------------

-----------------
Summary: IoConnector needs a way to store information into the IoSession before the IoHandler gets ahold of it
-----------------

-----------------
Issue type: New Feature
-----------------

-----------------
Current status: Closed
-----------------

-----------------
Created at: Wed, 12 Dec 2007 01:21:51 +0000
-----------------

-----------------
Resolved at: Thu, 27 Dec 2007 18:10:28 +0000
-----------------

-----------------
Assigned to: Mike Heath
-----------------

-----------------
Description: 

It is often necessary to pass information into the IoHandler associated with an
IoConnector.  Sometimes this information is needed even as early as IoSession creation
time.  A mechanism is needed to pass information in to the IoSession at the time you call
IoConnector.connect().  Discussing this with Mike Heath, we determined that a logical
approach could be to have variants of the connect() methods that accept information that
can be attached to the IoSession when it is created.

One option is to simply pass a Map
in to the connect method.  The contents of the Map would be copied into the IoSession's
attribute map after it is constructed but before the IoHandler.sessionCreated method is
created.  In addition, it seems likely that in many cases only one entry would need to be
added - in this case the user could simply do this:<br/>   ioConnector.connect(addr,
Collections.singletonMap(MY_KEY, theValue));

Another option would be to use variable
argument lists to accept any number of key-value pairs.  The pairs could be represented by
a class - AttributePair for example.  It could look like this:

   public final class
AttributePair&lt;K, V&gt; {<br/>       private final K key;<br/>       private final V
value;

       private AttributePair(K key, V value) 
{ this.key = key; this.value =
value; }
       public static &lt;K, V&gt; AttributePair&lt;K,V&gt; pair(K key, V value)

{ return new AttributePair&lt;K, V&gt;(key, value); }
   }

Then the user can use static
imports to pull in the "pair" method.  The connect() method on IoConnector could accept a
variable list of AttributePair objects, so the user could write code like this:

   
ioConnector.connect(addr, pair(MY_KEY1, myValue), pair(MY_KEY2, myValue2));

Though this
approach is somewhat more complicated than just using a Map.

Other approaches may also be
discussed.
 

-----------------

-----------------
Comments: 

New Comment: 
A patch that adds variants of IoConnector.connect() that accept a Map and copy the values
to the IoSession attributes.  Not tested <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
This is a better version.  It accepts Map&lt;?, ?&gt; rather than Map&lt;Object,Object&gt;
so the user can do Collections.singletonMap() without having to cast or qualify it. 


New Comment: 
This version actually seems to work. 


New Comment: 
I've taken an initial stab at this issue too and have a patch at <a
href="http://swamp.homelinux.net/mina/mina-495.patch" class="external-link"
rel="nofollow">http://swamp.homelinux.net/mina/mina-495.patch</a> for people to review.  I
think this will take a little more discussion to determine that best approach at solving
it. 


New Comment: 
I ran into a similar situation some time ago though I wanted to do more with the session
than add attributes. First I thought I could just use an IoFutureListener and access the
new session there. I soon realized that this wouldn't work since I needed my
IoFutureListener to be called before sessionCreate() on my IoHandler. There's no way to
guarantee that that happens in this order with MINA 1.x.I ended up with something
likeconnector.connect(address, new IoHandlerProxy(realIoHandler) {<br/>    public void
sessionCreated(IoSession session) {        // Do whatever it was I needed to do with the
session here        super.sessionCreated(session);    }}IoHandlerProxy is a simple custom
class which let's me intercept calls to the real IoHandler. I think you get the point.My
point here is that there may be other things than adding attributes one might want to do
before sessionCreated() is called. If connect() would take a ConnectCallback as an
argument the user could do whatever she wants before the IoHandler is called, not just add
attributes.ConnectCallback would be very similar to IoFutureListener so maybe we could use
that and connect() would automatically set the IoFutureListener on the ConnectFuture. In
that way it is guaranteed that the listener is called before the IoHandler is called.With
this it would be simple to add attributes to the session:connector.connect(add, new
IoFutureListener&lt;ConnectFuture&gt;() {<br/>    void operationComplete(ConnectFuture
future) {<br/>        if (future.isConnected()) {           
future.getSession().addAttribute(...);        }   }<br/>});We could still also add a
connect(addr, Map) method to IoConnector but it would be implemented like the above.WDYT? 


New Comment: 
That seems reasonable - with a general callback you could cleanly add attributes.  BUT
we'd have to ensure that the callback is called <del>immediately</del> after the session
is created.  The regular ConnectFuture callback doesn't happen until the connect completes
- which is too late <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>So maybe a new "SessionFuture" type is
called for?Also the callback method should be allowed to throw exceptions.You could then
do this (which would meet the requirements of this issue):connector.connect(addr, new
IoFutureListener&lt;SessionFuture&gt;() {<br/>    void operationComplete(SessionFuture
future) {        future.getSession.setAttribute(MY_KEY, myVal);    }} 


New Comment: 
In MINA 1.x you can pass the IoHandler into in the connect method.  This is not the case
in MINA 2.0.I really like the idea of being able to pass in a callback.  I'm not so sure I
like the idea of using an IoFutureListener though because it would require creating a
SessionFuture type that would only be used to pass the session into the
IoFutureListener.An interface like:public interface SessionCallback {<br/>  void
onSession(IoSession session);<br/>}is simple and sufficient callback mechanism, IMO.WDYT? 


New Comment: 
Works for me.  As long as it's definitely called before the sessionCreated() filter
chain/handler method <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> 


New Comment: 
This is one possible implementation of the callback approach. 


New Comment: 
Here is the callback solution I've implemented (the <a
href="https://issues.apache.org/jira/browse/DIRMINA-495" title="IoConnector needs a way to
store information into the IoSession before the IoHandler gets ahold of it"
class="issue-link" data-issue-key="DIRMINA-495"><del>DIRMINA-495</del></a>-mikeheath.patch
file, er... <a href="https://issues.apache.org/jira/browse/DIRMINA-295" title="Avoid loops
in tests" class="issue-link"
data-issue-key="DIRMINA-295"><del>DIRMINA-295</del></a>-mikeheath.patch - Where did I
learn how to type? <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/> ).  Any feedback would be appreciated. 
If I don't hear any objects, I'll commit these changes in 72 hours. 


New Comment: 
It's missing the SessionCallback interface, so it won't compile. 


New Comment: 
<a href="https://issues.apache.org/jira/browse/DIRMINA-495" title="IoConnector needs a way
to store information into the IoSession before the IoHandler gets ahold of it"
class="issue-link" data-issue-key="DIRMINA-495"><del>DIRMINA-495</del></a>-mikheath.patch
should compile this time.  And it's spelled correctly too.  Any feedback is appreciated. 


New Comment: 
It works, woo.  I'd say, commit! 


New Comment: 
What do you think about renaming it to IoSessionInitializer? 


New Comment: 
I think at least we need to add 'Io' prefix because all others in the core module do. 
BTW, the patch looks great! 


New Comment: 
The name is unimportant to me - Mike? 


New Comment: 
I went with the name IoSessionInitializer for the callback interface.  This code has been
committed.  David, please review the fix and close the issue when you've verified that it
works. 


New Comment: 
I have renamed its method from initSession to initializeSession, which looks more
beautiful (just kidding <img class="emoticon"
src="https://issues.apache.org/jira/images/icons/emoticons/smile.png" height="16"
width="16" align="absmiddle" alt="" border="0"/>.  I'd like to avoid shorten words
whenever possible. 


New Comment: 
This works great!  Closing at Mike's request. 


New Comment: 
I've been trying to retrofit some of my existing code to use the IoSessionInitializer. 
This code is a client that has its own API and uses MINA under the hood.  I need to be
able to cancel a pending connect future from my API.  To facilitate this, I discovered
that it would greatly simplify my code if the ConnectFuture instance is passed into the
IoSessionInitializer.Modifying the IoSessionInitializer interface to look like:public
interface IoSessionInitializer {<br/>    void initializeSession(IoSession session,
IoFuture future);<br/>}would fix my problem.  The future object passed into the
initializeSession method would be the ConnectFuture that is returned by
IoConnector.connect(...); 


New Comment: 
Added IoFuture to argument list on IoSessionInitializer.initializeSession. 


